
USB_OTG_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab50  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae94  0800ae94  0000be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  0800ae9c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008e0  2000000c  0800aea5  0000c00c  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  200008ec  0800aea5  0000c8ec  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000c009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b34f  00000000  00000000  0000c03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003457  00000000  00000000  0002738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000017f8  00000000  00000000  0002a7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001279  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ed2e  00000000  00000000  0002d259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e641  00000000  00000000  0006bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017d157  00000000  00000000  0008a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0020771f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000670c  00000000  00000000  00207764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0020de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	2000000c 	.word	0x2000000c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800ada4 	.word	0x0800ada4

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000010 	.word	0x20000010
 80002a8:	0800ada4 	.word	0x0800ada4

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f001 f88c 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80002b4:	f000 f872 	bl	800039c <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f812 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 fa18 	bl	80006f0 <MX_GPIO_Init>
  MX_HSPI1_Init();
 80002c0:	f000 f87a 	bl	80003b8 <MX_HSPI1_Init>
  MX_I2C3_Init();
 80002c4:	f000 f8b6 	bl	8000434 <MX_I2C3_Init>
  MX_I2C5_Init();
 80002c8:	f000 f8f4 	bl	80004b4 <MX_I2C5_Init>
  MX_ICACHE_Init();
 80002cc:	f000 f932 	bl	8000534 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 80002d0:	f000 f944 	bl	800055c <MX_OCTOSPI1_Init>
  MX_SDMMC1_MMC_Init();
 80002d4:	f000 f9ba 	bl	800064c <MX_SDMMC1_MMC_Init>
  MX_USB_OTG_HS_PCD_Init();
 80002d8:	f000 f9dc 	bl	8000694 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <main+0x30>

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09e      	sub	sp, #120	@ 0x78
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2260      	movs	r2, #96	@ 0x60
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f00a fd2b 	bl	800ad4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000304:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000308:	f004 fdf2 	bl	8004ef0 <HAL_PWREx_ControlVoltageScaling>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000312:	f000 fb15 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 8000316:	2311      	movs	r3, #17
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000324:	2310      	movs	r3, #16
 8000326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000328:	2300      	movs	r3, #0
 800032a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	2303      	movs	r3, #3
 8000332:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800033c:	2308      	movs	r3, #8
 800033e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000340:	2308      	movs	r3, #8
 8000342:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000344:	2302      	movs	r3, #2
 8000346:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000348:	2302      	movs	r3, #2
 800034a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800034c:	230c      	movs	r3, #12
 800034e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f004 fee3 	bl	8005124 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000364:	f000 faec 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	231f      	movs	r3, #31
 800036a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f005 fda9 	bl	8005edc <HAL_RCC_ClockConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000390:	f000 fad6 	bl	8000940 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3778      	adds	r7, #120	@ 0x78
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003a0:	f004 feb0 	bl	8005104 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80003a4:	2002      	movs	r0, #2
 80003a6:	f004 fe2f 	bl	8005008 <HAL_PWREx_ConfigSupply>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80003b0:	f000 fac6 	bl	8000940 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_HSPI1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 1;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 800040a:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_HSPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000418:	f009 f92c 	bl	8009674 <HAL_XSPI_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_HSPI1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 fa8d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000028 	.word	0x20000028
 8000430:	420d3400 	.word	0x420d3400

08000434 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_I2C3_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <MX_I2C3_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000470:	f001 fcbe 	bl	8001df0 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 fa61 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000482:	f001 fd50 	bl	8001f26 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 fa58 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000494:	f001 fd92 	bl	8001fbc <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 fa4f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000088 	.word	0x20000088
 80004ac:	46002800 	.word	0x46002800
 80004b0:	20303e5d 	.word	0x20303e5d

080004b4 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <MX_I2C5_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x20303E5D;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <MX_I2C5_Init+0x7c>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 80004d6:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e2:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 80004ee:	480e      	ldr	r0, [pc, #56]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004f0:	f001 fc7e 	bl	8001df0 <HAL_I2C_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 80004fa:	f000 fa21 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	@ (8000528 <MX_I2C5_Init+0x74>)
 8000502:	f001 fd10 	bl	8001f26 <HAL_I2CEx_ConfigAnalogFilter>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 800050c:	f000 fa18 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000510:	2100      	movs	r1, #0
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_I2C5_Init+0x74>)
 8000514:	f001 fd52 	bl	8001fbc <HAL_I2CEx_ConfigDigitalFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 fa0f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000dc 	.word	0x200000dc
 800052c:	40009800 	.word	0x40009800
 8000530:	20303e5d 	.word	0x20303e5d

08000534 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000538:	2000      	movs	r0, #0
 800053a:	f001 fd8b 	bl	8002054 <HAL_ICACHE_ConfigAssociativityMode>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000544:	f000 f9fc 	bl	8000940 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000548:	f001 fda4 	bl	8002094 <HAL_ICACHE_Enable>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000552:	f000 f9f5 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800057e:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <MX_OCTOSPI1_Init+0xe8>)
 8000580:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000584:	2201      	movs	r2, #1
 8000586:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000596:	2220      	movs	r2, #32
 8000598:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800059c:	2201      	movs	r2, #1
 800059e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005de:	f002 fca3 	bl	8002f28 <HAL_OSPI_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 80005e8:	f000 f9aa 	bl	8000940 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80005f8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80005fc:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_OCTOSPI1_Init+0xec>)
 8000600:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800060e:	f002 fdcb 	bl	80031a8 <HAL_OSPIM_Config>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000618:	f000 f992 	bl	8000940 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800062a:	f003 fbad 	bl	8003d88 <HAL_OSPI_DLYB_SetConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_OCTOSPI1_Init+0xdc>
  {
    Error_Handler();
 8000634:	f000 f984 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000130 	.word	0x20000130
 8000644:	420d1400 	.word	0x420d1400
 8000648:	01000001 	.word	0x01000001

0800064c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_SDMMC1_MMC_Init+0x44>)
 8000654:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000664:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000668:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000678:	f001 fd1c 	bl	80020b4 <HAL_MMC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8000682:	f000 f95d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000018c 	.word	0x2000018c
 8000690:	420c8000 	.word	0x420c8000

08000694 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <MX_USB_OTG_HS_PCD_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006a0:	2209      	movs	r2, #9
 80006a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006d6:	f003 fb9f 	bl	8003e18 <HAL_PCD_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80006e0:	f000 f92e 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000404 	.word	0x20000404
 80006ec:	42040000 	.word	0x42040000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	@ 0x38
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	4b85      	ldr	r3, [pc, #532]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070c:	4a83      	ldr	r2, [pc, #524]	@ (800091c <MX_GPIO_Init+0x22c>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000716:	4b81      	ldr	r3, [pc, #516]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	623b      	str	r3, [r7, #32]
 8000722:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b7d      	ldr	r3, [pc, #500]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072a:	4a7c      	ldr	r2, [pc, #496]	@ (800091c <MX_GPIO_Init+0x22c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000734:	4b79      	ldr	r3, [pc, #484]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b76      	ldr	r3, [pc, #472]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000748:	4a74      	ldr	r2, [pc, #464]	@ (800091c <MX_GPIO_Init+0x22c>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000752:	4b72      	ldr	r3, [pc, #456]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b6e      	ldr	r3, [pc, #440]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000766:	4a6d      	ldr	r2, [pc, #436]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000770:	4b6a      	ldr	r3, [pc, #424]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b67      	ldr	r3, [pc, #412]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000784:	4a65      	ldr	r2, [pc, #404]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078e:	4b63      	ldr	r3, [pc, #396]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b5f      	ldr	r3, [pc, #380]	@ (800091c <MX_GPIO_Init+0x22c>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a2:	4a5e      	ldr	r2, [pc, #376]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ac:	4b5b      	ldr	r3, [pc, #364]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ba:	4b58      	ldr	r3, [pc, #352]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c0:	4a56      	ldr	r2, [pc, #344]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ca:	4b54      	ldr	r3, [pc, #336]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d8:	4b50      	ldr	r3, [pc, #320]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007de:	4a4f      	ldr	r2, [pc, #316]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e8:	4b4c      	ldr	r3, [pc, #304]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b49      	ldr	r3, [pc, #292]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fc:	4a47      	ldr	r2, [pc, #284]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000806:	4b45      	ldr	r3, [pc, #276]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f244 2103 	movw	r1, #16899	@ 0x4203
 800081a:	4841      	ldr	r0, [pc, #260]	@ (8000920 <MX_GPIO_Init+0x230>)
 800081c:	f001 fad0 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESETn_GPIO_Port, DSI_RESETn_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	483f      	ldr	r0, [pc, #252]	@ (8000924 <MX_GPIO_Init+0x234>)
 8000826:	f001 facb 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eMMC_RSTn_GPIO_Port, eMMC_RSTn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	@ 0x40
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000830:	f001 fac6 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_BL_CTRL_GPIO_Port, DSI_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	483c      	ldr	r0, [pc, #240]	@ (800092c <MX_GPIO_Init+0x23c>)
 800083a:	f001 fac1 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin UCPD_DBn_Pin TOF_LPN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin;
 800083e:	f244 2303 	movw	r3, #16899	@ 0x4203
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	4832      	ldr	r0, [pc, #200]	@ (8000920 <MX_GPIO_Init+0x230>)
 8000858:	f001 f8da 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INTN_Pin */
  GPIO_InitStruct.Pin = TOF_INTN_Pin;
 800085c:	2320      	movs	r3, #32
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000860:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <MX_GPIO_Init+0x240>)
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TOF_INTN_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4831      	ldr	r0, [pc, #196]	@ (8000934 <MX_GPIO_Init+0x244>)
 8000870:	f001 f8ce 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESETn_Pin */
  GPIO_InitStruct.Pin = DSI_RESETn_Pin;
 8000874:	2320      	movs	r3, #32
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DSI_RESETn_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4826      	ldr	r0, [pc, #152]	@ (8000924 <MX_GPIO_Init+0x234>)
 800088c:	f001 f8c0 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : eMMC_RSTn_Pin */
  GPIO_InitStruct.Pin = eMMC_RSTn_Pin;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(eMMC_RSTn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4820      	ldr	r0, [pc, #128]	@ (8000928 <MX_GPIO_Init+0x238>)
 80008a8:	f001 f8b2 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	481a      	ldr	r0, [pc, #104]	@ (800092c <MX_GPIO_Init+0x23c>)
 80008c4:	f001 f8a4 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_GPIO_Init+0x240>)
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4816      	ldr	r0, [pc, #88]	@ (8000938 <MX_GPIO_Init+0x248>)
 80008de:	f001 f897 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INTN_Pin */
  GPIO_InitStruct.Pin = TEMP_INTN_Pin;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_GPIO_Init+0x240>)
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TEMP_INTN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <MX_GPIO_Init+0x24c>)
 80008f6:	f001 f88b 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DSI_TOUCH_INT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin|UCPD_FLT_Pin;
 80008fa:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x240>)
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_GPIO_Init+0x230>)
 8000910:	f001 f87e 	bl	8001a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3738      	adds	r7, #56	@ 0x38
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	46020c00 	.word	0x46020c00
 8000920:	42021000 	.word	0x42021000
 8000924:	42020c00 	.word	0x42020c00
 8000928:	42021c00 	.word	0x42021c00
 800092c:	42022000 	.word	0x42022000
 8000930:	10110000 	.word	0x10110000
 8000934:	42020400 	.word	0x42020400
 8000938:	42020800 	.word	0x42020800
 800093c:	42021400 	.word	0x42021400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_MspInit+0x30>)
 8000954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000958:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x30>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x30>)
 8000964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000970:	f004 fb9a 	bl	80050a8 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	46020c00 	.word	0x46020c00

08000980 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0c4      	sub	sp, #272	@ 0x110
 8000984:	af00      	add	r7, sp, #0
 8000986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800098a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800098e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	22e0      	movs	r2, #224	@ 0xe0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a f9ce 	bl	800ad4a <memset>
  if(hxspi->Instance==HSPI1)
 80009ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a58      	ldr	r2, [pc, #352]	@ (8000b1c <HAL_XSPI_MspInit+0x19c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	f040 80a8 	bne.w	8000b12 <HAL_XSPI_MspInit+0x192>

    /* USER CODE END HSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI;
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	f04f 0301 	mov.w	r3, #1
 80009ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_SYSCLK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4618      	mov	r0, r3
 80009da:	f005 fe4f 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_XSPI_MspInit+0x68>
    {
      Error_Handler();
 80009e4:	f7ff ffac 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80009e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80009f8:	4b49      	ldr	r3, [pc, #292]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a06:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0c:	4a44      	ldr	r2, [pc, #272]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a16:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a32:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	4a39      	ldr	r2, [pc, #228]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a44:	4b36      	ldr	r3, [pc, #216]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a60:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a68:	4a2d      	ldr	r2, [pc, #180]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a72:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a78:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000a7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a8e:	681b      	ldr	r3, [r3, #0]
    PH11     ------> HSPI1_IO1
    PH13     ------> HSPI1_IO3
    PH9     ------> HSPI1_NCS
    PH12     ------> HSPI1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000aae:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <HAL_XSPI_MspInit+0x1a4>)
 8000ab6:	f000 ffab 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000aba:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8000abe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ada:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <HAL_XSPI_MspInit+0x1a8>)
 8000ae2:	f000 ff95 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11
 8000ae6:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000aea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000b00:	2308      	movs	r3, #8
 8000b02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b06:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <HAL_XSPI_MspInit+0x1ac>)
 8000b0e:	f000 ff7f 	bl	8001a10 <HAL_GPIO_Init>

    /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	420d3400 	.word	0x420d3400
 8000b20:	46020c00 	.word	0x46020c00
 8000b24:	42022400 	.word	0x42022400
 8000b28:	42022000 	.word	0x42022000
 8000b2c:	42021c00 	.word	0x42021c00

08000b30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0c4      	sub	sp, #272	@ 0x110
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	22e0      	movs	r2, #224	@ 0xe0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a f8f6 	bl	800ad4a <memset>
  if(hi2c->Instance==I2C3)
 8000b5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8000cd8 <HAL_I2C_MspInit+0x1a8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d14f      	bne.n	8000c10 <HAL_I2C_MspInit+0xe0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f005 fd78 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8000b92:	f7ff fed5 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	4b51      	ldr	r3, [pc, #324]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bb4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bb8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4841      	ldr	r0, [pc, #260]	@ (8000ce0 <HAL_I2C_MspInit+0x1b0>)
 8000bdc:	f000 ff18 	bl	8001a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000be0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000be6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bf6:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bfe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c0c:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN I2C5_MspInit 1 */

    /* USER CODE END I2C5_MspInit 1 */
  }

}
 8000c0e:	e05e      	b.n	8000cce <HAL_I2C_MspInit+0x19e>
  else if(hi2c->Instance==I2C5)
 8000c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a31      	ldr	r2, [pc, #196]	@ (8000ce4 <HAL_I2C_MspInit+0x1b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d155      	bne.n	8000cce <HAL_I2C_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fd1f 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8000c44:	f7ff fe7c 	bl	8000940 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c74:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000c76:	2330      	movs	r3, #48	@ 0x30
 8000c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C5;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c94:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <HAL_I2C_MspInit+0x1b0>)
 8000c9c:	f000 feb8 	bl	8001a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cb6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ccc:	681b      	ldr	r3, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	46002800 	.word	0x46002800
 8000cdc:	46020c00 	.word	0x46020c00
 8000ce0:	42021c00 	.word	0x42021c00
 8000ce4:	40009800 	.word	0x40009800

08000ce8 <HAL_OSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hospi: OSPI handle pointer
  * @retval None
  */
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0c6      	sub	sp, #280	@ 0x118
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cf6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	22e0      	movs	r2, #224	@ 0xe0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00a f81a 	bl	800ad4a <memset>
  if(hospi->Instance==OCTOSPI1)
 8000d16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a79      	ldr	r2, [pc, #484]	@ (8000f08 <HAL_OSPI_MspInit+0x220>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 80e9 	bne.w	8000efc <HAL_OSPI_MspInit+0x214>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000d2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fc9b 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8000d4c:	f7ff fdf8 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000d50:	4b6e      	ldr	r3, [pc, #440]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d56:	4a6d      	ldr	r2, [pc, #436]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d60:	4b6a      	ldr	r3, [pc, #424]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d6e:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d74:	4a65      	ldr	r2, [pc, #404]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000d7e:	4b63      	ldr	r3, [pc, #396]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d84:	f003 0210 	and.w	r2, r3, #16
 8000d88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d9a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	4a5a      	ldr	r2, [pc, #360]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dac:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db2:	f003 0220 	and.w	r2, r3, #32
 8000db6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dc8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b50      	ldr	r3, [pc, #320]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de0:	f003 0204 	and.w	r2, r3, #4
 8000de4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000df6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b44      	ldr	r3, [pc, #272]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfe:	4a43      	ldr	r2, [pc, #268]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e24:	681b      	ldr	r3, [r3, #0]
    PC3     ------> OCTOSPIM_P1_IO6
    PC2     ------> OCTOSPIM_P1_IO5
    PC0     ------> OCTOSPIM_P1_IO7
    PA1     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e46:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4830      	ldr	r0, [pc, #192]	@ (8000f10 <HAL_OSPI_MspInit+0x228>)
 8000e4e:	f000 fddf 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8;
 8000e52:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e72:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000e76:	4619      	mov	r1, r3
 8000e78:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <HAL_OSPI_MspInit+0x228>)
 8000e7a:	f000 fdc9 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2;
 8000e7e:	230e      	movs	r3, #14
 8000e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e96:	230a      	movs	r3, #10
 8000e98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	@ (8000f14 <HAL_OSPI_MspInit+0x22c>)
 8000ea4:	f000 fdb4 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <HAL_OSPI_MspInit+0x230>)
 8000ece:	f000 fd9f 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <HAL_OSPI_MspInit+0x22c>)
 8000ef8:	f000 fd8a 	bl	8001a10 <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000efc:	bf00      	nop
 8000efe:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	420d1400 	.word	0x420d1400
 8000f0c:	46020c00 	.word	0x46020c00
 8000f10:	42021400 	.word	0x42021400
 8000f14:	42020800 	.word	0x42020800
 8000f18:	42020000 	.word	0x42020000

08000f1c <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0c4      	sub	sp, #272	@ 0x110
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	22e0      	movs	r2, #224	@ 0xe0
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f009 ff00 	bl	800ad4a <memset>
  if(hmmc->Instance==SDMMC1)
 8000f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a59      	ldr	r2, [pc, #356]	@ (80010bc <HAL_MMC_MspInit+0x1a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f040 80a9 	bne.w	80010b0 <HAL_MMC_MspInit+0x194>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f5e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fb80 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_MMC_MspInit+0x6a>
    {
      Error_Handler();
 8000f82:	f7ff fcdd 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f86:	4b4e      	ldr	r3, [pc, #312]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f96:	4b4a      	ldr	r3, [pc, #296]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000faa:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb4:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	f003 0204 	and.w	r2, r3, #4
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fd0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd8:	4a39      	ldr	r2, [pc, #228]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe8:	f003 0208 	and.w	r2, r3, #8
 8000fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ffe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001016:	f003 0202 	and.w	r2, r3, #2
 800101a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800101e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800102c:	681b      	ldr	r3, [r3, #0]
    PB8     ------> SDMMC1_D4
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_7
 800102e:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8001032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001048:	230c      	movs	r3, #12
 800104a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001052:	4619      	mov	r1, r3
 8001054:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <HAL_MMC_MspInit+0x1a8>)
 8001056:	f000 fcdb 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001072:	230c      	movs	r3, #12
 8001074:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <HAL_MMC_MspInit+0x1ac>)
 8001080:	f000 fcc6 	bl	8001a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001084:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001088:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800109e:	230c      	movs	r3, #12
 80010a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80010a8:	4619      	mov	r1, r3
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <HAL_MMC_MspInit+0x1b0>)
 80010ac:	f000 fcb0 	bl	8001a10 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80010b0:	bf00      	nop
 80010b2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	420c8000 	.word	0x420c8000
 80010c0:	46020c00 	.word	0x46020c00
 80010c4:	42020800 	.word	0x42020800
 80010c8:	42020c00 	.word	0x42020c00
 80010cc:	42020400 	.word	0x42020400

080010d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0c6      	sub	sp, #280	@ 0x118
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	22e0      	movs	r2, #224	@ 0xe0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f009 fe26 	bl	800ad4a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80010fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001102:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5f      	ldr	r2, [pc, #380]	@ (8001288 <HAL_PCD_MspInit+0x1b8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f040 80b5 	bne.w	800127c <HAL_PCD_MspInit+0x1ac>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001118:	4a5c      	ldr	r2, [pc, #368]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001124:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0308 	mov.w	r3, #8
 8001138:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800113c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001140:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fa97 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_PCD_MspInit+0x88>
    {
      Error_Handler();
 8001154:	f7ff fbf4 	bl	8000940 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8001158:	200c      	movs	r0, #12
 800115a:	f000 fa35 	bl	80015c8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b4b      	ldr	r3, [pc, #300]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001174:	f003 0201 	and.w	r2, r3, #1
 8001178:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800117c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001186:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800118a:	681b      	ldr	r3, [r3, #0]
    /**USB_OTG_HS GPIO Configuration
    PA12     ------> USB_OTG_HS_DP
    PA11     ------> USB_OTG_HS_DM
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80011a4:	4619      	mov	r1, r3
 80011a6:	483a      	ldr	r0, [pc, #232]	@ (8001290 <HAL_PCD_MspInit+0x1c0>)
 80011a8:	f000 fc32 	bl	8001a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80011ac:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c2:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80011c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80011da:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e0:	4a2a      	ldr	r2, [pc, #168]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ea:	4b28      	ldr	r3, [pc, #160]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80011f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001206:	681b      	ldr	r3, [r3, #0]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d123      	bne.n	800125e <HAL_PCD_MspInit+0x18e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800122c:	f003 0204 	and.w	r2, r3, #4
 8001230:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001234:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800123e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001242:	681b      	ldr	r3, [r3, #0]
      HAL_PWREx_EnableVddUSB();
 8001244:	f003 ff30 	bl	80050a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8001248:	f003 ff3e 	bl	80050c8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800125c:	e003      	b.n	8001266 <HAL_PCD_MspInit+0x196>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800125e:	f003 ff23 	bl	80050a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8001262:	f003 ff31 	bl	80050c8 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8001266:	2001      	movs	r0, #1
 8001268:	f000 f99a 	bl	80015a0 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2049      	movs	r0, #73	@ 0x49
 8001272:	f000 fa75 	bl	8001760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001276:	2049      	movs	r0, #73	@ 0x49
 8001278:	f000 fa8c 	bl	8001794 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	42040000 	.word	0x42040000
 800128c:	46020c00 	.word	0x46020c00
 8001290:	42020000 	.word	0x42020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f915 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <OTG_HS_IRQHandler+0x10>)
 80012fa:	f002 fe99 	bl	8004030 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000404 	.word	0x20000404

08001308 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <SystemInit+0x68>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <SystemInit+0x68>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <SystemInit+0x6c>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <SystemInit+0x6c>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <SystemInit+0x6c>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <SystemInit+0x6c>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <SystemInit+0x6c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <SystemInit+0x6c>)
 800133a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800133e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001342:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <SystemInit+0x6c>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <SystemInit+0x6c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <SystemInit+0x6c>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <SystemInit+0x6c>)
 8001358:	2200      	movs	r2, #0
 800135a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SystemInit+0x68>)
 800135e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001362:	609a      	str	r2, [r3, #8]
  #endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	46020c00 	.word	0x46020c00

08001378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff ffc4 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001380:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001382:	e003      	b.n	800138c <LoopCopyDataInit>

08001384 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001386:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001388:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800138a:	3104      	adds	r1, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800138c:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001390:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001392:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001394:	d3f6      	bcc.n	8001384 <CopyDataInit>
	ldr	r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001398:	e002      	b.n	80013a0 <LoopFillZerobss>

0800139a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800139a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800139c:	f842 3b04 	str.w	r3, [r2], #4

080013a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <LoopForever+0x16>)
	cmp	r2, r3
 80013a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013a4:	d3f9      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a6:	f009 fcd9 	bl	800ad5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013aa:	f7fe ff7f 	bl	80002ac <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013b0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80013b4:	0800ae9c 	.word	0x0800ae9c
	ldr	r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013bc:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 80013c0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80013c4:	200008ec 	.word	0x200008ec

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_Init+0x50>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	@ (800141c <HAL_Init+0x50>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f9b4 	bl	800174a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013e2:	f004 ff6d 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_Init+0x54>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	490c      	ldr	r1, [pc, #48]	@ (8001424 <HAL_Init+0x58>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <HAL_Init+0x5c>)
 80013fa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013fc:	2004      	movs	r0, #4
 80013fe:	f000 f9f9 	bl	80017f4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f812 	bl	800142c <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e002      	b.n	8001418 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001412:	f7ff fa9b 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40022000 	.word	0x40022000
 8001420:	46020c00 	.word	0x46020c00
 8001424:	0800adbc 	.word	0x0800adbc
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_InitTick+0xdc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e05c      	b.n	80014fe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001444:	4b31      	ldr	r3, [pc, #196]	@ (800150c <HAL_InitTick+0xe0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b04      	cmp	r3, #4
 800144e:	d10c      	bne.n	800146a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001450:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_InitTick+0xe4>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <HAL_InitTick+0xdc>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e037      	b.n	80014da <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800146a:	f000 fa1b 	bl	80018a4 <HAL_SYSTICK_GetCLKSourceConfig>
 800146e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d023      	beq.n	80014be <HAL_InitTick+0x92>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d82d      	bhi.n	80014d8 <HAL_InitTick+0xac>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_InitTick+0x5e>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d00d      	beq.n	80014a4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001488:	e026      	b.n	80014d8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_InitTick+0xe4>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <HAL_InitTick+0xdc>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001498:	fbb3 f3f1 	udiv	r3, r3, r1
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	60fb      	str	r3, [r7, #12]
        break;
 80014a2:	e01a      	b.n	80014da <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <HAL_InitTick+0xdc>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80014b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	60fb      	str	r3, [r7, #12]
        break;
 80014bc:	e00d      	b.n	80014da <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_InitTick+0xdc>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	60fb      	str	r3, [r7, #12]
        break;
 80014d6:	e000      	b.n	80014da <HAL_InitTick+0xae>
        break;
 80014d8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f968 	bl	80017b0 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e009      	b.n	80014fe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ea:	2200      	movs	r2, #0
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295
 80014f2:	f000 f935 	bl	8001760 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80014f6:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_InitTick+0xe8>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	e000e010 	.word	0xe000e010
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	200008e8 	.word	0x200008e8

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200008e8 	.word	0x200008e8

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80015aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ac:	f023 0201 	bic.w	r2, r3, #1
 80015b0:	4904      	ldr	r1, [pc, #16]	@ (80015c4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	46000400 	.word	0x46000400

080015c8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d4:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80015d8:	4904      	ldr	r1, [pc, #16]	@ (80015ec <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4313      	orrs	r3, r2
 80015de:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	46000400 	.word	0x46000400

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	@ (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff4c 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800176e:	f7ff ff63 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001772:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	68b9      	ldr	r1, [r7, #8]
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	f7ff ffb3 	bl	80016e4 <NVIC_EncodePriority>
 800177e:	4602      	mov	r2, r0
 8001780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff82 	bl	8001690 <__NVIC_SetPriority>
}
 800178c:	bf00      	nop
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff56 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00d      	b.n	80017e2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_SYSTICK_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_SYSTICK_Config+0x40>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_SYSTICK_Config+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <HAL_SYSTICK_Config+0x40>)
 80017da:	f043 0303 	orr.w	r3, r3, #3
 80017de:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d844      	bhi.n	800188c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	0800182b 	.word	0x0800182b
 800180c:	08001849 	.word	0x08001849
 8001810:	0800186b 	.word	0x0800186b
 8001814:	0800188d 	.word	0x0800188d
 8001818:	0800181d 	.word	0x0800181d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6013      	str	r3, [r2, #0]
      break;
 8001828:	e031      	b.n	800188e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1b      	ldr	r2, [pc, #108]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183c:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800183e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001846:	e022      	b.n	800188e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a13      	ldr	r2, [pc, #76]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001860:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001868:	e011      	b.n	800188e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001880:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001882:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800188a:	e000      	b.n	800188e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800188c:	bf00      	nop
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010
 80018a0:	46020c00 	.word	0x46020c00

080018a4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80018b6:	2304      	movs	r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	e021      	b.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80018c6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018ce:	d011      	beq.n	80018f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018d6:	d810      	bhi.n	80018fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e4:	d003      	beq.n	80018ee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80018e6:	e008      	b.n	80018fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
        break;
 80018ec:	e008      	b.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80018ee:	2301      	movs	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
        break;
 80018f2:	e005      	b.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80018f4:	2302      	movs	r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
        break;
 80018f8:	e002      	b.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
        break;
 80018fe:	bf00      	nop
    }
  }
  return systick_source;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010
 8001914:	46020c00 	.word	0x46020c00

08001918 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001920:	f7ff fe0e 	bl	8001540 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e06b      	b.n	8001a08 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d008      	beq.n	800194e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e05c      	b.n	8001a08 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0204 	orr.w	r2, r2, #4
 800195c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001966:	e020      	b.n	80019aa <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001968:	f7ff fdea 	bl	8001540 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b05      	cmp	r3, #5
 8001974:	d919      	bls.n	80019aa <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199a:	2201      	movs	r2, #1
 800199c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e02e      	b.n	8001a08 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0d7      	beq.n	8001968 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0202 	orr.w	r2, r2, #2
 80019c6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2204      	movs	r2, #4
 80019cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80019d8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f2:	2201      	movs	r2, #1
 80019f4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a22:	e1ba      	b.n	8001d9a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 81aa 	beq.w	8001d94 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a55      	ldr	r2, [pc, #340]	@ (8001b98 <HAL_GPIO_Init+0x188>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d15d      	bne.n	8001b04 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x18c>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a82:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <HAL_GPIO_Init+0x18c>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3208      	adds	r2, #8
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220b      	movs	r2, #11
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2202      	movs	r2, #2
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e067      	b.n	8001bd4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x104>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b12      	cmp	r3, #18
 8001b12:	d145      	bne.n	8001ba0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69f9      	ldr	r1, [r7, #28]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e01e      	b.n	8001bd4 <HAL_GPIO_Init+0x1c4>
 8001b96:	bf00      	nop
 8001b98:	46020000 	.word	0x46020000
 8001b9c:	0800ae14 	.word	0x0800ae14
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d00b      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e4>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	2b11      	cmp	r3, #17
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b12      	cmp	r3, #18
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d017      	beq.n	8001c8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d07c      	beq.n	8001d94 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c9a:	4a47      	ldr	r2, [pc, #284]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0a9a      	lsrs	r2, r3, #10
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dbc <HAL_GPIO_Init+0x3ac>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cd6:	4938      	ldr	r1, [pc, #224]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3318      	adds	r3, #24
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ce4:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001d08:	4a2b      	ldr	r2, [pc, #172]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001d32:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d5e:	4a16      	ldr	r2, [pc, #88]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <HAL_GPIO_Init+0x3a8>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f ae3d 	bne.w	8001a24 <HAL_GPIO_Init+0x14>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	@ 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	46022000 	.word	0x46022000
 8001dbc:	002f7f7f 	.word	0x002f7f7f

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e08d      	b.n	8001f1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fe8a 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	@ 0x24
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d108      	bne.n	8001e92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	e007      	b.n	8001ea2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69d9      	ldr	r1, [r3, #28]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d138      	bne.n	8001fae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e032      	b.n	8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2224      	movs	r2, #36	@ 0x24
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d139      	bne.n	8002046 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e033      	b.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	@ 0x24
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800200e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e007      	b.n	8002082 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0204 	bic.w	r2, r3, #4
 800207a:	4905      	ldr	r1, [pc, #20]	@ (8002090 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40030400 	.word	0x40030400

08002094 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_ICACHE_Enable+0x1c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_ICACHE_Enable+0x1c>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40030400 	.word	0x40030400

080020b4 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e031      	b.n	800212a <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe ff1f 	bl	8000f1c <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f824 	bl	8002134 <HAL_MMC_InitCard>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e019      	b.n	800212a <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb47 	bl	80027ac <HAL_MMC_ConfigWideBusOperation>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08d      	sub	sp, #52	@ 0x34
 8002138:	af02      	add	r7, sp, #8
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800214c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f005 fdd8 	bl	8007d08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002158:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e070      	b.n	8002256 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	4a39      	ldr	r2, [pc, #228]	@ (8002260 <HAL_MMC_InitCard+0x12c>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681c      	ldr	r4, [r3, #0]
 8002186:	466a      	mov	r2, sp
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002190:	e882 0003 	stmia.w	r2, {r0, r1}
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800219a:	4620      	mov	r0, r4
 800219c:	f007 fc1a 	bl	80099d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f007 fc4c 	bl	8009a42 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80021c2:	4a28      	ldr	r2, [pc, #160]	@ (8002264 <HAL_MMC_InitCard+0x130>)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f9c3 	bl	8001558 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fcb4 	bl	8002b40 <MMC_PowerON>
 80021d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e02e      	b.n	8002256 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fba3 	bl	8002944 <MMC_InitCard>
 80021fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01b      	b.n	8002256 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002226:	4618      	mov	r0, r3
 8002228:	f007 fca0 	bl	8009b6c <SDMMC_CmdBlockLength>
 800222c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00f      	beq.n	8002254 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_MMC_InitCard+0x134>)
 800223a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	372c      	adds	r7, #44	@ 0x2c
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop
 8002260:	014f8b59 	.word	0x014f8b59
 8002264:	00012110 	.word	0x00012110
 8002268:	1fe00fff 	.word	0x1fe00fff

0800226c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	0f9b      	lsrs	r3, r3, #30
 8002280:	b2da      	uxtb	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	b2da      	uxtb	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	0e1b      	lsrs	r3, r3, #24
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d0:	0d1b      	lsrs	r3, r3, #20
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	0bdb      	lsrs	r3, r3, #15
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	0b9b      	lsrs	r3, r3, #14
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	0b1b      	lsrs	r3, r3, #12
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002338:	f107 010c 	add.w	r1, r7, #12
 800233c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8002340:	22d4      	movs	r2, #212	@ 0xd4
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fc4c 	bl	8002be0 <MMC_ReadExtCSD>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e129      	b.n	80025a6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d163      	bne.n	8002422 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	009a      	lsls	r2, r3, #2
 8002360:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800236a:	0f92      	lsrs	r2, r2, #30
 800236c:	431a      	orrs	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002376:	0edb      	lsrs	r3, r3, #27
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	b2da      	uxtb	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	0e1b      	lsrs	r3, r3, #24
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	b2da      	uxtb	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239a:	0d5b      	lsrs	r3, r3, #21
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ac:	0c9b      	lsrs	r3, r3, #18
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023be:	0bdb      	lsrs	r3, r3, #15
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7e1b      	ldrb	r3, [r3, #24]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	3302      	adds	r3, #2
 80023e2:	2201      	movs	r2, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ec:	fb03 f202 	mul.w	r2, r3, r2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7a1b      	ldrb	r3, [r3, #8]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800240e:	0a52      	lsrs	r2, r2, #9
 8002410:	fb03 f202 	mul.w	r2, r3, r2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002420:	e023      	b.n	800246a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10f      	bne.n	800244a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
 8002448:	e00f      	b.n	800246a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a58      	ldr	r2, [pc, #352]	@ (80025b0 <HAL_MMC_GetCardCSD+0x344>)
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002456:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e09d      	b.n	80025a6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246e:	0b9b      	lsrs	r3, r3, #14
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	09db      	lsrs	r3, r3, #7
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002488:	b2da      	uxtb	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002498:	b2da      	uxtb	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024a2:	0fdb      	lsrs	r3, r3, #31
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ae:	0f5b      	lsrs	r3, r3, #29
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d2:	0d9b      	lsrs	r3, r3, #22
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e4:	0d5b      	lsrs	r3, r3, #21
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002514:	0bdb      	lsrs	r3, r3, #15
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002528:	0b9b      	lsrs	r3, r3, #14
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800253c:	0b5b      	lsrs	r3, r3, #13
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002550:	0b1b      	lsrs	r3, r3, #12
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002564:	0a9b      	lsrs	r3, r3, #10
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002594:	b2da      	uxtb	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	1fe00fff 	.word	0x1fe00fff

080025b4 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	@ 0x38
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7fe ffbe 	bl	8001540 <HAL_GetTick>
 80025c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0de      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	f040 80d7 	bne.w	8002798 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 800260a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800260e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002610:	2390      	movs	r3, #144	@ 0x90
 8002612:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002614:	2302      	movs	r3, #2
 8002616:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f107 0210 	add.w	r2, r7, #16
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f007 fa72 	bl	8009b14 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800263e:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f007 fbbe 	bl	8009dc8 <SDMMC_CmdSendEXTCSD>
 800264c:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d045      	beq.n	80026e0 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800265a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e092      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002682:	2300      	movs	r3, #0
 8002684:	637b      	str	r3, [r7, #52]	@ 0x34
 8002686:	e00d      	b.n	80026a4 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f007 f9cb 	bl	8009a28 <SDMMC_ReadFIFO>
 8002692:	4602      	mov	r2, r0
 8002694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002696:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	3304      	adds	r3, #4
 800269c:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800269e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a0:	3301      	adds	r3, #1
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a6:	2b07      	cmp	r3, #7
 80026a8:	d9ee      	bls.n	8002688 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80026aa:	f7fe ff49 	bl	8001540 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d902      	bls.n	80026c0 <HAL_MMC_GetCardExtCSD+0x10c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	@ (80027a4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e05c      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0c2      	beq.n	8002674 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026fc:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00f      	beq.n	800272c <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a24      	ldr	r2, [pc, #144]	@ (80027a4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002718:	f043 0208 	orr.w	r2, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e036      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00f      	beq.n	800275a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e01f      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00f      	beq.n	8002788 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e008      	b.n	800279a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <HAL_MMC_GetCardExtCSD+0x1f4>)
 800278e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3738      	adds	r7, #56	@ 0x38
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	1fe00fff 	.word	0x1fe00fff
 80027a8:	18000f3a 	.word	0x18000f3a

080027ac <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b08c      	sub	sp, #48	@ 0x30
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d014      	beq.n	80027fa <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 80027de:	2204      	movs	r2, #4
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 faf0 	bl	8002dc8 <MMC_PwrClassUpdate>
 80027e8:	6238      	str	r0, [r7, #32]
 80027ea:	e00c      	b.n	8002806 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 80027ec:	2202      	movs	r2, #2
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fae9 	bl	8002dc8 <MMC_PwrClassUpdate>
 80027f6:	6238      	str	r0, [r7, #32]
 80027f8:	e005      	b.n	8002806 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80027fa:	2201      	movs	r2, #1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fae2 	bl	8002dc8 <MMC_PwrClassUpdate>
 8002804:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d17b      	bne.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002812:	d107      	bne.n	8002824 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4946      	ldr	r1, [pc, #280]	@ (8002934 <HAL_MMC_ConfigWideBusOperation+0x188>)
 800281a:	4618      	mov	r0, r3
 800281c:	f007 fab1 	bl	8009d82 <SDMMC_CmdSwitch>
 8002820:	6238      	str	r0, [r7, #32]
 8002822:	e019      	b.n	8002858 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800282a:	d107      	bne.n	800283c <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4941      	ldr	r1, [pc, #260]	@ (8002938 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8002832:	4618      	mov	r0, r3
 8002834:	f007 faa5 	bl	8009d82 <SDMMC_CmdSwitch>
 8002838:	6238      	str	r0, [r7, #32]
 800283a:	e00d      	b.n	8002858 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	493d      	ldr	r1, [pc, #244]	@ (800293c <HAL_MMC_ConfigWideBusOperation+0x190>)
 8002848:	4618      	mov	r0, r3
 800284a:	f007 fa9a 	bl	8009d82 <SDMMC_CmdSwitch>
 800284e:	6238      	str	r0, [r7, #32]
 8002850:	e002      	b.n	8002858 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8002852:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002856:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d152      	bne.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800285e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f007 fa43 	bl	8009cfc <SDMMC_CmdSendStatus>
 8002876:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d112      	bne.n	80028a4 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f007 f932 	bl	8009aee <SDMMC_GetResponse>
 800288a:	61f8      	str	r0, [r7, #28]
        count--;
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_MMC_ConfigWideBusOperation+0xfa>
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e0      	bne.n	8002864 <HAL_MMC_ConfigWideBusOperation+0xb8>
 80028a2:	e000      	b.n	80028a6 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 80028a4:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d025      	beq.n	80028f8 <HAL_MMC_ConfigWideBusOperation+0x14c>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d122      	bne.n	80028f8 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80028bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c0:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 80028c2:	e01f      	b.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f107 0408 	add.w	r4, r7, #8
 80028ca:	1d1d      	adds	r5, r3, #4
 80028cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	466a      	mov	r2, sp
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	4620      	mov	r0, r4
 80028f2:	f007 f86f 	bl	80099d4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80028f6:	e005      	b.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80028fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002902:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bdb0      	pop	{r4, r5, r7, pc}
 8002934:	03b70200 	.word	0x03b70200
 8002938:	03b70100 	.word	0x03b70100
 800293c:	03b70000 	.word	0x03b70000
 8002940:	1fe00fff 	.word	0x1fe00fff

08002944 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b096      	sub	sp, #88	@ 0x58
 8002948:	af02      	add	r7, sp, #8
 800294a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800294c:	2302      	movs	r3, #2
 800294e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f007 f884 	bl	8009a64 <SDMMC_GetPowerState>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002962:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002966:	e0e6      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f007 f961 	bl	8009c34 <SDMMC_CmdSendCID>
 8002972:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MMC_InitCard+0x3a>
  {
    return errorstate;
 800297a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800297c:	e0db      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f007 f8b2 	bl	8009aee <SDMMC_GetResponse>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2104      	movs	r1, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f007 f8a9 	bl	8009aee <SDMMC_GetResponse>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2108      	movs	r1, #8
 80029a8:	4618      	mov	r0, r3
 80029aa:	f007 f8a0 	bl	8009aee <SDMMC_GetResponse>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	210c      	movs	r1, #12
 80029ba:	4618      	mov	r0, r3
 80029bc:	f007 f897 	bl	8009aee <SDMMC_GetResponse>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f007 f96e 	bl	8009cb2 <SDMMC_CmdSetRelAddMmc>
 80029d6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80029d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MMC_InitCard+0x9e>
  {
    return errorstate;
 80029de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e0:	e0a9      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80029e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f007 f93b 	bl	8009c72 <SDMMC_CmdSendCSD>
 80029fc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80029fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8002a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a06:	e096      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f007 f86d 	bl	8009aee <SDMMC_GetResponse>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f007 f864 	bl	8009aee <SDMMC_GetResponse>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2108      	movs	r1, #8
 8002a32:	4618      	mov	r0, r3
 8002a34:	f007 f85b 	bl	8009aee <SDMMC_GetResponse>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	210c      	movs	r1, #12
 8002a44:	4618      	mov	r0, r3
 8002a46:	f007 f852 	bl	8009aee <SDMMC_GetResponse>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2104      	movs	r1, #4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f007 f849 	bl	8009aee <SDMMC_GetResponse>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0d1a      	lsrs	r2, r3, #20
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f007 f89e 	bl	8009bb2 <SDMMC_CmdSelDesel>
 8002a76:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a80:	e059      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fbef 	bl	800226c <HAL_MMC_GetCardCSD>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a98:	e04d      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f007 f928 	bl	8009cfc <SDMMC_CmdSendStatus>
 8002aac:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3378      	adds	r3, #120	@ 0x78
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fd72 	bl	80025b4 <HAL_MMC_GetCardExtCSD>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	e02c      	b.n	8002b36 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f007 f907 	bl	8009cfc <SDMMC_CmdSendStatus>
 8002aee:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f107 0408 	add.w	r4, r7, #8
 8002b08:	1d1d      	adds	r5, r3, #4
 8002b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0e:	682b      	ldr	r3, [r5, #0]
 8002b10:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	466a      	mov	r2, sp
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b24:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b28:	f107 0308 	add.w	r3, r7, #8
 8002b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f006 ff50 	bl	80099d4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3750      	adds	r7, #80	@ 0x50
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b40 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 f84d 	bl	8009bf8 <SDMMC_CmdGoIdleState>
 8002b5e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d027      	beq.n	8002bb6 <MMC_PowerON+0x76>
  {
    return errorstate;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	e034      	b.n	8002bd4 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8002b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b7c:	e02a      	b.n	8002bd4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4916      	ldr	r1, [pc, #88]	@ (8002bdc <MMC_PowerON+0x9c>)
 8002b84:	4618      	mov	r0, r3
 8002b86:	f007 f8dc 	bl	8009d42 <SDMMC_CmdOpCondition>
 8002b8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002b92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002b96:	e01d      	b.n	8002bd4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f006 ffa5 	bl	8009aee <SDMMC_GetResponse>
 8002ba4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	0fdb      	lsrs	r3, r3, #31
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <MMC_PowerON+0x72>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <MMC_PowerON+0x74>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0d6      	beq.n	8002b6a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	0e1b      	lsrs	r3, r3, #24
 8002bc0:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bc2:	d103      	bne.n	8002bcc <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bca:	e002      	b.n	8002bd2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	c0ff8000 	.word	0xc0ff8000

08002be0 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b090      	sub	sp, #64	@ 0x40
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7fe fca6 	bl	8001540 <HAL_GetTick>
 8002bf4:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8002c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c12:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002c14:	2390      	movs	r3, #144	@ 0x90
 8002c16:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f107 0214 	add.w	r2, r7, #20
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f006 ff70 	bl	8009b14 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f007 f8c4 	bl	8009dc8 <SDMMC_CmdSendEXTCSD>
 8002c40:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d04e      	beq.n	8002ce6 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8002dc0 <MMC_ReadExtCSD+0x1e0>)
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0a6      	b.n	8002db6 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01c      	beq.n	8002cb0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7a:	e013      	b.n	8002ca4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f006 fed1 	bl	8009a28 <SDMMC_ReadFIFO>
 8002c86:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8002c88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	0892      	lsrs	r2, r2, #2
 8002c92:	b292      	uxth	r2, r2
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d102      	bne.n	8002c9e <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9c:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d9e8      	bls.n	8002c7c <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	3308      	adds	r3, #8
 8002cae:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002cb0:	f7fe fc46 	bl	8001540 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <MMC_ReadExtCSD+0xe6>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3d      	ldr	r2, [pc, #244]	@ (8002dc0 <MMC_ReadExtCSD+0x1e0>)
 8002ccc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e067      	b.n	8002db6 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0b9      	beq.n	8002c68 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00f      	beq.n	8002d22 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <MMC_ReadExtCSD+0x1e0>)
 8002d08:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e049      	b.n	8002db6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00f      	beq.n	8002d50 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <MMC_ReadExtCSD+0x1e0>)
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00f      	beq.n	8002d7e <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <MMC_ReadExtCSD+0x1e0>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e01b      	b.n	8002db6 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f006 ffb6 	bl	8009cfc <SDMMC_CmdSendStatus>
 8002d90:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a06      	ldr	r2, [pc, #24]	@ (8002dc4 <MMC_ReadExtCSD+0x1e4>)
 8002daa:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3740      	adds	r7, #64	@ 0x40
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	1fe00fff 	.word	0x1fe00fff
 8002dc4:	18000f3a 	.word	0x18000f3a

08002dc8 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de2:	d004      	beq.n	8002dee <MMC_PwrClassUpdate+0x26>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dea:	f040 8088 	bne.w	8002efe <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002df2:	f107 0114 	add.w	r1, r7, #20
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	22bb      	movs	r2, #187	@ 0xbb
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff feef 	bl	8002be0 <MMC_ReadExtCSD>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e002      	b.n	8002e16 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	0e1b      	lsrs	r3, r3, #24
 8002e14:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d105      	bne.n	8002e28 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002e22:	0e1b      	lsrs	r3, r3, #24
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e00e      	b.n	8002e46 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d106      	bne.n	8002e3c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e004      	b.n	8002e46 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d158      	bne.n	8002efe <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e52:	d102      	bne.n	8002e5a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4053      	eors	r3, r2
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04a      	beq.n	8002efe <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e74:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8002e78:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f006 ff7f 	bl	8009d82 <SDMMC_CmdSwitch>
 8002e84:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d138      	bne.n	8002efe <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8002e8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f006 ff2c 	bl	8009cfc <SDMMC_CmdSendStatus>
 8002ea4:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d112      	bne.n	8002ed2 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f006 fe1b 	bl	8009aee <SDMMC_GetResponse>
 8002eb8:	6238      	str	r0, [r7, #32]
            count--;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <MMC_PwrClassUpdate+0x10c>
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e0      	bne.n	8002e92 <MMC_PwrClassUpdate+0xca>
 8002ed0:	e000      	b.n	8002ed4 <MMC_PwrClassUpdate+0x10c>
              break;
 8002ed2:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <MMC_PwrClassUpdate+0x12a>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8002eea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002eee:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8002ef0:	e005      	b.n	8002efe <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8002ef8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002efc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8002efe:	69fb      	ldr	r3, [r7, #28]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	@ 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7fe fb04 	bl	8001540 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e0a5      	b.n	8003092 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 809e 	bne.w	8003092 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fec6 	bl	8000ce8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002f5c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f912 	bl	800318a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_OSPI_Init+0x174>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68d1      	ldr	r1, [r2, #12]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6912      	ldr	r2, [r2, #16]
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0412      	lsls	r2, r2, #16
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6952      	ldr	r2, [r2, #20]
 8002f82:	3a01      	subs	r2, #1
 8002f84:	0212      	lsls	r2, r2, #8
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f8c:	4311      	orrs	r1, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69d2      	ldr	r2, [r2, #28]
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fcc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fdcd 	bl	8003b94 <OSPI_WaitFlagStateUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d146      	bne.n	8003092 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	1e5a      	subs	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800303a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0202 	orr.w	r2, r2, #2
 8003078:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003082:	d103      	bne.n	800308c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	651a      	str	r2, [r3, #80]	@ 0x50
 800308a:	e002      	b.n	8003092 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f8e0c0f4 	.word	0xf8e0c0f4

080030a0 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7fe fa48 	bl	8001540 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_OSPI_Abort+0x2c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d052      	beq.n	8003172 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d014      	beq.n	8003104 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0204 	bic.w	r2, r2, #4
 80030e8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fc12 	bl	8001918 <HAL_DMA_Abort>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02b      	beq.n	800316a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0202 	orr.w	r2, r2, #2
 8003120:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2201      	movs	r2, #1
 800312c:	2102      	movs	r1, #2
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fd30 	bl	8003b94 <OSPI_WaitFlagStateUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11f      	bne.n	800317e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2202      	movs	r2, #2
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2200      	movs	r2, #0
 8003150:	2120      	movs	r1, #32
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fd1e 	bl	8003b94 <OSPI_WaitFlagStateUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003168:	e009      	b.n	800317e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003170:	e005      	b.n	800317e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2210      	movs	r2, #16
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
 800317c:	e000      	b.n	8003180 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800317e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b094      	sub	sp, #80	@ 0x50
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9d      	ldr	r2, [pc, #628]	@ (800343c <HAL_OSPIM_Config+0x294>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d105      	bne.n	80031d6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80031d4:	e004      	b.n	80031e0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80031d6:	2301      	movs	r3, #1
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80031e6:	e01d      	b.n	8003224 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80031e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2d8      	uxtb	r0, r3
 80031f0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80031f4:	f107 0114 	add.w	r1, r7, #20
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	4619      	mov	r1, r3
 8003204:	f000 fd06 	bl	8003c14 <OSPIM_GetConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2208      	movs	r2, #8
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800321a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800321e:	3301      	adds	r3, #1
 8003220:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003224:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003228:	2b01      	cmp	r3, #1
 800322a:	d9dd      	bls.n	80031e8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800322c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 84a2 	bne.w	8003b7a <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003236:	4b81      	ldr	r3, [pc, #516]	@ (800343c <HAL_OSPIM_Config+0x294>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003242:	4b7e      	ldr	r3, [pc, #504]	@ (800343c <HAL_OSPIM_Config+0x294>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7d      	ldr	r2, [pc, #500]	@ (800343c <HAL_OSPIM_Config+0x294>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800324e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800325a:	4b79      	ldr	r3, [pc, #484]	@ (8003440 <HAL_OSPIM_Config+0x298>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003266:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <HAL_OSPIM_Config+0x298>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a75      	ldr	r2, [pc, #468]	@ (8003440 <HAL_OSPIM_Config+0x298>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003272:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800327e:	4971      	ldr	r1, [pc, #452]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 8003280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	3350      	adds	r3, #80	@ 0x50
 800328c:	443b      	add	r3, r7
 800328e:	3b34      	subs	r3, #52	@ 0x34
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3b01      	subs	r3, #1
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	486a      	ldr	r0, [pc, #424]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 800329c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	3350      	adds	r3, #80	@ 0x50
 80032a8:	443b      	add	r3, r7
 80032aa:	3b34      	subs	r3, #52	@ 0x34
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80032ba:	4b62      	ldr	r3, [pc, #392]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80c0 	beq.w	8003448 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80032c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80032d4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 8162 	bne.w	80035a2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80032de:	4959      	ldr	r1, [pc, #356]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80032e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3350      	adds	r3, #80	@ 0x50
 80032ee:	443b      	add	r3, r7
 80032f0:	3b3c      	subs	r3, #60	@ 0x3c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	4851      	ldr	r0, [pc, #324]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80032fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	3350      	adds	r3, #80	@ 0x50
 800330c:	443b      	add	r3, r7
 800330e:	3b3c      	subs	r3, #60	@ 0x3c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3b01      	subs	r3, #1
 8003314:	f041 0202 	orr.w	r2, r1, #2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4403      	add	r3, r0
 800331c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800331e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	3350      	adds	r3, #80	@ 0x50
 800332c:	443b      	add	r3, r7
 800332e:	3b38      	subs	r3, #56	@ 0x38
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01f      	beq.n	8003376 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003336:	4943      	ldr	r1, [pc, #268]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 8003338:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3350      	adds	r3, #80	@ 0x50
 8003346:	443b      	add	r3, r7
 8003348:	3b38      	subs	r3, #56	@ 0x38
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3b01      	subs	r3, #1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	483b      	ldr	r0, [pc, #236]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 8003356:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	3350      	adds	r3, #80	@ 0x50
 8003364:	443b      	add	r3, r7
 8003366:	3b38      	subs	r3, #56	@ 0x38
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3b01      	subs	r3, #1
 800336c:	f041 0220 	orr.w	r2, r1, #32
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4403      	add	r3, r0
 8003374:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003376:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	3350      	adds	r3, #80	@ 0x50
 8003384:	443b      	add	r3, r7
 8003386:	3b30      	subs	r3, #48	@ 0x30
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d023      	beq.n	80033d6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800338e:	492d      	ldr	r1, [pc, #180]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 8003390:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	3350      	adds	r3, #80	@ 0x50
 800339e:	443b      	add	r3, r7
 80033a0:	3b30      	subs	r3, #48	@ 0x30
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	4824      	ldr	r0, [pc, #144]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80033b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3350      	adds	r3, #80	@ 0x50
 80033c0:	443b      	add	r3, r7
 80033c2:	3b30      	subs	r3, #48	@ 0x30
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4403      	add	r3, r0
 80033d4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80033d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	3350      	adds	r3, #80	@ 0x50
 80033e4:	443b      	add	r3, r7
 80033e6:	3b2c      	subs	r3, #44	@ 0x2c
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80d9 	beq.w	80035a2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80033f0:	4914      	ldr	r1, [pc, #80]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 80033f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3350      	adds	r3, #80	@ 0x50
 8003400:	443b      	add	r3, r7
 8003402:	3b2c      	subs	r3, #44	@ 0x2c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	480c      	ldr	r0, [pc, #48]	@ (8003444 <HAL_OSPIM_Config+0x29c>)
 8003414:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	3350      	adds	r3, #80	@ 0x50
 8003422:	443b      	add	r3, r7
 8003424:	3b2c      	subs	r3, #44	@ 0x2c
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3b01      	subs	r3, #1
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e0b3      	b.n	80035a2 <HAL_OSPIM_Config+0x3fa>
 800343a:	bf00      	nop
 800343c:	420d1400 	.word	0x420d1400
 8003440:	420d2400 	.word	0x420d2400
 8003444:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	3350      	adds	r3, #80	@ 0x50
 8003454:	443b      	add	r3, r7
 8003456:	3b3c      	subs	r3, #60	@ 0x3c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a1 	beq.w	80035a2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003460:	4995      	ldr	r1, [pc, #596]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 8003462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	3350      	adds	r3, #80	@ 0x50
 800346e:	443b      	add	r3, r7
 8003470:	3b3c      	subs	r3, #60	@ 0x3c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3b01      	subs	r3, #1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	488e      	ldr	r0, [pc, #568]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 800347e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	3350      	adds	r3, #80	@ 0x50
 800348a:	443b      	add	r3, r7
 800348c:	3b3c      	subs	r3, #60	@ 0x3c
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3b01      	subs	r3, #1
 8003492:	f021 0201 	bic.w	r2, r1, #1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4403      	add	r3, r0
 800349a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800349c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	3350      	adds	r3, #80	@ 0x50
 80034a8:	443b      	add	r3, r7
 80034aa:	3b38      	subs	r3, #56	@ 0x38
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01d      	beq.n	80034ee <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80034b2:	4981      	ldr	r1, [pc, #516]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 80034b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	3350      	adds	r3, #80	@ 0x50
 80034c0:	443b      	add	r3, r7
 80034c2:	3b38      	subs	r3, #56	@ 0x38
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	487a      	ldr	r0, [pc, #488]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 80034d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	3350      	adds	r3, #80	@ 0x50
 80034dc:	443b      	add	r3, r7
 80034de:	3b38      	subs	r3, #56	@ 0x38
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	f021 0210 	bic.w	r2, r1, #16
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4403      	add	r3, r0
 80034ec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80034ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	3350      	adds	r3, #80	@ 0x50
 80034fa:	443b      	add	r3, r7
 80034fc:	3b30      	subs	r3, #48	@ 0x30
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d021      	beq.n	8003548 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003504:	496c      	ldr	r1, [pc, #432]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 8003506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	3350      	adds	r3, #80	@ 0x50
 8003512:	443b      	add	r3, r7
 8003514:	3b30      	subs	r3, #48	@ 0x30
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	4864      	ldr	r0, [pc, #400]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 8003526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	3350      	adds	r3, #80	@ 0x50
 8003532:	443b      	add	r3, r7
 8003534:	3b30      	subs	r3, #48	@ 0x30
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3b01      	subs	r3, #1
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	3350      	adds	r3, #80	@ 0x50
 8003554:	443b      	add	r3, r7
 8003556:	3b2c      	subs	r3, #44	@ 0x2c
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d021      	beq.n	80035a2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800355e:	4956      	ldr	r1, [pc, #344]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 8003560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	3350      	adds	r3, #80	@ 0x50
 800356c:	443b      	add	r3, r7
 800356e:	3b2c      	subs	r3, #44	@ 0x2c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	484e      	ldr	r0, [pc, #312]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 8003580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	3350      	adds	r3, #80	@ 0x50
 800358c:	443b      	add	r3, r7
 800358e:	3b2c      	subs	r3, #44	@ 0x2c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	3350      	adds	r3, #80	@ 0x50
 80035b4:	443b      	add	r3, r7
 80035b6:	3b3c      	subs	r3, #60	@ 0x3c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4299      	cmp	r1, r3
 80035bc:	d03c      	beq.n	8003638 <HAL_OSPIM_Config+0x490>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6899      	ldr	r1, [r3, #8]
 80035c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	3350      	adds	r3, #80	@ 0x50
 80035d0:	443b      	add	r3, r7
 80035d2:	3b34      	subs	r3, #52	@ 0x34
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4299      	cmp	r1, r3
 80035d8:	d02e      	beq.n	8003638 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	3350      	adds	r3, #80	@ 0x50
 80035ec:	443b      	add	r3, r7
 80035ee:	3b38      	subs	r3, #56	@ 0x38
 80035f0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80035f2:	4299      	cmp	r1, r3
 80035f4:	d103      	bne.n	80035fe <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11c      	bne.n	8003638 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68d9      	ldr	r1, [r3, #12]
 8003602:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3350      	adds	r3, #80	@ 0x50
 8003610:	443b      	add	r3, r7
 8003612:	3b30      	subs	r3, #48	@ 0x30
 8003614:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003616:	4299      	cmp	r1, r3
 8003618:	d00e      	beq.n	8003638 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	3350      	adds	r3, #80	@ 0x50
 800362c:	443b      	add	r3, r7
 800362e:	3b2c      	subs	r3, #44	@ 0x2c
 8003630:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003632:	4299      	cmp	r1, r3
 8003634:	f040 810e 	bne.w	8003854 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	3350      	adds	r3, #80	@ 0x50
 800364a:	443b      	add	r3, r7
 800364c:	3b3c      	subs	r3, #60	@ 0x3c
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4299      	cmp	r1, r3
 8003652:	d133      	bne.n	80036bc <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3350      	adds	r3, #80	@ 0x50
 8003666:	443b      	add	r3, r7
 8003668:	3b38      	subs	r3, #56	@ 0x38
 800366a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800366c:	4299      	cmp	r1, r3
 800366e:	d125      	bne.n	80036bc <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	68d9      	ldr	r1, [r3, #12]
 8003674:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	3350      	adds	r3, #80	@ 0x50
 8003682:	443b      	add	r3, r7
 8003684:	3b30      	subs	r3, #48	@ 0x30
 8003686:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003688:	4299      	cmp	r1, r3
 800368a:	d117      	bne.n	80036bc <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6919      	ldr	r1, [r3, #16]
 8003690:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	3350      	adds	r3, #80	@ 0x50
 800369e:	443b      	add	r3, r7
 80036a0:	3b2c      	subs	r3, #44	@ 0x2c
 80036a2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80036a4:	4299      	cmp	r1, r3
 80036a6:	d109      	bne.n	80036bc <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a02      	ldr	r2, [pc, #8]	@ (80036b8 <HAL_OSPIM_Config+0x510>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e0ce      	b.n	8003854 <HAL_OSPIM_Config+0x6ac>
 80036b6:	bf00      	nop
 80036b8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80036bc:	49a4      	ldr	r1, [pc, #656]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80036be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	3350      	adds	r3, #80	@ 0x50
 80036cc:	443b      	add	r3, r7
 80036ce:	3b3c      	subs	r3, #60	@ 0x3c
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	489d      	ldr	r0, [pc, #628]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80036dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	3350      	adds	r3, #80	@ 0x50
 80036ea:	443b      	add	r3, r7
 80036ec:	3b3c      	subs	r3, #60	@ 0x3c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	f021 0201 	bic.w	r2, r1, #1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4403      	add	r3, r0
 80036fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80036fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	3350      	adds	r3, #80	@ 0x50
 800370a:	443b      	add	r3, r7
 800370c:	3b38      	subs	r3, #56	@ 0x38
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01f      	beq.n	8003754 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003714:	498e      	ldr	r1, [pc, #568]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003716:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	3350      	adds	r3, #80	@ 0x50
 8003724:	443b      	add	r3, r7
 8003726:	3b38      	subs	r3, #56	@ 0x38
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	4887      	ldr	r0, [pc, #540]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003734:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3350      	adds	r3, #80	@ 0x50
 8003742:	443b      	add	r3, r7
 8003744:	3b38      	subs	r3, #56	@ 0x38
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	f021 0210 	bic.w	r2, r1, #16
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4403      	add	r3, r0
 8003752:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003754:	497e      	ldr	r1, [pc, #504]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003756:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	3350      	adds	r3, #80	@ 0x50
 8003764:	443b      	add	r3, r7
 8003766:	3b34      	subs	r3, #52	@ 0x34
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	4877      	ldr	r0, [pc, #476]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003774:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3350      	adds	r3, #80	@ 0x50
 8003782:	443b      	add	r3, r7
 8003784:	3b34      	subs	r3, #52	@ 0x34
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4403      	add	r3, r0
 8003792:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003794:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3350      	adds	r3, #80	@ 0x50
 80037a2:	443b      	add	r3, r7
 80037a4:	3b30      	subs	r3, #48	@ 0x30
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037ac:	4968      	ldr	r1, [pc, #416]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80037ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	3350      	adds	r3, #80	@ 0x50
 80037bc:	443b      	add	r3, r7
 80037be:	3b30      	subs	r3, #48	@ 0x30
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	4860      	ldr	r0, [pc, #384]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80037d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3350      	adds	r3, #80	@ 0x50
 80037de:	443b      	add	r3, r7
 80037e0:	3b30      	subs	r3, #48	@ 0x30
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3350      	adds	r3, #80	@ 0x50
 8003802:	443b      	add	r3, r7
 8003804:	3b2c      	subs	r3, #44	@ 0x2c
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800380c:	4950      	ldr	r1, [pc, #320]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 800380e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	3350      	adds	r3, #80	@ 0x50
 800381c:	443b      	add	r3, r7
 800381e:	3b2c      	subs	r3, #44	@ 0x2c
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3b01      	subs	r3, #1
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	4848      	ldr	r0, [pc, #288]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003830:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	3350      	adds	r3, #80	@ 0x50
 800383e:	443b      	add	r3, r7
 8003840:	3b2c      	subs	r3, #44	@ 0x2c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003854:	4a3e      	ldr	r2, [pc, #248]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	431a      	orrs	r2, r3
 800386c:	4938      	ldr	r1, [pc, #224]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	3b01      	subs	r3, #1
 8003874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d018      	beq.n	80038b8 <HAL_OSPIM_Config+0x710>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388e:	d813      	bhi.n	80038b8 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	b2db      	uxtb	r3, r3
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90a      	bls.n	80038b8 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80038a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	4927      	ldr	r1, [pc, #156]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 809a 	beq.w	80039fa <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80038c6:	4a22      	ldr	r2, [pc, #136]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 0203 	bic.w	r2, r3, #3
 80038d8:	491d      	ldr	r1, [pc, #116]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80038f2:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003904:	4912      	ldr	r1, [pc, #72]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f042 0210 	orr.w	r2, r2, #16
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003922:	4a0b      	ldr	r2, [pc, #44]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	3b01      	subs	r3, #1
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003938:	4905      	ldr	r1, [pc, #20]	@ (8003950 <HAL_OSPIM_Config+0x7a8>)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e01b      	b.n	8003988 <HAL_OSPIM_Config+0x7e0>
 8003950:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800395c:	4a8a      	ldr	r2, [pc, #552]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003972:	4985      	ldr	r1, [pc, #532]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	3b01      	subs	r3, #1
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d016      	beq.n	80039c2 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003994:	4a7c      	ldr	r2, [pc, #496]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	3b01      	subs	r3, #1
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80039aa:	4977      	ldr	r1, [pc, #476]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	e0c3      	b.n	8003b4a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80bf 	beq.w	8003b4a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80039e2:	4969      	ldr	r1, [pc, #420]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e0a7      	b.n	8003b4a <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80039fa:	4a63      	ldr	r2, [pc, #396]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 0203 	bic.w	r2, r3, #3
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	495d      	ldr	r1, [pc, #372]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d014      	beq.n	8003a56 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a2c:	4a56      	ldr	r2, [pc, #344]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a40:	015b      	lsls	r3, r3, #5
 8003a42:	431a      	orrs	r2, r3
 8003a44:	4950      	ldr	r1, [pc, #320]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f042 0210 	orr.w	r2, r2, #16
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d019      	beq.n	8003a96 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a62:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7a:	049b      	lsls	r3, r3, #18
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	4942      	ldr	r1, [pc, #264]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	e01c      	b.n	8003ad0 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab6:	069b      	lsls	r3, r3, #26
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	4933      	ldr	r1, [pc, #204]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d019      	beq.n	8003b10 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003adc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af4:	049b      	lsls	r3, r3, #18
 8003af6:	431a      	orrs	r2, r3
 8003af8:	4923      	ldr	r1, [pc, #140]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	e01c      	b.n	8003b4a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d018      	beq.n	8003b4a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b18:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	069b      	lsls	r3, r3, #26
 8003b32:	431a      	orrs	r2, r3
 8003b34:	4914      	ldr	r1, [pc, #80]	@ (8003b88 <HAL_OSPIM_Config+0x9e0>)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003b4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <HAL_OSPIM_Config+0x9e4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <HAL_OSPIM_Config+0x9e4>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003b62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <HAL_OSPIM_Config+0x9e8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a07      	ldr	r2, [pc, #28]	@ (8003b90 <HAL_OSPIM_Config+0x9e8>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003b7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3750      	adds	r7, #80	@ 0x50
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	420c4000 	.word	0x420c4000
 8003b8c:	420d1400 	.word	0x420d1400
 8003b90:	420d2400 	.word	0x420d2400

08003b94 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ba4:	e022      	b.n	8003bec <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01e      	beq.n	8003bec <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fd fcc7 	bl	8001540 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	401a      	ands	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d00b      	beq.n	8003bec <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bda:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e00e      	b.n	8003c0a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1ce      	bne.n	8003ba6 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <OSPIM_GetConfig+0x26>
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d802      	bhi.n	8003c3a <OSPIM_GetConfig+0x26>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
 8003c3e:	e098      	b.n	8003d72 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d10b      	bne.n	8003c7c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003c64:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <OSPIM_GetConfig+0x16c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003c70:	4b44      	ldr	r3, [pc, #272]	@ (8003d84 <OSPIM_GetConfig+0x170>)
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e002      	b.n	8003c7c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003c76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c7a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e074      	b.n	8003d6c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003c82:	4a3f      	ldr	r2, [pc, #252]	@ (8003d80 <OSPIM_GetConfig+0x16c>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4053      	eors	r3, r2
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4053      	eors	r3, r2
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4053      	eors	r3, r2
 8003cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d018      	beq.n	8003d2a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4053      	eors	r3, r2
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d111      	bne.n	8003d2a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e005      	b.n	8003d2a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d018      	beq.n	8003d66 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4053      	eors	r3, r2
 8003d3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d111      	bne.n	8003d66 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	611a      	str	r2, [r3, #16]
 8003d58:	e005      	b.n	8003d66 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d987      	bls.n	8003c82 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	420c4000 	.word	0x420c4000
 8003d84:	04040222 	.word	0x04040222

08003d88 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0202 	orr.w	r2, r2, #2
 8003da4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2208      	movs	r2, #8
 8003daa:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a15      	ldr	r2, [pc, #84]	@ (8003e08 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d109      	bne.n	8003dca <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003db6:	4815      	ldr	r0, [pc, #84]	@ (8003e0c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003db8:	f7ff f8a6 	bl	8002f08 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	4813      	ldr	r0, [pc, #76]	@ (8003e0c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003dc0:	f005 fde9 	bl	8009996 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	e00d      	b.n	8003de6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003dd4:	480f      	ldr	r0, [pc, #60]	@ (8003e14 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003dd6:	f7ff f897 	bl	8002f08 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	480d      	ldr	r0, [pc, #52]	@ (8003e14 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003dde:	f005 fdda 	bl	8009996 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff f95a 	bl	80030a0 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0202 	bic.w	r2, r2, #2
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	420d1400 	.word	0x420d1400
 8003e0c:	420cf000 	.word	0x420cf000
 8003e10:	420d2400 	.word	0x420d2400
 8003e14:	420cf400 	.word	0x420cf400

08003e18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0fe      	b.n	8004028 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd f946 	bl	80010d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2203      	movs	r2, #3
 8003e48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f006 fa59 	bl	800a308 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7c1a      	ldrb	r2, [r3, #16]
 8003e5e:	f88d 2000 	strb.w	r2, [sp]
 8003e62:	3304      	adds	r3, #4
 8003e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e66:	f006 f97d 	bl	800a164 <USB_CoreInit>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d5      	b.n	8004028 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f006 fa51 	bl	800a32a <USB_SetCurrentMode>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0c6      	b.n	8004028 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e04a      	b.n	8003f36 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	3315      	adds	r3, #21
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	b298      	uxth	r0, r3
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	332e      	adds	r3, #46	@ 0x2e
 8003edc:	4602      	mov	r2, r0
 8003ede:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3318      	adds	r3, #24
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	331c      	adds	r3, #28
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3320      	adds	r3, #32
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	3324      	adds	r3, #36	@ 0x24
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	3301      	adds	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3af      	bcc.n	8003ea0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e044      	b.n	8003fd0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	791b      	ldrb	r3, [r3, #4]
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d3b5      	bcc.n	8003f46 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7c1a      	ldrb	r2, [r3, #16]
 8003fe2:	f88d 2000 	strb.w	r2, [sp]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fea:	f006 f9eb 	bl	800a3c4 <USB_DevInit>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e013      	b.n	8004028 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7b1b      	ldrb	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 ff3a 	bl	8004e90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f006 fd1d 	bl	800aa60 <USB_DevDisconnect>

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b08d      	sub	sp, #52	@ 0x34
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f006 fdbe 	bl	800abc8 <USB_GetMode>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 84b9 	bne.w	80049c6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f006 fd22 	bl	800aaa2 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 84af 	beq.w	80049c4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f006 fd0f 	bl	800aaa2 <USB_ReadInterrupts>
 8004084:	4603      	mov	r3, r0
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d107      	bne.n	800409e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 0202 	and.w	r2, r2, #2
 800409c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f006 fcfd 	bl	800aaa2 <USB_ReadInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d161      	bne.n	8004176 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0210 	bic.w	r2, r2, #16
 80040c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80040e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ec:	d124      	bne.n	8004138 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d035      	beq.n	8004166 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	6a38      	ldr	r0, [r7, #32]
 800410e:	f006 fc4f 	bl	800a9b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411e:	441a      	add	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004130:	441a      	add	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	615a      	str	r2, [r3, #20]
 8004136:	e016      	b.n	8004166 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800413e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004142:	d110      	bne.n	8004166 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800414a:	2208      	movs	r2, #8
 800414c:	4619      	mov	r1, r3
 800414e:	6a38      	ldr	r0, [r7, #32]
 8004150:	f006 fc2e 	bl	800a9b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004160:	441a      	add	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0210 	orr.w	r2, r2, #16
 8004174:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f006 fc91 	bl	800aaa2 <USB_ReadInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004186:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800418a:	f040 80a7 	bne.w	80042dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f006 fc96 	bl	800aac8 <USB_ReadDevAllOutEpInterrupt>
 800419c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800419e:	e099      	b.n	80042d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 808e 	beq.w	80042c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f006 fcba 	bl	800ab30 <USB_ReadDevOutEPInterrupt>
 80041bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	2301      	movs	r3, #1
 80041d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fd29 	bl	8004c34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	2308      	movs	r3, #8
 80041fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fdff 	bl	8004e04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	2310      	movs	r3, #16
 8004220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d030      	beq.n	800428e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004234:	2b80      	cmp	r3, #128	@ 0x80
 8004236:	d109      	bne.n	800424c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800424a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	3304      	adds	r3, #4
 8004260:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	78db      	ldrb	r3, [r3, #3]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d108      	bne.n	800427c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	b2db      	uxtb	r3, r3
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fbf2 	bl	8004a60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004288:	461a      	mov	r2, r3
 800428a:	2302      	movs	r3, #2
 800428c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	461a      	mov	r2, r3
 80042a6:	2320      	movs	r3, #32
 80042a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c0:	461a      	mov	r2, r3
 80042c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	3301      	adds	r3, #1
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f47f af62 	bne.w	80041a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f006 fbde 	bl	800aaa2 <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042f0:	f040 80db 	bne.w	80044aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f006 fbff 	bl	800aafc <USB_ReadDevAllInEpInterrupt>
 80042fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004304:	e0cd      	b.n	80044a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80c2 	beq.w	8004496 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f006 fc25 	bl	800ab6c <USB_ReadDevInEPInterrupt>
 8004322:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d057      	beq.n	80043de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	2201      	movs	r2, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	69f9      	ldr	r1, [r7, #28]
 800434a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800434e:	4013      	ands	r3, r2
 8004350:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435e:	461a      	mov	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	799b      	ldrb	r3, [r3, #6]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d132      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	3320      	adds	r3, #32
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4403      	add	r3, r0
 800438c:	331c      	adds	r3, #28
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4419      	add	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4403      	add	r3, r0
 80043a0:	3320      	adds	r3, #32
 80043a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d113      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x3a2>
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3324      	adds	r3, #36	@ 0x24
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d108      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043ca:	461a      	mov	r2, r3
 80043cc:	2101      	movs	r1, #1
 80043ce:	f006 fc2d 	bl	800ac2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb03 	bl	80049e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	2308      	movs	r3, #8
 80043f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	461a      	mov	r2, r3
 8004412:	2310      	movs	r3, #16
 8004414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442c:	461a      	mov	r2, r3
 800442e:	2340      	movs	r3, #64	@ 0x40
 8004430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d023      	beq.n	8004484 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800443c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800443e:	6a38      	ldr	r0, [r7, #32]
 8004440:	f006 f930 	bl	800a6a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	3310      	adds	r3, #16
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	78db      	ldrb	r3, [r3, #3]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d108      	bne.n	8004472 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb03 	bl	8004a78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	2302      	movs	r3, #2
 8004482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800448e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb42 	bl	8004b1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80044a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f47f af2e 	bne.w	8004306 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f006 faf7 	bl	800aaa2 <USB_ReadInterrupts>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044be:	d122      	bne.n	8004506 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d108      	bne.n	80044f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fcf5 	bl	8004ed8 <HAL_PCDEx_LPM_Callback>
 80044ee:	e002      	b.n	80044f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 faab 	bl	8004a4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fac9 	bl	800aaa2 <USB_ReadInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451a:	d112      	bne.n	8004542 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa83 	bl	8004a38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f006 faab 	bl	800aaa2 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004552:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004556:	d121      	bne.n	800459c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004566:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800456e:	2b00      	cmp	r3, #0
 8004570:	d111      	bne.n	8004596 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800458c:	2101      	movs	r1, #1
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fca2 	bl	8004ed8 <HAL_PCDEx_LPM_Callback>
 8004594:	e002      	b.n	800459c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa4e 	bl	8004a38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f006 fa7e 	bl	800aaa2 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b0:	f040 80b7 	bne.w	8004722 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2110      	movs	r1, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f006 f868 	bl	800a6a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d8:	e046      	b.n	8004668 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004608:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800460c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800460e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004620:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004640:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800465c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004660:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	3301      	adds	r3, #1
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	461a      	mov	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	4293      	cmp	r3, r2
 8004672:	d3b2      	bcc.n	80045da <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004682:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004686:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7bdb      	ldrb	r3, [r3, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a0:	f043 030b 	orr.w	r3, r3, #11
 80046a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046b6:	f043 030b 	orr.w	r3, r3, #11
 80046ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80046bc:	e015      	b.n	80046ea <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046d0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80046d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046e4:	f043 030b 	orr.w	r3, r3, #11
 80046e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80046fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800470c:	461a      	mov	r2, r3
 800470e:	f006 fa8d 	bl	800ac2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f006 f9bb 	bl	800aaa2 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004736:	d123      	bne.n	8004780 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f006 fa51 	bl	800abe4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f006 f825 	bl	800a796 <USB_GetDevSpeed>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681c      	ldr	r4, [r3, #0]
 8004758:	f001 feb4 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 800475c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004762:	461a      	mov	r2, r3
 8004764:	4620      	mov	r0, r4
 8004766:	f005 fd2d 	bl	800a1c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f95a 	bl	8004a24 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800477e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f006 f98c 	bl	800aaa2 <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d10a      	bne.n	80047aa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f93b 	bl	8004a10 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f002 0208 	and.w	r2, r2, #8
 80047a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f006 f977 	bl	800aaa2 <USB_ReadInterrupts>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ba:	2b80      	cmp	r3, #128	@ 0x80
 80047bc:	d123      	bne.n	8004806 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	e014      	b.n	80047fa <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f962 	bl	8004ab8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	791b      	ldrb	r3, [r3, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	4293      	cmp	r3, r2
 8004804:	d3e4      	bcc.n	80047d0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f006 f949 	bl	800aaa2 <USB_ReadInterrupts>
 8004810:	4603      	mov	r3, r0
 8004812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d13c      	bne.n	8004896 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481c:	2301      	movs	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	e02b      	b.n	800487a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3318      	adds	r3, #24
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d115      	bne.n	8004874 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004848:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	da12      	bge.n	8004874 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3317      	adds	r3, #23
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f922 	bl	8004ab8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	3301      	adds	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	791b      	ldrb	r3, [r3, #4]
 800487e:	461a      	mov	r2, r3
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	4293      	cmp	r3, r2
 8004884:	d3cd      	bcc.n	8004822 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f006 f901 	bl	800aaa2 <USB_ReadInterrupts>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048aa:	d156      	bne.n	800495a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b0:	e045      	b.n	800493e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d12e      	bne.n	8004938 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da2b      	bge.n	8004938 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	0c1a      	lsrs	r2, r3, #16
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80048ea:	4053      	eors	r3, r2
 80048ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d121      	bne.n	8004938 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004934:	6053      	str	r3, [r2, #4]
            break;
 8004936:	e008      	b.n	800494a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	3301      	adds	r3, #1
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	791b      	ldrb	r3, [r3, #4]
 8004942:	461a      	mov	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	4293      	cmp	r3, r2
 8004948:	d3b3      	bcc.n	80048b2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f006 f89f 	bl	800aaa2 <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496e:	d10a      	bne.n	8004986 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f88d 	bl	8004a90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f006 f889 	bl	800aaa2 <USB_ReadInterrupts>
 8004990:	4603      	mov	r3, r0
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d115      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f879 	bl	8004aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e000      	b.n	80049c6 <HAL_PCD_IRQHandler+0x996>
      return;
 80049c4:	bf00      	nop
    }
  }
}
 80049c6:	3734      	adds	r7, #52	@ 0x34
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da0c      	bge.n	8004ae6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 020f 	and.w	r2, r3, #15
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	3310      	adds	r3, #16
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e00c      	b.n	8004b00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f005 fe6a 	bl	800a7e0 <USB_EPStopXfer>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b10:	7afb      	ldrb	r3, [r7, #11]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b08a      	sub	sp, #40	@ 0x28
 8004b1e:	af02      	add	r7, sp, #8
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	3310      	adds	r3, #16
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d901      	bls.n	8004b52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06b      	b.n	8004c2a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3303      	adds	r3, #3
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b76:	e02a      	b.n	8004bce <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d902      	bls.n	8004b94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	3303      	adds	r3, #3
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	f005 febf 	bl	800a934 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d809      	bhi.n	8004bf8 <PCD_WriteEmptyTxFifo+0xde>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d203      	bcs.n	8004bf8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1bf      	bne.n	8004b78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d811      	bhi.n	8004c28 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	6939      	ldr	r1, [r7, #16]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	333c      	adds	r3, #60	@ 0x3c
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	799b      	ldrb	r3, [r3, #6]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d17b      	bne.n	8004d62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4a61      	ldr	r2, [pc, #388]	@ (8004dfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	f240 80b9 	bls.w	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80b3 	beq.w	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9c:	6093      	str	r3, [r2, #8]
 8004c9e:	e0a7      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2320      	movs	r3, #32
 8004cba:	6093      	str	r3, [r2, #8]
 8004cbc:	e098      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 8093 	bne.w	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8004dfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d90f      	bls.n	8004cf2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cee:	6093      	str	r3, [r2, #8]
 8004cf0:	e07e      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	3304      	adds	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	0159      	lsls	r1, r3, #5
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d114      	bne.n	8004d54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2101      	movs	r1, #1
 8004d40:	f005 ff74 	bl	800ac2c <USB_EP0_OutStart>
 8004d44:	e006      	b.n	8004d54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fe36 	bl	80049cc <HAL_PCD_DataOutStageCallback>
 8004d60:	e046      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a26      	ldr	r2, [pc, #152]	@ (8004e00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d124      	bne.n	8004db4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d86:	6093      	str	r3, [r2, #8]
 8004d88:	e032      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2320      	movs	r3, #32
 8004da4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fe0d 	bl	80049cc <HAL_PCD_DataOutStageCallback>
 8004db2:	e01d      	b.n	8004df0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d114      	bne.n	8004de4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2100      	movs	r1, #0
 8004de0:	f005 ff24 	bl	800ac2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fdee 	bl	80049cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	4f54300a 	.word	0x4f54300a
 8004e00:	4f54310a 	.word	0x4f54310a

08004e04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	333c      	adds	r3, #60	@ 0x3c
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <PCD_EP_OutSetupPacket_int+0x88>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d90e      	bls.n	8004e58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fdcf 	bl	80049fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <PCD_EP_OutSetupPacket_int+0x88>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d90c      	bls.n	8004e80 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	799b      	ldrb	r3, [r3, #6]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d108      	bne.n	8004e80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	f005 fed6 	bl	800ac2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	4f54300a 	.word	0x4f54300a

08004e90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	f043 0303 	orr.w	r3, r3, #3
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004ef8:	4b39      	ldr	r3, [pc, #228]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f00:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10b      	bne.n	8004f22 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f10:	d905      	bls.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004f12:	4b33      	ldr	r3, [pc, #204]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4a32      	ldr	r2, [pc, #200]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f1c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e057      	b.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f28:	d90a      	bls.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f3c:	60d3      	str	r3, [r2, #12]
 8004f3e:	e007      	b.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004f40:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004f48:	4925      	ldr	r1, [pc, #148]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f50:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	2232      	movs	r2, #50	@ 0x32
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f6e:	e002      	b.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f76:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f3      	bne.n	8004f70 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01b      	beq.n	8004fc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f8e:	4b15      	ldr	r3, [pc, #84]	@ (8004fe4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	2232      	movs	r2, #50	@ 0x32
 8004f9c:	fb02 f303 	mul.w	r3, r2, r3
 8004fa0:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004fac:	e002      	b.n	8004fb4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f3      	bne.n	8004fae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e000      	b.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	46020800 	.word	0x46020800
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	10624dd3 	.word	0x10624dd3

08004fec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	46020800 	.word	0x46020800

08005008 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005010:	4b22      	ldr	r3, [pc, #136]	@ (800509c <HAL_PWREx_ConfigSupply+0x94>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	@ (80050a0 <HAL_PWREx_ConfigSupply+0x98>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	2232      	movs	r2, #50	@ 0x32
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <HAL_PWREx_ConfigSupply+0x98>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	099b      	lsrs	r3, r3, #6
 800502a:	3301      	adds	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4a1a      	ldr	r2, [pc, #104]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800503a:	f023 0302 	bic.w	r3, r3, #2
 800503e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005040:	e002      	b.n	8005048 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3b01      	subs	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005048:	4b16      	ldr	r3, [pc, #88]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d116      	bne.n	8005082 <HAL_PWREx_ConfigSupply+0x7a>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f3      	bne.n	8005042 <HAL_PWREx_ConfigSupply+0x3a>
 800505a:	e012      	b.n	8005082 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800505c:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a10      	ldr	r2, [pc, #64]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005068:	e002      	b.n	8005070 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b01      	subs	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005070:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <HAL_PWREx_ConfigSupply+0x7a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f3      	bne.n	800506a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e000      	b.n	800508e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000000 	.word	0x20000000
 80050a0:	10624dd3 	.word	0x10624dd3
 80050a4:	46020800 	.word	0x46020800

080050a8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80050ac:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	4a04      	ldr	r2, [pc, #16]	@ (80050c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	6113      	str	r3, [r2, #16]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	46020800 	.word	0x46020800

080050c8 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80050ce:	f7ff ff8d 	bl	8004fec <HAL_PWREx_GetVoltageRange>
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050da:	d003      	beq.n	80050e4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e2:	d107      	bne.n	80050f4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a05      	ldr	r2, [pc, #20]	@ (8005100 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80050ea:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80050ee:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	46020800 	.word	0x46020800

08005104 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	4a04      	ldr	r2, [pc, #16]	@ (8005120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	46020800 	.word	0x46020800

08005124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08e      	sub	sp, #56	@ 0x38
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f000 bec8 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4b99      	ldr	r3, [pc, #612]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005148:	4b96      	ldr	r3, [pc, #600]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 816c 	beq.w	8005438 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_RCC_OscConfig+0x52>
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	2b0c      	cmp	r3, #12
 800516a:	f040 80de 	bne.w	800532a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 80da 	bne.w	800532a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f000 bea5 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005188:	4b86      	ldr	r3, [pc, #536]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_RCC_OscConfig+0x7a>
 8005194:	4b83      	ldr	r3, [pc, #524]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800519c:	e005      	b.n	80051aa <HAL_RCC_OscConfig+0x86>
 800519e:	4b81      	ldr	r3, [pc, #516]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d255      	bcs.n	800525a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 f9d9 	bl	8006570 <RCC_SetFlashLatencyFromMSIRange>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f000 be82 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80051ca:	4b76      	ldr	r3, [pc, #472]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4a75      	ldr	r2, [pc, #468]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051d4:	6093      	str	r3, [r2, #8]
 80051d6:	4b73      	ldr	r3, [pc, #460]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	4970      	ldr	r1, [pc, #448]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80051f0:	d309      	bcc.n	8005206 <HAL_RCC_OscConfig+0xe2>
 80051f2:	4b6c      	ldr	r3, [pc, #432]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f023 021f 	bic.w	r2, r3, #31
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4969      	ldr	r1, [pc, #420]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
 8005204:	e07e      	b.n	8005304 <HAL_RCC_OscConfig+0x1e0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	da0a      	bge.n	8005224 <HAL_RCC_OscConfig+0x100>
 800520e:	4b65      	ldr	r3, [pc, #404]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	015b      	lsls	r3, r3, #5
 800521c:	4961      	ldr	r1, [pc, #388]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800521e:	4313      	orrs	r3, r2
 8005220:	60cb      	str	r3, [r1, #12]
 8005222:	e06f      	b.n	8005304 <HAL_RCC_OscConfig+0x1e0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d30a      	bcc.n	8005244 <HAL_RCC_OscConfig+0x120>
 800522e:	4b5d      	ldr	r3, [pc, #372]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	029b      	lsls	r3, r3, #10
 800523c:	4959      	ldr	r1, [pc, #356]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800523e:	4313      	orrs	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
 8005242:	e05f      	b.n	8005304 <HAL_RCC_OscConfig+0x1e0>
 8005244:	4b57      	ldr	r3, [pc, #348]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	03db      	lsls	r3, r3, #15
 8005252:	4954      	ldr	r1, [pc, #336]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005254:	4313      	orrs	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
 8005258:	e054      	b.n	8005304 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800525a:	4b52      	ldr	r3, [pc, #328]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	4a51      	ldr	r2, [pc, #324]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005260:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005264:	6093      	str	r3, [r2, #8]
 8005266:	4b4f      	ldr	r3, [pc, #316]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	494c      	ldr	r1, [pc, #304]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005274:	4313      	orrs	r3, r2
 8005276:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005280:	d309      	bcc.n	8005296 <HAL_RCC_OscConfig+0x172>
 8005282:	4b48      	ldr	r3, [pc, #288]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 021f 	bic.w	r2, r3, #31
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	4945      	ldr	r1, [pc, #276]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
 8005294:	e028      	b.n	80052e8 <HAL_RCC_OscConfig+0x1c4>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	da0a      	bge.n	80052b4 <HAL_RCC_OscConfig+0x190>
 800529e:	4b41      	ldr	r3, [pc, #260]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	015b      	lsls	r3, r3, #5
 80052ac:	493d      	ldr	r1, [pc, #244]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60cb      	str	r3, [r1, #12]
 80052b2:	e019      	b.n	80052e8 <HAL_RCC_OscConfig+0x1c4>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d30a      	bcc.n	80052d4 <HAL_RCC_OscConfig+0x1b0>
 80052be:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	029b      	lsls	r3, r3, #10
 80052cc:	4935      	ldr	r1, [pc, #212]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60cb      	str	r3, [r1, #12]
 80052d2:	e009      	b.n	80052e8 <HAL_RCC_OscConfig+0x1c4>
 80052d4:	4b33      	ldr	r3, [pc, #204]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	03db      	lsls	r3, r3, #15
 80052e2:	4930      	ldr	r1, [pc, #192]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 f93c 	bl	8006570 <RCC_SetFlashLatencyFromMSIRange>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f000 bde5 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005304:	f001 f8de 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005308:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <HAL_RCC_OscConfig+0x284>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fc f88d 	bl	800142c <HAL_InitTick>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 808a 	beq.w	8005436 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005326:	f000 bdd2 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d066      	beq.n	8005400 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005332:	4b1c      	ldr	r3, [pc, #112]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800533e:	f7fc f8ff 	bl	8001540 <HAL_GetTick>
 8005342:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005344:	e009      	b.n	800535a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005346:	f7fc f8fb 	bl	8001540 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d902      	bls.n	800535a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	f000 bdba 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800535a:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ef      	beq.n	8005346 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005366:	4b0f      	ldr	r3, [pc, #60]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a0e      	ldr	r2, [pc, #56]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800536c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005370:	6093      	str	r3, [r2, #8]
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	4909      	ldr	r1, [pc, #36]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800538c:	d30e      	bcc.n	80053ac <HAL_RCC_OscConfig+0x288>
 800538e:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 021f 	bic.w	r2, r3, #31
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4902      	ldr	r1, [pc, #8]	@ (80053a4 <HAL_RCC_OscConfig+0x280>)
 800539c:	4313      	orrs	r3, r2
 800539e:	60cb      	str	r3, [r1, #12]
 80053a0:	e04a      	b.n	8005438 <HAL_RCC_OscConfig+0x314>
 80053a2:	bf00      	nop
 80053a4:	46020c00 	.word	0x46020c00
 80053a8:	20000004 	.word	0x20000004
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da0a      	bge.n	80053ca <HAL_RCC_OscConfig+0x2a6>
 80053b4:	4b98      	ldr	r3, [pc, #608]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	4995      	ldr	r1, [pc, #596]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60cb      	str	r3, [r1, #12]
 80053c8:	e036      	b.n	8005438 <HAL_RCC_OscConfig+0x314>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d2:	d30a      	bcc.n	80053ea <HAL_RCC_OscConfig+0x2c6>
 80053d4:	4b90      	ldr	r3, [pc, #576]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	498d      	ldr	r1, [pc, #564]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60cb      	str	r3, [r1, #12]
 80053e8:	e026      	b.n	8005438 <HAL_RCC_OscConfig+0x314>
 80053ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	03db      	lsls	r3, r3, #15
 80053f8:	4987      	ldr	r1, [pc, #540]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60cb      	str	r3, [r1, #12]
 80053fe:	e01b      	b.n	8005438 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005400:	4b85      	ldr	r3, [pc, #532]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a84      	ldr	r2, [pc, #528]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800540c:	f7fc f898 	bl	8001540 <HAL_GetTick>
 8005410:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005412:	e009      	b.n	8005428 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005414:	f7fc f894 	bl	8001540 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d902      	bls.n	8005428 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	f000 bd53 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005428:	4b7b      	ldr	r3, [pc, #492]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ef      	bne.n	8005414 <HAL_RCC_OscConfig+0x2f0>
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005436:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 808b 	beq.w	800555c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	2b08      	cmp	r3, #8
 800544a:	d005      	beq.n	8005458 <HAL_RCC_OscConfig+0x334>
 800544c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d109      	bne.n	8005466 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005454:	2b03      	cmp	r3, #3
 8005456:	d106      	bne.n	8005466 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d17d      	bne.n	800555c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f000 bd34 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x35a>
 8005470:	4b69      	ldr	r3, [pc, #420]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a68      	ldr	r2, [pc, #416]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e041      	b.n	8005502 <HAL_RCC_OscConfig+0x3de>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005486:	d112      	bne.n	80054ae <HAL_RCC_OscConfig+0x38a>
 8005488:	4b63      	ldr	r3, [pc, #396]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a62      	ldr	r2, [pc, #392]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 800548e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b60      	ldr	r3, [pc, #384]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5f      	ldr	r2, [pc, #380]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 800549a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	e029      	b.n	8005502 <HAL_RCC_OscConfig+0x3de>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80054b6:	d112      	bne.n	80054de <HAL_RCC_OscConfig+0x3ba>
 80054b8:	4b57      	ldr	r3, [pc, #348]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a56      	ldr	r2, [pc, #344]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b54      	ldr	r3, [pc, #336]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a53      	ldr	r2, [pc, #332]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b51      	ldr	r3, [pc, #324]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a50      	ldr	r2, [pc, #320]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e011      	b.n	8005502 <HAL_RCC_OscConfig+0x3de>
 80054de:	4b4e      	ldr	r3, [pc, #312]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b48      	ldr	r3, [pc, #288]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a47      	ldr	r2, [pc, #284]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005500:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800550a:	f7fc f819 	bl	8001540 <HAL_GetTick>
 800550e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005510:	e009      	b.n	8005526 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005512:	f7fc f815 	bl	8001540 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b64      	cmp	r3, #100	@ 0x64
 800551e:	d902      	bls.n	8005526 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	f000 bcd4 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005526:	4b3c      	ldr	r3, [pc, #240]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ef      	beq.n	8005512 <HAL_RCC_OscConfig+0x3ee>
 8005532:	e013      	b.n	800555c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005534:	f7fc f804 	bl	8001540 <HAL_GetTick>
 8005538:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800553a:	e009      	b.n	8005550 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800553c:	f7fc f800 	bl	8001540 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b64      	cmp	r3, #100	@ 0x64
 8005548:	d902      	bls.n	8005550 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	f000 bcbf 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005550:	4b31      	ldr	r3, [pc, #196]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1ef      	bne.n	800553c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05f      	beq.n	8005628 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	2b04      	cmp	r3, #4
 800556c:	d005      	beq.n	800557a <HAL_RCC_OscConfig+0x456>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d114      	bne.n	800559e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	2b02      	cmp	r3, #2
 8005578:	d111      	bne.n	800559e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f000 bca3 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b23      	ldr	r3, [pc, #140]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	4920      	ldr	r1, [pc, #128]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 8005598:	4313      	orrs	r3, r2
 800559a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800559c:	e044      	b.n	8005628 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d024      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80055a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055b2:	f7fb ffc5 	bl	8001540 <HAL_GetTick>
 80055b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b8:	e009      	b.n	80055ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fb ffc1 	bl	8001540 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d902      	bls.n	80055ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	f000 bc80 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ef      	beq.n	80055ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80055da:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	490b      	ldr	r1, [pc, #44]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	610b      	str	r3, [r1, #16]
 80055ee:	e01b      	b.n	8005628 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80055f0:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <HAL_RCC_OscConfig+0x4f4>)
 80055f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055fc:	f7fb ffa0 	bl	8001540 <HAL_GetTick>
 8005600:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005602:	e00b      	b.n	800561c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005604:	f7fb ff9c 	bl	8001540 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d904      	bls.n	800561c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	f000 bc5b 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
 8005618:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800561c:	4baf      	ldr	r3, [pc, #700]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ed      	bne.n	8005604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80c8 	beq.w	80057c6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005636:	2300      	movs	r3, #0
 8005638:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563c:	4ba7      	ldr	r3, [pc, #668]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d111      	bne.n	800566e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	4ba4      	ldr	r3, [pc, #656]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005650:	4aa2      	ldr	r2, [pc, #648]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005652:	f043 0304 	orr.w	r3, r3, #4
 8005656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800565a:	4ba0      	ldr	r3, [pc, #640]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800566e:	4b9c      	ldr	r3, [pc, #624]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d119      	bne.n	80056ae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800567a:	4b99      	ldr	r3, [pc, #612]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	4a98      	ldr	r2, [pc, #608]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005686:	f7fb ff5b 	bl	8001540 <HAL_GetTick>
 800568a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800568c:	e009      	b.n	80056a2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7fb ff57 	bl	8001540 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d902      	bls.n	80056a2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	f000 bc16 	b.w	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056a2:	4b8f      	ldr	r3, [pc, #572]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0ef      	beq.n	800568e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d05f      	beq.n	8005776 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80056b6:	4b89      	ldr	r3, [pc, #548]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80056b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056bc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d037      	beq.n	800573c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e3f4      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01b      	beq.n	8005726 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80056ee:	4b7b      	ldr	r3, [pc, #492]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80056f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056f4:	4a79      	ldr	r2, [pc, #484]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80056f6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80056fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80056fe:	f7fb ff1f 	bl	8001540 <HAL_GetTick>
 8005702:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005706:	f7fb ff1b 	bl	8001540 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b05      	cmp	r3, #5
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e3da      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005718:	4b70      	ldr	r3, [pc, #448]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800571a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800571e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ef      	bne.n	8005706 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005726:	4b6d      	ldr	r3, [pc, #436]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800572c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	4969      	ldr	r1, [pc, #420]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800573c:	4b67      	ldr	r3, [pc, #412]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800573e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005742:	4a66      	ldr	r2, [pc, #408]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005744:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800574c:	f7fb fef8 	bl	8001540 <HAL_GetTick>
 8005750:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005754:	f7fb fef4 	bl	8001540 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b05      	cmp	r3, #5
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e3b3      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005766:	4b5d      	ldr	r3, [pc, #372]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800576c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ef      	beq.n	8005754 <HAL_RCC_OscConfig+0x630>
 8005774:	e01b      	b.n	80057ae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005776:	4b59      	ldr	r3, [pc, #356]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800577c:	4a57      	ldr	r2, [pc, #348]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800577e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005782:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005786:	f7fb fedb 	bl	8001540 <HAL_GetTick>
 800578a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578e:	f7fb fed7 	bl	8001540 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b05      	cmp	r3, #5
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e396      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057a0:	4b4e      	ldr	r3, [pc, #312]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1ef      	bne.n	800578e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b6:	4b49      	ldr	r3, [pc, #292]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057bc:	4a47      	ldr	r2, [pc, #284]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8111 	beq.w	80059f6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b40      	ldr	r3, [pc, #256]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d111      	bne.n	800580c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e8:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ee:	4a3b      	ldr	r2, [pc, #236]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057f0:	f043 0304 	orr.w	r3, r3, #4
 80057f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057f8:	4b38      	ldr	r3, [pc, #224]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800580c:	4b34      	ldr	r3, [pc, #208]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d118      	bne.n	800584a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005818:	4b31      	ldr	r3, [pc, #196]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005824:	f7fb fe8c 	bl	8001540 <HAL_GetTick>
 8005828:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582c:	f7fb fe88 	bl	8001540 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e347      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800583e:	4b28      	ldr	r3, [pc, #160]	@ (80058e0 <HAL_RCC_OscConfig+0x7bc>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005862:	4b1e      	ldr	r3, [pc, #120]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005868:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005872:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005878:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005882:	e018      	b.n	80058b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005884:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800588a:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005894:	e00f      	b.n	80058b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005896:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 8005898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800589c:	4a0f      	ldr	r2, [pc, #60]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058a6:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80058a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ac:	4a0b      	ldr	r2, [pc, #44]	@ (80058dc <HAL_RCC_OscConfig+0x7b8>)
 80058ae:	f023 0304 	bic.w	r3, r3, #4
 80058b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d057      	beq.n	800596e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80058be:	f7fb fe3f 	bl	8001540 <HAL_GetTick>
 80058c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c4:	e00e      	b.n	80058e4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fb fe3b 	bl	8001540 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d905      	bls.n	80058e4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e2f8      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
 80058dc:	46020c00 	.word	0x46020c00
 80058e0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80058e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e9      	beq.n	80058c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01b      	beq.n	8005936 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058fe:	4b96      	ldr	r3, [pc, #600]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005904:	4a94      	ldr	r2, [pc, #592]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005910:	f7fb fe16 	bl	8001540 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e2d3      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005926:	4b8c      	ldr	r3, [pc, #560]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ed      	beq.n	8005910 <HAL_RCC_OscConfig+0x7ec>
 8005934:	e053      	b.n	80059de <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800593c:	4a86      	ldr	r2, [pc, #536]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 800593e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005942:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fb fdfa 	bl	8001540 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e2b7      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800595e:	4b7e      	ldr	r3, [pc, #504]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ed      	bne.n	8005948 <HAL_RCC_OscConfig+0x824>
 800596c:	e037      	b.n	80059de <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800596e:	f7fb fde7 	bl	8001540 <HAL_GetTick>
 8005972:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fb fde3 	bl	8001540 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e2a0      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800598c:	4b72      	ldr	r3, [pc, #456]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 800598e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ed      	bne.n	8005976 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800599a:	4b6f      	ldr	r3, [pc, #444]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 800599c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01a      	beq.n	80059de <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80059aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80059b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059b8:	e00a      	b.n	80059d0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fb fdc1 	bl	8001540 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e27e      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059d0:	4b61      	ldr	r3, [pc, #388]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80059d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ed      	bne.n	80059ba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e6:	4b5c      	ldr	r3, [pc, #368]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d036      	beq.n	8005a70 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d019      	beq.n	8005a3e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005a0a:	4b53      	ldr	r3, [pc, #332]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a52      	ldr	r2, [pc, #328]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a16:	f7fb fd93 	bl	8001540 <HAL_GetTick>
 8005a1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a1e:	f7fb fd8f 	bl	8001540 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e24e      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005a30:	4b49      	ldr	r3, [pc, #292]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x8fa>
 8005a3c:	e018      	b.n	8005a70 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005a3e:	4b46      	ldr	r3, [pc, #280]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a45      	ldr	r2, [pc, #276]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a4a:	f7fb fd79 	bl	8001540 <HAL_GetTick>
 8005a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a52:	f7fb fd75 	bl	8001540 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e234      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005a64:	4b3c      	ldr	r3, [pc, #240]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f0      	bne.n	8005a52 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d036      	beq.n	8005aea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d019      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005a84:	4b34      	ldr	r3, [pc, #208]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a33      	ldr	r2, [pc, #204]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a90:	f7fb fd56 	bl	8001540 <HAL_GetTick>
 8005a94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005a98:	f7fb fd52 	bl	8001540 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e211      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0x974>
 8005ab6:	e018      	b.n	8005aea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005ab8:	4b27      	ldr	r3, [pc, #156]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a26      	ldr	r2, [pc, #152]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ac2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005ac4:	f7fb fd3c 	bl	8001540 <HAL_GetTick>
 8005ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005acc:	f7fb fd38 	bl	8001540 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e1f7      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d07f      	beq.n	8005bf6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d062      	beq.n	8005bc4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005afe:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4a15      	ldr	r2, [pc, #84]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b08:	6093      	str	r3, [r2, #8]
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	4910      	ldr	r1, [pc, #64]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b24:	d309      	bcc.n	8005b3a <HAL_RCC_OscConfig+0xa16>
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 021f 	bic.w	r2, r3, #31
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4909      	ldr	r1, [pc, #36]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60cb      	str	r3, [r1, #12]
 8005b38:	e02a      	b.n	8005b90 <HAL_RCC_OscConfig+0xa6c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da0c      	bge.n	8005b5c <HAL_RCC_OscConfig+0xa38>
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	015b      	lsls	r3, r3, #5
 8005b50:	4901      	ldr	r1, [pc, #4]	@ (8005b58 <HAL_RCC_OscConfig+0xa34>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60cb      	str	r3, [r1, #12]
 8005b56:	e01b      	b.n	8005b90 <HAL_RCC_OscConfig+0xa6c>
 8005b58:	46020c00 	.word	0x46020c00
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b64:	d30a      	bcc.n	8005b7c <HAL_RCC_OscConfig+0xa58>
 8005b66:	4ba1      	ldr	r3, [pc, #644]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	029b      	lsls	r3, r3, #10
 8005b74:	499d      	ldr	r1, [pc, #628]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]
 8005b7a:	e009      	b.n	8005b90 <HAL_RCC_OscConfig+0xa6c>
 8005b7c:	4b9b      	ldr	r3, [pc, #620]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	03db      	lsls	r3, r3, #15
 8005b8a:	4998      	ldr	r1, [pc, #608]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005b90:	4b96      	ldr	r3, [pc, #600]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a95      	ldr	r2, [pc, #596]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005b96:	f043 0310 	orr.w	r3, r3, #16
 8005b9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b9c:	f7fb fcd0 	bl	8001540 <HAL_GetTick>
 8005ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005ba4:	f7fb fccc 	bl	8001540 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e18b      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0xa80>
 8005bc2:	e018      	b.n	8005bf6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005bc4:	4b89      	ldr	r3, [pc, #548]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a88      	ldr	r2, [pc, #544]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005bd0:	f7fb fcb6 	bl	8001540 <HAL_GetTick>
 8005bd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005bd8:	f7fb fcb2 	bl	8001540 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e171      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005bea:	4b80      	ldr	r3, [pc, #512]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8166 	beq.w	8005ecc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c06:	4b79      	ldr	r3, [pc, #484]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	f000 80f2 	beq.w	8005df8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	f040 80c5 	bne.w	8005da8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b73      	ldr	r3, [pc, #460]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a72      	ldr	r2, [pc, #456]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c2a:	f7fb fc89 	bl	8001540 <HAL_GetTick>
 8005c2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c32:	f7fb fc85 	bl	8001540 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e144      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c44:	4b69      	ldr	r3, [pc, #420]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1f0      	bne.n	8005c32 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c50:	4b66      	ldr	r3, [pc, #408]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d111      	bne.n	8005c82 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b63      	ldr	r3, [pc, #396]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	4a61      	ldr	r2, [pc, #388]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005c82:	4b5b      	ldr	r3, [pc, #364]	@ (8005df0 <HAL_RCC_OscConfig+0xccc>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c8e:	d102      	bne.n	8005c96 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005c96:	4b56      	ldr	r3, [pc, #344]	@ (8005df0 <HAL_RCC_OscConfig+0xccc>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4a55      	ldr	r2, [pc, #340]	@ (8005df0 <HAL_RCC_OscConfig+0xccc>)
 8005c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005ca2:	4b52      	ldr	r3, [pc, #328]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005cb6:	3a01      	subs	r2, #1
 8005cb8:	0212      	lsls	r2, r2, #8
 8005cba:	4311      	orrs	r1, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	494a      	ldr	r1, [pc, #296]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cc8:	4b48      	ldr	r3, [pc, #288]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ccc:	4b49      	ldr	r3, [pc, #292]	@ (8005df4 <HAL_RCC_OscConfig+0xcd0>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0252      	lsls	r2, r2, #9
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cea:	3a01      	subs	r2, #1
 8005cec:	0412      	lsls	r2, r2, #16
 8005cee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005cf2:	4311      	orrs	r1, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0612      	lsls	r2, r2, #24
 8005cfc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d00:	430a      	orrs	r2, r1
 8005d02:	493a      	ldr	r1, [pc, #232]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d08:	4b38      	ldr	r3, [pc, #224]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	4a37      	ldr	r2, [pc, #220]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	4a34      	ldr	r2, [pc, #208]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d1e:	4b33      	ldr	r3, [pc, #204]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d24:	f043 0310 	orr.w	r3, r3, #16
 8005d28:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005d2a:	4b30      	ldr	r3, [pc, #192]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	f023 020c 	bic.w	r2, r3, #12
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d36:	492d      	ldr	r1, [pc, #180]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005d44:	4b2a      	ldr	r3, [pc, #168]	@ (8005df0 <HAL_RCC_OscConfig+0xccc>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4a29      	ldr	r2, [pc, #164]	@ (8005df0 <HAL_RCC_OscConfig+0xccc>)
 8005d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d4e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005d50:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b24      	ldr	r3, [pc, #144]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5e:	4a23      	ldr	r2, [pc, #140]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005d68:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d74:	f7fb fbe4 	bl	8001540 <HAL_GetTick>
 8005d78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7c:	f7fb fbe0 	bl	8001540 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e09f      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005d8e:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005da4:	6293      	str	r3, [r2, #40]	@ 0x28
 8005da6:	e091      	b.n	8005ecc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b10      	ldr	r3, [pc, #64]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0f      	ldr	r2, [pc, #60]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005db4:	f7fb fbc4 	bl	8001540 <HAL_GetTick>
 8005db8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fb fbc0 	bl	8001540 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e07f      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005dce:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005dda:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	4a03      	ldr	r2, [pc, #12]	@ (8005dec <HAL_RCC_OscConfig+0xcc8>)
 8005de0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	6293      	str	r3, [r2, #40]	@ 0x28
 8005dea:	e06f      	b.n	8005ecc <HAL_RCC_OscConfig+0xda8>
 8005dec:	46020c00 	.word	0x46020c00
 8005df0:	46020800 	.word	0x46020800
 8005df4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005df8:	4b37      	ldr	r3, [pc, #220]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dfe:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e02:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d039      	beq.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0203 	and.w	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d132      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d129      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d122      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e44:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11a      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e68:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d108      	bne.n	8005e80 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	0e1b      	lsrs	r3, r3, #24
 8005e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e024      	b.n	8005ece <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e84:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d01a      	beq.n	8005ecc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005e96:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005e9c:	f023 0310 	bic.w	r3, r3, #16
 8005ea0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea2:	f7fb fb4d 	bl	8001540 <HAL_GetTick>
 8005ea6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005ea8:	bf00      	nop
 8005eaa:	f7fb fb49 	bl	8001540 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d0f9      	beq.n	8005eaa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_RCC_OscConfig+0xdb4>)
 8005ec6:	f043 0310 	orr.w	r3, r3, #16
 8005eca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3738      	adds	r7, #56	@ 0x38
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	46020c00 	.word	0x46020c00

08005edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e1d9      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8006160 <HAL_RCC_ClockConfig+0x284>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d910      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b98      	ldr	r3, [pc, #608]	@ (8006160 <HAL_RCC_ClockConfig+0x284>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 020f 	bic.w	r2, r3, #15
 8005f06:	4996      	ldr	r1, [pc, #600]	@ (8006160 <HAL_RCC_ClockConfig+0x284>)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b94      	ldr	r3, [pc, #592]	@ (8006160 <HAL_RCC_ClockConfig+0x284>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e1c1      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d010      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	4b8c      	ldr	r3, [pc, #560]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d908      	bls.n	8005f4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005f3c:	4b89      	ldr	r3, [pc, #548]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	4986      	ldr	r1, [pc, #536]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d012      	beq.n	8005f80 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	4b81      	ldr	r3, [pc, #516]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d909      	bls.n	8005f80 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005f6c:	4b7d      	ldr	r3, [pc, #500]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	497a      	ldr	r1, [pc, #488]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d010      	beq.n	8005fae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b74      	ldr	r3, [pc, #464]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d908      	bls.n	8005fae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005f9c:	4b71      	ldr	r3, [pc, #452]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	496e      	ldr	r1, [pc, #440]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d010      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	4b69      	ldr	r3, [pc, #420]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d908      	bls.n	8005fdc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005fca:	4b66      	ldr	r3, [pc, #408]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 020f 	bic.w	r2, r3, #15
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	4963      	ldr	r1, [pc, #396]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80d2 	beq.w	800618e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d143      	bne.n	800607e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8005ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d110      	bne.n	8006026 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006004:	4b57      	ldr	r3, [pc, #348]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800600a:	4a56      	ldr	r2, [pc, #344]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 800600c:	f043 0304 	orr.w	r3, r3, #4
 8006010:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006014:	4b53      	ldr	r3, [pc, #332]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006026:	f7fb fa8b 	bl	8001540 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800602c:	4b4e      	ldr	r3, [pc, #312]	@ (8006168 <HAL_RCC_ClockConfig+0x28c>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800603a:	f7fb fa81 	bl	8001540 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e12b      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800604c:	4b46      	ldr	r3, [pc, #280]	@ (8006168 <HAL_RCC_ClockConfig+0x28c>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d107      	bne.n	800606e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800605e:	4b41      	ldr	r3, [pc, #260]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006064:	4a3f      	ldr	r2, [pc, #252]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006066:	f023 0304 	bic.w	r3, r3, #4
 800606a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800606e:	4b3d      	ldr	r3, [pc, #244]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d121      	bne.n	80060be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e112      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006086:	4b37      	ldr	r3, [pc, #220]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d115      	bne.n	80060be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e106      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800609e:	4b31      	ldr	r3, [pc, #196]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0fa      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0f2      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80060be:	4b29      	ldr	r3, [pc, #164]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f023 0203 	bic.w	r2, r3, #3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4926      	ldr	r1, [pc, #152]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80060d0:	f7fb fa36 	bl	8001540 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d112      	bne.n	8006104 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fb fa2e 	bl	8001540 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0d6      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b0c      	cmp	r3, #12
 8006100:	d1ee      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x204>
 8006102:	e044      	b.n	800618e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d112      	bne.n	8006132 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800610e:	f7fb fa17 	bl	8001540 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0bf      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006124:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d1ee      	bne.n	800610e <HAL_RCC_ClockConfig+0x232>
 8006130:	e02d      	b.n	800618e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d123      	bne.n	8006182 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800613a:	e00a      	b.n	8006152 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613c:	f7fb fa00 	bl	8001540 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0a8      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006152:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <HAL_RCC_ClockConfig+0x288>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1ee      	bne.n	800613c <HAL_RCC_ClockConfig+0x260>
 800615e:	e016      	b.n	800618e <HAL_RCC_ClockConfig+0x2b2>
 8006160:	40022000 	.word	0x40022000
 8006164:	46020c00 	.word	0x46020c00
 8006168:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800616c:	f7fb f9e8 	bl	8001540 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e090      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006182:	4b4a      	ldr	r3, [pc, #296]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b04      	cmp	r3, #4
 800618c:	d1ee      	bne.n	800616c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d208      	bcs.n	80061bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80061aa:	4b40      	ldr	r3, [pc, #256]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 020f 	bic.w	r2, r3, #15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	493d      	ldr	r1, [pc, #244]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061bc:	4b3c      	ldr	r3, [pc, #240]	@ (80062b0 <HAL_RCC_ClockConfig+0x3d4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d210      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <HAL_RCC_ClockConfig+0x3d4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 020f 	bic.w	r2, r3, #15
 80061d2:	4937      	ldr	r1, [pc, #220]	@ (80062b0 <HAL_RCC_ClockConfig+0x3d4>)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <HAL_RCC_ClockConfig+0x3d4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e05b      	b.n	80062a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d010      	beq.n	800621a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	4b2b      	ldr	r3, [pc, #172]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006204:	429a      	cmp	r2, r3
 8006206:	d208      	bcs.n	800621a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006208:	4b28      	ldr	r3, [pc, #160]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4925      	ldr	r1, [pc, #148]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d012      	beq.n	800624c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	4b20      	ldr	r3, [pc, #128]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006234:	429a      	cmp	r2, r3
 8006236:	d209      	bcs.n	800624c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006238:	4b1c      	ldr	r3, [pc, #112]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	4919      	ldr	r1, [pc, #100]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 8006248:	4313      	orrs	r3, r2
 800624a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006264:	429a      	cmp	r2, r3
 8006266:	d208      	bcs.n	800627a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006268:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	490d      	ldr	r1, [pc, #52]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800627a:	f000 f821 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800627e:	4602      	mov	r2, r0
 8006280:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <HAL_RCC_ClockConfig+0x3d0>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	490a      	ldr	r1, [pc, #40]	@ (80062b4 <HAL_RCC_ClockConfig+0x3d8>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <HAL_RCC_ClockConfig+0x3dc>)
 8006292:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006294:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <HAL_RCC_ClockConfig+0x3e0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fb f8c7 	bl	800142c <HAL_InitTick>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	46020c00 	.word	0x46020c00
 80062b0:	40022000 	.word	0x40022000
 80062b4:	0800adbc 	.word	0x0800adbc
 80062b8:	20000000 	.word	0x20000000
 80062bc:	20000004 	.word	0x20000004

080062c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b08b      	sub	sp, #44	@ 0x2c
 80062c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ce:	4b78      	ldr	r3, [pc, #480]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f003 030c 	and.w	r3, r3, #12
 80062d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d8:	4b75      	ldr	r3, [pc, #468]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x34>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b0c      	cmp	r3, #12
 80062ec:	d121      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d11e      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80062f4:	4b6e      	ldr	r3, [pc, #440]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006300:	4b6b      	ldr	r3, [pc, #428]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006306:	0b1b      	lsrs	r3, r3, #12
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
 800630e:	e005      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006310:	4b67      	ldr	r3, [pc, #412]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0f1b      	lsrs	r3, r3, #28
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800631c:	4a65      	ldr	r2, [pc, #404]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006330:	e00d      	b.n	800634e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006332:	4b5f      	ldr	r3, [pc, #380]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b04      	cmp	r3, #4
 800633c:	d102      	bne.n	8006344 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800633e:	4b5e      	ldr	r3, [pc, #376]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	e004      	b.n	800634e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b08      	cmp	r3, #8
 8006348:	d101      	bne.n	800634e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800634a:	4b5b      	ldr	r3, [pc, #364]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800634c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	f040 80a5 	bne.w	80064a0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006356:	4b56      	ldr	r3, [pc, #344]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006360:	4b53      	ldr	r3, [pc, #332]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800636e:	4b50      	ldr	r3, [pc, #320]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800637a:	4b4d      	ldr	r3, [pc, #308]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800637c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d003      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d022      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0x128>
 80063a2:	e043      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80064bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80063c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80063ca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80064c0 <HAL_RCC_GetSysClockFreq+0x200>
 80063ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80063d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e6:	e046      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80064bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fa:	4b2d      	ldr	r3, [pc, #180]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800640a:	ed97 6a01 	vldr	s12, [r7, #4]
 800640e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80064c0 <HAL_RCC_GetSysClockFreq+0x200>
 8006412:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006416:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800641a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642a:	e024      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	ee07 3a90 	vmov	s15, r3
 800643c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006444:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006454:	ed97 6a01 	vldr	s12, [r7, #4]
 8006458:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80064c0 <HAL_RCC_GetSysClockFreq+0x200>
 800645c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006460:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006468:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800646c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006470:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006474:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006476:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647a:	0e1b      	lsrs	r3, r3, #24
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	3301      	adds	r3, #1
 8006482:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 3a90 	vmov	r3, s15
 800649e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	372c      	adds	r7, #44	@ 0x2c
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	46020c00 	.word	0x46020c00
 80064b4:	0800add4 	.word	0x0800add4
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	4b742400 	.word	0x4b742400
 80064c0:	46000000 	.word	0x46000000

080064c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80064c8:	f7ff fefa 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b07      	ldr	r3, [pc, #28]	@ (80064ec <HAL_RCC_GetHCLKFreq+0x28>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	4906      	ldr	r1, [pc, #24]	@ (80064f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80064d8:	5ccb      	ldrb	r3, [r1, r3]
 80064da:	fa22 f303 	lsr.w	r3, r2, r3
 80064de:	4a05      	ldr	r2, [pc, #20]	@ (80064f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80064e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80064e2:	4b04      	ldr	r3, [pc, #16]	@ (80064f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80064e4:	681b      	ldr	r3, [r3, #0]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	46020c00 	.word	0x46020c00
 80064f0:	0800adbc 	.word	0x0800adbc
 80064f4:	20000000 	.word	0x20000000

080064f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80064fc:	f7ff ffe2 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006500:	4602      	mov	r2, r0
 8006502:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	4903      	ldr	r1, [pc, #12]	@ (800651c <HAL_RCC_GetPCLK1Freq+0x24>)
 800650e:	5ccb      	ldrb	r3, [r1, r3]
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	46020c00 	.word	0x46020c00
 800651c:	0800adcc 	.word	0x0800adcc

08006520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006524:	f7ff ffce 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	4903      	ldr	r1, [pc, #12]	@ (8006544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006536:	5ccb      	ldrb	r3, [r1, r3]
 8006538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800653c:	4618      	mov	r0, r3
 800653e:	bd80      	pop	{r7, pc}
 8006540:	46020c00 	.word	0x46020c00
 8006544:	0800adcc 	.word	0x0800adcc

08006548 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800654c:	f7ff ffba 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	091b      	lsrs	r3, r3, #4
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <HAL_RCC_GetPCLK3Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	46020c00 	.word	0x46020c00
 800656c:	0800adcc 	.word	0x0800adcc

08006570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006578:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800657a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006586:	f7fe fd31 	bl	8004fec <HAL_PWREx_GetVoltageRange>
 800658a:	6178      	str	r0, [r7, #20]
 800658c:	e019      	b.n	80065c2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800658e:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006594:	4a37      	ldr	r2, [pc, #220]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800659e:	4b35      	ldr	r3, [pc, #212]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80065a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065ac:	f7fe fd1e 	bl	8004fec <HAL_PWREx_GetVoltageRange>
 80065b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065b2:	4b30      	ldr	r3, [pc, #192]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80065b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006674 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80065ba:	f023 0304 	bic.w	r3, r3, #4
 80065be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065c8:	d003      	beq.n	80065d2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d0:	d109      	bne.n	80065e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d8:	d202      	bcs.n	80065e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80065da:	2301      	movs	r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80065de:	e033      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80065e4:	e030      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ec:	d208      	bcs.n	8006600 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d102      	bne.n	80065fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80065f6:	2303      	movs	r3, #3
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	e025      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e035      	b.n	800666c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006606:	d90f      	bls.n	8006628 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006614:	d902      	bls.n	800661c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e015      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800661c:	2301      	movs	r3, #1
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e012      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e00f      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800662e:	d109      	bne.n	8006644 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006636:	d102      	bne.n	800663e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006638:	2301      	movs	r3, #1
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	e004      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800663e:	2302      	movs	r3, #2
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e001      	b.n	8006648 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006644:	2301      	movs	r3, #1
 8006646:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f023 020f 	bic.w	r2, r3, #15
 8006650:	4909      	ldr	r1, [pc, #36]	@ (8006678 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006658:	4b07      	ldr	r3, [pc, #28]	@ (8006678 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d001      	beq.n	800666a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	46020c00 	.word	0x46020c00
 8006678:	40022000 	.word	0x40022000

0800667c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800667c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006680:	b0c8      	sub	sp, #288	@ 0x120
 8006682:	af00      	add	r7, sp, #0
 8006684:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006688:	2300      	movs	r3, #0
 800668a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800668e:	2300      	movs	r3, #0
 8006690:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f002 0401 	and.w	r4, r2, #1
 80066a0:	2500      	movs	r5, #0
 80066a2:	ea54 0305 	orrs.w	r3, r4, r5
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80066a8:	4bd5      	ldr	r3, [pc, #852]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ae:	f023 0103 	bic.w	r1, r3, #3
 80066b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b8:	4ad1      	ldr	r2, [pc, #836]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f002 0802 	and.w	r8, r2, #2
 80066cc:	f04f 0900 	mov.w	r9, #0
 80066d0:	ea58 0309 	orrs.w	r3, r8, r9
 80066d4:	d00b      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80066d6:	4bca      	ldr	r3, [pc, #808]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80066d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066dc:	f023 010c 	bic.w	r1, r3, #12
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	4ac6      	ldr	r2, [pc, #792]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80066e8:	430b      	orrs	r3, r1
 80066ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	f002 0a04 	and.w	sl, r2, #4
 80066fa:	f04f 0b00 	mov.w	fp, #0
 80066fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8006702:	d00b      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006704:	4bbe      	ldr	r3, [pc, #760]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800670a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006714:	4aba      	ldr	r2, [pc, #744]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006716:	430b      	orrs	r3, r1
 8006718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f002 0308 	and.w	r3, r2, #8
 8006728:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006732:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006736:	460b      	mov	r3, r1
 8006738:	4313      	orrs	r3, r2
 800673a:	d00b      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800673c:	4bb0      	ldr	r3, [pc, #704]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800673e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006742:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674c:	4aac      	ldr	r2, [pc, #688]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800674e:	430b      	orrs	r3, r1
 8006750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f002 0310 	and.w	r3, r2, #16
 8006760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800676a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d00b      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006774:	4ba2      	ldr	r3, [pc, #648]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006784:	4a9e      	ldr	r2, [pc, #632]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006786:	430b      	orrs	r3, r1
 8006788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006798:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80067ac:	4b94      	ldr	r3, [pc, #592]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80067ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067bc:	4a90      	ldr	r2, [pc, #576]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f002 0320 	and.w	r3, r2, #32
 80067d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067da:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d00b      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80067e4:	4b86      	ldr	r3, [pc, #536]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80067e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067ea:	f023 0107 	bic.w	r1, r3, #7
 80067ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067f4:	4a82      	ldr	r2, [pc, #520]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006812:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d00b      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800681c:	4b78      	ldr	r3, [pc, #480]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800681e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006822:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800682c:	4a74      	ldr	r2, [pc, #464]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800682e:	430b      	orrs	r3, r1
 8006830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006844:	2300      	movs	r3, #0
 8006846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800684a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d00b      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006854:	4b6a      	ldr	r3, [pc, #424]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800685a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800685e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a66      	ldr	r2, [pc, #408]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006866:	430b      	orrs	r3, r1
 8006868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800686c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006882:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d00b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800688c:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800688e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689c:	4a58      	ldr	r2, [pc, #352]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d00b      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80068c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ca:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80068ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068d6:	430b      	orrs	r3, r1
 80068d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80068dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d00b      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80068fc:	4b40      	ldr	r3, [pc, #256]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80068fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006902:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800690a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800690c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800690e:	430b      	orrs	r3, r1
 8006910:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8006914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800692a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d00c      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8006934:	4b32      	ldr	r3, [pc, #200]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800693a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	4a2e      	ldr	r2, [pc, #184]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006948:	430b      	orrs	r3, r1
 800694a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800694e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800695a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800695e:	2300      	movs	r3, #0
 8006960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006964:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d00c      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800696e:	4b24      	ldr	r3, [pc, #144]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006974:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800697c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006980:	4a1f      	ldr	r2, [pc, #124]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006982:	430b      	orrs	r3, r1
 8006984:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800699e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d00c      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80069a8:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	4a11      	ldr	r2, [pc, #68]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80069dc:	460b      	mov	r3, r1
 80069de:	4313      	orrs	r3, r2
 80069e0:	d010      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80069e2:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069f4:	4a02      	ldr	r2, [pc, #8]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80069fe:	bf00      	nop
 8006a00:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a14:	2300      	movs	r3, #0
 8006a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d04c      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2c:	2b80      	cmp	r3, #128	@ 0x80
 8006a2e:	d02d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006a30:	2b80      	cmp	r3, #128	@ 0x80
 8006a32:	d827      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006a34:	2b60      	cmp	r3, #96	@ 0x60
 8006a36:	d02b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006a38:	2b60      	cmp	r3, #96	@ 0x60
 8006a3a:	d823      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d006      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006a40:	2b40      	cmp	r3, #64	@ 0x40
 8006a42:	d81f      	bhi.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d011      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006a4c:	e01a      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a4e:	4bc0      	ldr	r3, [pc, #768]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a52:	4abf      	ldr	r2, [pc, #764]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a5a:	e01a      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a60:	3308      	adds	r3, #8
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 fcd6 	bl	8009414 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a6e:	e010      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a74:	332c      	adds	r3, #44	@ 0x2c
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 fd64 	bl	8009544 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a82:	e006      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006a8a:	e002      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006a8c:	bf00      	nop
 8006a8e:	e000      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a92:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006a9a:	4bad      	ldr	r3, [pc, #692]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006a9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aa0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aac:	4aa8      	ldr	r2, [pc, #672]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ab4:	e003      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006aba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ad4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4313      	orrs	r3, r2
 8006adc:	d053      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aea:	d033      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af0:	d82c      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006af6:	d02f      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d826      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b02:	d008      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b08:	d820      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b12:	d011      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b14:	e01a      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b16:	4b8e      	ldr	r3, [pc, #568]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	4a8d      	ldr	r2, [pc, #564]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b22:	e01a      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b28:	3308      	adds	r3, #8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f002 fc72 	bl	8009414 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b36:	e010      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b3c:	332c      	adds	r3, #44	@ 0x2c
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 fd00 	bl	8009544 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006b4a:	e006      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006b52:	e002      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8006b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10d      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006b62:	4b7b      	ldr	r3, [pc, #492]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b74:	4a76      	ldr	r2, [pc, #472]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006b76:	430b      	orrs	r3, r1
 8006b78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b7c:	e003      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006b82:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b96:	2300      	movs	r3, #0
 8006b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	d046      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006baa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bb2:	d028      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006bb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bb8:	d821      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bbe:	d022      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bc4:	d81b      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bca:	d01c      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006bcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bd0:	d815      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bd6:	d008      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bdc:	d80f      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d011      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be6:	d00e      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006be8:	e009      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bee:	3308      	adds	r3, #8
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 fc0f 	bl	8009414 <RCCEx_PLL2_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006bfc:	e004      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8006c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c08:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006c10:	4b4f      	ldr	r3, [pc, #316]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c16:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c22:	4a4b      	ldr	r2, [pc, #300]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c2a:	e003      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006c30:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d03f      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d81e      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8006c60:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006ca7 	.word	0x08006ca7
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c8b 	.word	0x08006c8b
 8006c74:	08006ca7 	.word	0x08006ca7
 8006c78:	08006ca7 	.word	0x08006ca7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c7c:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	4a33      	ldr	r2, [pc, #204]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c86:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8e:	332c      	adds	r3, #44	@ 0x2c
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 fc57 	bl	8009544 <RCCEx_PLL3_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006c9c:	e004      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8006ca6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ca8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006cb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cb6:	f023 0107 	bic.w	r1, r3, #7
 8006cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc2:	4a23      	ldr	r2, [pc, #140]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006cca:	e003      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ccc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006cd0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ce6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006cea:	460b      	mov	r3, r1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d04c      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cfc:	d02a      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d02:	d821      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8006d04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d08:	d026      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8006d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0e:	d81b      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8006d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d14:	d00e      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1a:	d815      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01d      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d24:	d110      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2a:	4a09      	ldr	r2, [pc, #36]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d30:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006d32:	e014      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d38:	332c      	adds	r3, #44	@ 0x2c
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fc02 	bl	8009544 <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006d46:	e00a      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006d4e:	e006      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006d50:	46020c00 	.word	0x46020c00
        break;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8006d5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d5e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006d66:	4baf      	ldr	r3, [pc, #700]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d78:	4aaa      	ldr	r2, [pc, #680]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006d86:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d98:	2300      	movs	r3, #0
 8006d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006da0:	460b      	mov	r3, r1
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f000 80b5 	beq.w	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dae:	4b9d      	ldr	r3, [pc, #628]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d113      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dbc:	4b99      	ldr	r3, [pc, #612]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dc2:	4a98      	ldr	r2, [pc, #608]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006dc4:	f043 0304 	orr.w	r3, r3, #4
 8006dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006dcc:	4b95      	ldr	r3, [pc, #596]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006dda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006de4:	4b90      	ldr	r3, [pc, #576]	@ (8007028 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	4a8f      	ldr	r2, [pc, #572]	@ (8007028 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006df0:	f7fa fba6 	bl	8001540 <HAL_GetTick>
 8006df4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006df8:	e00b      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfa:	f7fa fba1 	bl	8001540 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d903      	bls.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006e12:	4b85      	ldr	r3, [pc, #532]	@ (8007028 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0ed      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8006e1e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d165      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e26:	4b7f      	ldr	r3, [pc, #508]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d023      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e40:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d01b      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e4c:	4b75      	ldr	r3, [pc, #468]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e5a:	4b72      	ldr	r3, [pc, #456]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e60:	4a70      	ldr	r2, [pc, #448]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e70:	4a6c      	ldr	r2, [pc, #432]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d019      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fa fb56 	bl	8001540 <HAL_GetTick>
 8006e94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e98:	e00d      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9a:	f7fa fb51 	bl	8001540 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d903      	bls.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0ea      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8006ec4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ecc:	4b55      	ldr	r3, [pc, #340]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006ede:	4a51      	ldr	r2, [pc, #324]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ee6:	e008      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006eec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8006ef0:	e003      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006ef6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006efa:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f02:	4b48      	ldr	r3, [pc, #288]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f08:	4a46      	ldr	r2, [pc, #280]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006f0a:	f023 0304 	bic.w	r3, r3, #4
 8006f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006f1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f20:	2300      	movs	r3, #0
 8006f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	d042      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f36:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f3a:	d022      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8006f3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f40:	d81b      	bhi.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f46:	d011      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f4c:	d815      	bhi.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d019      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8006f52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f56:	d110      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 fa58 	bl	8009414 <RCCEx_PLL2_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006f6a:	e00d      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	4a2c      	ldr	r2, [pc, #176]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f76:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006f78:	e006      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006f80:	e002      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8006f82:	bf00      	nop
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8006f86:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006f88:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10d      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006f90:	4b24      	ldr	r3, [pc, #144]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fa2:	4a20      	ldr	r2, [pc, #128]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006faa:	e003      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006fb0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fc6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	d031      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe2:	d804      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d007      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006ff4:	e004      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8006ffe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007000:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007004:	2b00      	cmp	r3, #0
 8007006:	d111      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007008:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800700a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800700e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800701a:	4a02      	ldr	r2, [pc, #8]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800701c:	430b      	orrs	r3, r1
 800701e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007022:	e007      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8007024:	46020c00 	.word	0x46020c00
 8007028:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007030:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007042:	2300      	movs	r3, #0
 8007044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007046:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800704a:	460b      	mov	r3, r1
 800704c:	4313      	orrs	r3, r2
 800704e:	d00c      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007050:	4bb2      	ldr	r3, [pc, #712]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007056:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800705a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800705e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007062:	4aae      	ldr	r2, [pc, #696]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007064:	430b      	orrs	r3, r1
 8007066:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800706a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007076:	653b      	str	r3, [r7, #80]	@ 0x50
 8007078:	2300      	movs	r3, #0
 800707a:	657b      	str	r3, [r7, #84]	@ 0x54
 800707c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007080:	460b      	mov	r3, r1
 8007082:	4313      	orrs	r3, r2
 8007084:	d019      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800708a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800708e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007092:	d105      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007094:	4ba1      	ldr	r3, [pc, #644]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	4aa0      	ldr	r2, [pc, #640]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800709a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80070a0:	4b9e      	ldr	r3, [pc, #632]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070a6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80070aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070b2:	4a9a      	ldr	r2, [pc, #616]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070b4:	430b      	orrs	r3, r1
 80070b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80070ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80070c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c8:	2300      	movs	r3, #0
 80070ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80070d0:	460b      	mov	r3, r1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	d00c      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80070d6:	4b91      	ldr	r3, [pc, #580]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070dc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80070e8:	4a8c      	ldr	r2, [pc, #560]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070ea:	430b      	orrs	r3, r1
 80070ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80070f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070fe:	2300      	movs	r3, #0
 8007100:	647b      	str	r3, [r7, #68]	@ 0x44
 8007102:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007106:	460b      	mov	r3, r1
 8007108:	4313      	orrs	r3, r2
 800710a:	d00c      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800710c:	4b83      	ldr	r3, [pc, #524]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800710e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007112:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800711a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800711e:	4a7f      	ldr	r2, [pc, #508]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007120:	430b      	orrs	r3, r1
 8007122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007134:	2300      	movs	r3, #0
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007138:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d00c      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007142:	4b76      	ldr	r3, [pc, #472]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007148:	f023 0118 	bic.w	r1, r3, #24
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007150:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007154:	4a71      	ldr	r2, [pc, #452]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007156:	430b      	orrs	r3, r1
 8007158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800715c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007168:	633b      	str	r3, [r7, #48]	@ 0x30
 800716a:	2300      	movs	r3, #0
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007172:	460b      	mov	r3, r1
 8007174:	4313      	orrs	r3, r2
 8007176:	d032      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800717c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007184:	d105      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007186:	4b65      	ldr	r3, [pc, #404]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718a:	4a64      	ldr	r2, [pc, #400]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800718c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007190:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007196:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800719a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800719e:	d108      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a4:	3308      	adds	r3, #8
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 f934 	bl	8009414 <RCCEx_PLL2_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 80071b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80071ba:	4b58      	ldr	r3, [pc, #352]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071cc:	4a53      	ldr	r2, [pc, #332]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071ce:	430b      	orrs	r3, r1
 80071d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80071da:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80071de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	2100      	movs	r1, #0
 80071e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80071f4:	460b      	mov	r3, r1
 80071f6:	4313      	orrs	r3, r2
 80071f8:	d04a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80071fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007202:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007206:	d01e      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8007208:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800720c:	d825      	bhi.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800720e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007212:	d00e      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8007214:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007218:	d81f      	bhi.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d021      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800721e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007222:	d11a      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4b3d      	ldr	r3, [pc, #244]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	4a3c      	ldr	r2, [pc, #240]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800722e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007230:	e018      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007236:	3308      	adds	r3, #8
 8007238:	4618      	mov	r0, r3
 800723a:	f002 f8eb 	bl	8009414 <RCCEx_PLL2_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007244:	e00e      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800724a:	332c      	adds	r3, #44	@ 0x2c
 800724c:	4618      	mov	r0, r3
 800724e:	f002 f979 	bl	8009544 <RCCEx_PLL3_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007258:	e004      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8007262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007264:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800726c:	4b2b      	ldr	r3, [pc, #172]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800726e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007272:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800727e:	4927      	ldr	r1, [pc, #156]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007286:	e003      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800728c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800729c:	623b      	str	r3, [r7, #32]
 800729e:	2300      	movs	r3, #0
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072a6:	460b      	mov	r3, r1
 80072a8:	4313      	orrs	r3, r2
 80072aa:	d03d      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072b8:	d00e      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80072ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072be:	d815      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d017      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80072c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c8:	d110      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ca:	4b14      	ldr	r3, [pc, #80]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	4a13      	ldr	r2, [pc, #76]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80072d6:	e00e      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072dc:	3308      	adds	r3, #8
 80072de:	4618      	mov	r0, r3
 80072e0:	f002 f898 	bl	8009414 <RCCEx_PLL2_Config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80072ea:	e004      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80072f2:	e000      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80072f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80072f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d110      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80072fe:	4b07      	ldr	r3, [pc, #28]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007304:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	4902      	ldr	r1, [pc, #8]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007318:	e006      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800731a:	bf00      	nop
 800731c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007324:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	2300      	movs	r3, #0
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800733e:	460b      	mov	r3, r1
 8007340:	4313      	orrs	r3, r2
 8007342:	d00c      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007344:	4b68      	ldr	r3, [pc, #416]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800734a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800734e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007352:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007356:	4964      	ldr	r1, [pc, #400]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	2100      	movs	r1, #0
 8007368:	6139      	str	r1, [r7, #16]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d036      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800737a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800737e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800738a:	d113      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007390:	3308      	adds	r3, #8
 8007392:	4618      	mov	r0, r3
 8007394:	f002 f83e 	bl	8009414 <RCCEx_PLL2_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800739e:	e00d      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a4:	332c      	adds	r3, #44	@ 0x2c
 80073a6:	4618      	mov	r0, r3
 80073a8:	f002 f8cc 	bl	8009544 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80073b2:	e003      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80073ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10d      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80073c4:	4b48      	ldr	r3, [pc, #288]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80073c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80073ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80073d6:	4944      	ldr	r1, [pc, #272]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80073de:	e003      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80073e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80073e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	2100      	movs	r1, #0
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073fe:	460b      	mov	r3, r1
 8007400:	4313      	orrs	r3, r2
 8007402:	d024      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8007404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007414:	332c      	adds	r3, #44	@ 0x2c
 8007416:	4618      	mov	r0, r3
 8007418:	f002 f894 	bl	8009544 <RCCEx_PLL3_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8007422:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10d      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800742a:	4b2f      	ldr	r3, [pc, #188]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800742c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007430:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800743c:	492a      	ldr	r1, [pc, #168]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007444:	e003      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007446:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800744a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800744e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	2100      	movs	r1, #0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007464:	460b      	mov	r3, r1
 8007466:	4313      	orrs	r3, r2
 8007468:	d036      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007472:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007476:	d00d      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8007478:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800747c:	d811      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800747e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007482:	d012      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8007484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007488:	d80b      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00d      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007492:	d106      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007494:	4b14      	ldr	r3, [pc, #80]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	4a13      	ldr	r2, [pc, #76]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800749a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800749e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80074a0:	e004      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 80074aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80074b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80074be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80074c6:	4908      	ldr	r1, [pc, #32]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80074d4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80074d8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 80074dc:	4618      	mov	r0, r3
 80074de:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80074e2:	46bd      	mov	sp, r7
 80074e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074e8:	46020c00 	.word	0x46020c00

080074ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b089      	sub	sp, #36	@ 0x24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80074f4:	4ba6      	ldr	r3, [pc, #664]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80074f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80074fe:	4ba4      	ldr	r3, [pc, #656]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007508:	4ba1      	ldr	r3, [pc, #644]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	3301      	adds	r3, #1
 8007514:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007516:	4b9e      	ldr	r3, [pc, #632]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751a:	091b      	lsrs	r3, r3, #4
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007522:	4b9b      	ldr	r3, [pc, #620]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d062      	beq.n	800760a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b03      	cmp	r3, #3
 8007548:	f200 8081 	bhi.w	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d024      	beq.n	800759c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d17a      	bne.n	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756a:	4b89      	ldr	r3, [pc, #548]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800756c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800757a:	ed97 6a02 	vldr	s12, [r7, #8]
 800757e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007798 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007582:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007586:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800758a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800759a:	e08f      	b.n	80076bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800759c:	4b7c      	ldr	r3, [pc, #496]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80075a8:	4b79      	ldr	r3, [pc, #484]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	0f1b      	lsrs	r3, r3, #28
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	e006      	b.n	80075c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80075b4:	4b76      	ldr	r3, [pc, #472]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80075b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	0f1b      	lsrs	r3, r3, #28
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	4a76      	ldr	r2, [pc, #472]	@ (800779c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80075c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007798 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80075f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007608:	e058      	b.n	80076bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007614:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761c:	4b5c      	ldr	r3, [pc, #368]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800761e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800762c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007630:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007798 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007634:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007638:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800763c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007640:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007648:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764c:	e036      	b.n	80076bc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800764e:	4b50      	ldr	r3, [pc, #320]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800765a:	4b4d      	ldr	r3, [pc, #308]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	0f1b      	lsrs	r3, r3, #28
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007666:	4b4a      	ldr	r3, [pc, #296]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	0f1b      	lsrs	r3, r3, #28
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	4a49      	ldr	r2, [pc, #292]	@ (800779c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a02 	vldr	s12, [r7, #8]
 800769e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007798 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80076bc:	4b34      	ldr	r3, [pc, #208]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d017      	beq.n	80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80076c8:	4b31      	ldr	r3, [pc, #196]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076cc:	0a5b      	lsrs	r3, r3, #9
 80076ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80076da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80076e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ee:	ee17 2a90 	vmov	r2, s15
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e002      	b.n	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80076fe:	4b24      	ldr	r3, [pc, #144]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d017      	beq.n	800773a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800770a:	4b21      	ldr	r3, [pc, #132]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800770c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770e:	0c1b      	lsrs	r3, r3, #16
 8007710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800771c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007720:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007724:	edd7 6a07 	vldr	s13, [r7, #28]
 8007728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007730:	ee17 2a90 	vmov	r2, s15
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	e002      	b.n	8007740 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007740:	4b13      	ldr	r3, [pc, #76]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800774c:	4b10      	ldr	r3, [pc, #64]	@ (8007790 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800774e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007750:	0e1b      	lsrs	r3, r3, #24
 8007752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
}
 8007782:	bf00      	nop
 8007784:	3724      	adds	r7, #36	@ 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	46020c00 	.word	0x46020c00
 8007794:	4b742400 	.word	0x4b742400
 8007798:	46000000 	.word	0x46000000
 800779c:	0800add4 	.word	0x0800add4

080077a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	@ 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80077a8:	4ba6      	ldr	r3, [pc, #664]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80077b2:	4ba4      	ldr	r3, [pc, #656]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80077bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	0a1b      	lsrs	r3, r3, #8
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	3301      	adds	r3, #1
 80077c8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80077ca:	4b9e      	ldr	r3, [pc, #632]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80077d6:	4b9b      	ldr	r3, [pc, #620]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d062      	beq.n	80078be <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f200 8081 	bhi.w	8007902 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d024      	beq.n	8007850 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d17a      	bne.n	8007902 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b89      	ldr	r3, [pc, #548]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800782e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007832:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800783e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800784e:	e08f      	b.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007850:	4b7c      	ldr	r3, [pc, #496]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800785c:	4b79      	ldr	r3, [pc, #484]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	0f1b      	lsrs	r3, r3, #28
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	e006      	b.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007868:	4b76      	ldr	r3, [pc, #472]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800786a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	0f1b      	lsrs	r3, r3, #28
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	4a76      	ldr	r2, [pc, #472]	@ (8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	ee07 3a90 	vmov	s15, r3
 8007898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789c:	ed97 6a02 	vldr	s12, [r7, #8]
 80078a0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80078a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80078b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078bc:	e058      	b.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80078cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80078d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80078e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80078e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80078ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80078f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80078f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007900:	e036      	b.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007902:	4b50      	ldr	r3, [pc, #320]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800790e:	4b4d      	ldr	r3, [pc, #308]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0f1b      	lsrs	r3, r3, #28
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	e006      	b.n	8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800791a:	4b4a      	ldr	r3, [pc, #296]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800791c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	0f1b      	lsrs	r3, r3, #28
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	4a49      	ldr	r2, [pc, #292]	@ (8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007952:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800796e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007970:	4b34      	ldr	r3, [pc, #208]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d017      	beq.n	80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800797c:	4b31      	ldr	r3, [pc, #196]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800797e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007980:	0a5b      	lsrs	r3, r3, #9
 8007982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800798e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007992:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007996:	edd7 6a07 	vldr	s13, [r7, #28]
 800799a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800799e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a2:	ee17 2a90 	vmov	r2, s15
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80079b2:	4b24      	ldr	r3, [pc, #144]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d017      	beq.n	80079ee <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80079be:	4b21      	ldr	r3, [pc, #132]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80079c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80079d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80079d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e4:	ee17 2a90 	vmov	r2, s15
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	e002      	b.n	80079f4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80079f4:	4b13      	ldr	r3, [pc, #76]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d017      	beq.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a00:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007a12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a26:	ee17 2a90 	vmov	r2, s15
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	609a      	str	r2, [r3, #8]
}
 8007a36:	bf00      	nop
 8007a38:	3724      	adds	r7, #36	@ 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	46020c00 	.word	0x46020c00
 8007a48:	4b742400 	.word	0x4b742400
 8007a4c:	46000000 	.word	0x46000000
 8007a50:	0800add4 	.word	0x0800add4

08007a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	@ 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007a5c:	4ba6      	ldr	r3, [pc, #664]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007a66:	4ba4      	ldr	r3, [pc, #656]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007a70:	4ba1      	ldr	r3, [pc, #644]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d062      	beq.n	8007b72 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	f200 8081 	bhi.w	8007bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d024      	beq.n	8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d17a      	bne.n	8007bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad2:	4b89      	ldr	r3, [pc, #548]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ae6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8007b02:	e08f      	b.n	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007b04:	4b7c      	ldr	r3, [pc, #496]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007b10:	4b79      	ldr	r3, [pc, #484]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	0f1b      	lsrs	r3, r3, #28
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	e006      	b.n	8007b2a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007b1c:	4b76      	ldr	r3, [pc, #472]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	0f1b      	lsrs	r3, r3, #28
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	4a76      	ldr	r2, [pc, #472]	@ (8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	ee07 3a90 	vmov	s15, r3
 8007b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b54:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b70:	e058      	b.n	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b84:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bb4:	e036      	b.n	8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007bb6:	4b50      	ldr	r3, [pc, #320]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	0f1b      	lsrs	r3, r3, #28
 8007bc8:	f003 030f 	and.w	r3, r3, #15
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007bce:	4b4a      	ldr	r3, [pc, #296]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bd4:	041b      	lsls	r3, r3, #16
 8007bd6:	0f1b      	lsrs	r3, r3, #28
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	4a49      	ldr	r2, [pc, #292]	@ (8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c06:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c22:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007c24:	4b34      	ldr	r3, [pc, #208]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d017      	beq.n	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c30:	4b31      	ldr	r3, [pc, #196]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c34:	0a5b      	lsrs	r3, r3, #9
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c56:	ee17 2a90 	vmov	r2, s15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007c66:	4b24      	ldr	r3, [pc, #144]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c72:	4b21      	ldr	r3, [pc, #132]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c88:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c98:	ee17 2a90 	vmov	r2, s15
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	605a      	str	r2, [r3, #4]
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007ca8:	4b13      	ldr	r3, [pc, #76]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007cb4:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb8:	0e1b      	lsrs	r3, r3, #24
 8007cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007cc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cda:	ee17 2a90 	vmov	r2, s15
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ce2:	e002      	b.n	8007cea <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
}
 8007cea:	bf00      	nop
 8007cec:	3724      	adds	r7, #36	@ 0x24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	46020c00 	.word	0x46020c00
 8007cfc:	4b742400 	.word	0x4b742400
 8007d00:	46000000 	.word	0x46000000
 8007d04:	0800add4 	.word	0x0800add4

08007d08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	@ 0x38
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d16:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007d1a:	430b      	orrs	r3, r1
 8007d1c:	d145      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007d1e:	4ba7      	ldr	r3, [pc, #668]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d28:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007d2a:	4ba4      	ldr	r3, [pc, #656]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d108      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d3e:	d104      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d46:	f001 bb5a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d58:	d114      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d60:	d110      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d62:	4b96      	ldr	r3, [pc, #600]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d70:	d103      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007d72:	23fa      	movs	r3, #250	@ 0xfa
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d76:	f001 bb42 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d80:	f001 bb3d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007d84:	4b8d      	ldr	r3, [pc, #564]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d90:	d107      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d98:	d103      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007d9a:	4b89      	ldr	r3, [pc, #548]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9e:	f001 bb2e 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da6:	f001 bb2a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dae:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007db2:	430b      	orrs	r3, r1
 8007db4:	d151      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007db6:	4b81      	ldr	r3, [pc, #516]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dbc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	2b80      	cmp	r3, #128	@ 0x80
 8007dc6:	d035      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	2b80      	cmp	r3, #128	@ 0x80
 8007dcc:	d841      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	2b60      	cmp	r3, #96	@ 0x60
 8007dd2:	d02a      	beq.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	2b60      	cmp	r3, #96	@ 0x60
 8007dd8:	d83b      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	2b40      	cmp	r3, #64	@ 0x40
 8007dde:	d009      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d835      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d012      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007df2:	e02e      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7ff fb77 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e02:	f001 bafc 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e06:	f107 0318 	add.w	r3, r7, #24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fcc8 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e14:	f001 baf3 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fe19 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e26:	f001 baea 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e2a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e30:	f001 bae5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e34:	4b61      	ldr	r3, [pc, #388]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e40:	d103      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007e42:	4b60      	ldr	r3, [pc, #384]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e46:	f001 bada 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e4e:	f001 bad6 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	f001 bad2 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007e62:	430b      	orrs	r3, r1
 8007e64:	d158      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e66:	4b55      	ldr	r3, [pc, #340]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e78:	d03b      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e80:	d846      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e88:	d02e      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e90:	d83e      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e98:	d00b      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea0:	d836      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eae:	d012      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007eb0:	e02e      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fb18 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ec0:	f001 ba9d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec4:	f107 0318 	add.w	r3, r7, #24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fc69 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ed2:	f001 ba94 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fdba 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee4:	f001 ba8b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007ee8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eee:	f001 ba86 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef2:	4b32      	ldr	r3, [pc, #200]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007efe:	d103      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007f00:	4b30      	ldr	r3, [pc, #192]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f04:	f001 ba7b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0c:	f001 ba77 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f14:	f001 ba73 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f1c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007f20:	430b      	orrs	r3, r1
 8007f22:	d126      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007f24:	4b25      	ldr	r3, [pc, #148]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007f30:	4b22      	ldr	r3, [pc, #136]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3c:	d106      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007f44:	4b1f      	ldr	r3, [pc, #124]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f48:	f001 ba59 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f58:	d107      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f60:	d103      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007f62:	4b19      	ldr	r3, [pc, #100]	@ (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f66:	f001 ba4a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6e:	f001 ba46 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f76:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	d16e      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f84:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007f88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007f90:	d03d      	beq.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007f98:	d85c      	bhi.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa0:	d014      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa8:	d854      	bhi.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01f      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fb6:	d012      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007fb8:	e04c      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007fba:	bf00      	nop
 8007fbc:	46020c00 	.word	0x46020c00
 8007fc0:	0007a120 	.word	0x0007a120
 8007fc4:	00f42400 	.word	0x00f42400
 8007fc8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff fa8b 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fda:	f001 ba10 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fde:	f107 0318 	add.w	r3, r7, #24
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fbdc 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fec:	f001 ba07 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007ff0:	4ba7      	ldr	r3, [pc, #668]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ffc:	d103      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007ffe:	4ba5      	ldr	r3, [pc, #660]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008002:	f001 b9fc 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800800a:	f001 b9f8 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800800e:	4ba0      	ldr	r3, [pc, #640]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b20      	cmp	r3, #32
 8008018:	d118      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800801a:	4b9d      	ldr	r3, [pc, #628]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008026:	4b9a      	ldr	r3, [pc, #616]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	0e1b      	lsrs	r3, r3, #24
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	e006      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008032:	4b97      	ldr	r3, [pc, #604]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	0e1b      	lsrs	r3, r3, #24
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	4a95      	ldr	r2, [pc, #596]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008048:	f001 b9d9 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	f001 b9d5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008058:	f001 b9d1 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008064:	430b      	orrs	r3, r1
 8008066:	d17f      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008068:	4b89      	ldr	r3, [pc, #548]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800806a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800806e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008072:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	2b00      	cmp	r3, #0
 8008078:	d165      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800807a:	4b85      	ldr	r3, [pc, #532]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800807c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008080:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008084:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800808c:	d034      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008094:	d853      	bhi.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800809c:	d00b      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a4:	d84b      	bhi.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d016      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080b2:	d009      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80080b4:	e043      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff fa16 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80080c4:	f001 b99b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c8:	f107 0318 	add.w	r3, r7, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fb67 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80080d6:	f001 b992 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80080da:	4b6d      	ldr	r3, [pc, #436]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e6:	d103      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80080e8:	4b6a      	ldr	r3, [pc, #424]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80080ea:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80080ec:	f001 b987 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80080f4:	f001 b983 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080f8:	4b65      	ldr	r3, [pc, #404]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0320 	and.w	r3, r3, #32
 8008100:	2b20      	cmp	r3, #32
 8008102:	d118      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008104:	4b62      	ldr	r3, [pc, #392]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008110:	4b5f      	ldr	r3, [pc, #380]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	0e1b      	lsrs	r3, r3, #24
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	e006      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800811c:	4b5c      	ldr	r3, [pc, #368]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800811e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	0e1b      	lsrs	r3, r3, #24
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	4a5b      	ldr	r2, [pc, #364]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800812c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008132:	f001 b964 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800813a:	f001 b960 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008142:	f001 b95c 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814c:	d108      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800814e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f9ca 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
 800815c:	f001 b94f 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
 8008164:	f001 b94b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816c:	1e51      	subs	r1, r2, #1
 800816e:	430b      	orrs	r3, r1
 8008170:	d136      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008172:	4b47      	ldr	r3, [pc, #284]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fe f9cc 	bl	8006520 <HAL_RCC_GetPCLK2Freq>
 8008188:	6378      	str	r0, [r7, #52]	@ 0x34
 800818a:	f001 b938 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	2b01      	cmp	r3, #1
 8008192:	d104      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008194:	f7fe f894 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008198:	6378      	str	r0, [r7, #52]	@ 0x34
 800819a:	f001 b930 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800819e:	4b3c      	ldr	r3, [pc, #240]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081aa:	d106      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d103      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80081b2:	4b3a      	ldr	r3, [pc, #232]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b6:	f001 b922 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80081ba:	4b35      	ldr	r3, [pc, #212]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80081bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d107      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d104      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80081ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081d4:	f001 b913 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
 80081dc:	f001 b90f 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	1e91      	subs	r1, r2, #2
 80081e6:	430b      	orrs	r3, r1
 80081e8:	d136      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80081ea:	4b29      	ldr	r3, [pc, #164]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80081ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081f0:	f003 030c 	and.w	r3, r3, #12
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081fc:	f7fe f97c 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008200:	6378      	str	r0, [r7, #52]	@ 0x34
 8008202:	f001 b8fc 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	2b04      	cmp	r3, #4
 800820a:	d104      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800820c:	f7fe f858 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008210:	6378      	str	r0, [r7, #52]	@ 0x34
 8008212:	f001 b8f4 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008216:	4b1e      	ldr	r3, [pc, #120]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800821e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008222:	d106      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	2b08      	cmp	r3, #8
 8008228:	d103      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800822a:	4b1c      	ldr	r3, [pc, #112]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800822c:	637b      	str	r3, [r7, #52]	@ 0x34
 800822e:	f001 b8e6 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008232:	4b17      	ldr	r3, [pc, #92]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b02      	cmp	r3, #2
 800823e:	d107      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d104      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	f001 b8d7 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	637b      	str	r3, [r7, #52]	@ 0x34
 8008254:	f001 b8d3 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800825c:	1f11      	subs	r1, r2, #4
 800825e:	430b      	orrs	r3, r1
 8008260:	d13f      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008262:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008268:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800826c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800826e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008274:	f7fe f940 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008278:	6378      	str	r0, [r7, #52]	@ 0x34
 800827a:	f001 b8c0 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	2b10      	cmp	r3, #16
 8008282:	d10d      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008284:	f7fe f81c 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008288:	6378      	str	r0, [r7, #52]	@ 0x34
 800828a:	f001 b8b8 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800828e:	bf00      	nop
 8008290:	46020c00 	.word	0x46020c00
 8008294:	02dc6c00 	.word	0x02dc6c00
 8008298:	0800add4 	.word	0x0800add4
 800829c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80082a0:	4ba8      	ldr	r3, [pc, #672]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ac:	d106      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d103      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80082b4:	4ba4      	ldr	r3, [pc, #656]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b8:	f001 b8a1 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80082bc:	4ba1      	ldr	r3, [pc, #644]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80082be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d107      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2b30      	cmp	r3, #48	@ 0x30
 80082ce:	d104      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80082d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d6:	f001 b892 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082de:	f001 b88e 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	f1a2 0108 	sub.w	r1, r2, #8
 80082ea:	430b      	orrs	r3, r1
 80082ec:	d136      	bne.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80082ee:	4b95      	ldr	r3, [pc, #596]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80082f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008300:	f7fe f8fa 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008304:	6378      	str	r0, [r7, #52]	@ 0x34
 8008306:	f001 b87a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	2b40      	cmp	r3, #64	@ 0x40
 800830e:	d104      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008310:	f7fd ffd6 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008314:	6378      	str	r0, [r7, #52]	@ 0x34
 8008316:	f001 b872 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800831a:	4b8a      	ldr	r3, [pc, #552]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008326:	d106      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	2b80      	cmp	r3, #128	@ 0x80
 800832c:	d103      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800832e:	4b86      	ldr	r3, [pc, #536]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
 8008332:	f001 b864 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008336:	4b83      	ldr	r3, [pc, #524]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b02      	cmp	r3, #2
 8008342:	d107      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	2bc0      	cmp	r3, #192	@ 0xc0
 8008348:	d104      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800834a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800834e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008350:	f001 b855 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
 8008358:	f001 b851 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800835c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008360:	f1a2 0110 	sub.w	r1, r2, #16
 8008364:	430b      	orrs	r3, r1
 8008366:	d139      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008368:	4b76      	ldr	r3, [pc, #472]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800836a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800836e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008372:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800837a:	f7fe f8bd 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 800837e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008380:	f001 b83d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838a:	d104      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800838c:	f7fd ff98 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008390:	6378      	str	r0, [r7, #52]	@ 0x34
 8008392:	f001 b834 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008396:	4b6b      	ldr	r3, [pc, #428]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083aa:	d103      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80083ac:	4b66      	ldr	r3, [pc, #408]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b0:	f001 b825 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80083b4:	4b63      	ldr	r3, [pc, #396]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d108      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083c8:	d104      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80083ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d0:	f001 b815 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d8:	f001 b811 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80083dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80083e4:	430b      	orrs	r3, r1
 80083e6:	d139      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80083e8:	4b56      	ldr	r3, [pc, #344]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80083ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d104      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083fa:	f7fe f87d 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 80083fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008400:	f000 bffd 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840a:	d104      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800840c:	f7fd ff58 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008410:	6378      	str	r0, [r7, #52]	@ 0x34
 8008412:	f000 bff4 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008416:	4b4b      	ldr	r3, [pc, #300]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008422:	d107      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800842a:	d103      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800842c:	4b46      	ldr	r3, [pc, #280]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008430:	f000 bfe5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008434:	4b43      	ldr	r3, [pc, #268]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b02      	cmp	r3, #2
 8008440:	d108      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008448:	d104      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800844a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008450:	f000 bfd5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
 8008458:	f000 bfd1 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800845c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008460:	f1a2 0120 	sub.w	r1, r2, #32
 8008464:	430b      	orrs	r3, r1
 8008466:	d158      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008468:	4b36      	ldr	r3, [pc, #216]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800846a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800847a:	f7fe f865 	bl	8006548 <HAL_RCC_GetPCLK3Freq>
 800847e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008480:	f000 bfbd 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	2b01      	cmp	r3, #1
 8008488:	d104      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800848a:	f7fd ff19 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800848e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008490:	f000 bfb5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008494:	4b2b      	ldr	r3, [pc, #172]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800849c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084a0:	d106      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d103      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80084a8:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ac:	f000 bfa7 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80084b0:	4b24      	ldr	r3, [pc, #144]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d107      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d104      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80084c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ca:	f000 bf98 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80084ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d11b      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d118      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084e0:	4b18      	ldr	r3, [pc, #96]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80084ec:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	0e1b      	lsrs	r3, r3, #24
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	e006      	b.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80084f8:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	0e1b      	lsrs	r3, r3, #24
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	4a11      	ldr	r2, [pc, #68]	@ (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850c:	637b      	str	r3, [r7, #52]	@ 0x34
 800850e:	f000 bf76 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	f000 bf72 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800851a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008522:	430b      	orrs	r3, r1
 8008524:	d172      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008526:	4b07      	ldr	r3, [pc, #28]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800852c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008530:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008538:	d10a      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800853a:	f7fd fec1 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800853e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008540:	f000 bf5d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008544:	46020c00 	.word	0x46020c00
 8008548:	00f42400 	.word	0x00f42400
 800854c:	0800add4 	.word	0x0800add4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008556:	d108      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008558:	f107 0318 	add.w	r3, r7, #24
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff f91f 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	f000 bf4a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008570:	f7fd ffa8 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8008574:	6378      	str	r0, [r7, #52]	@ 0x34
 8008576:	f000 bf42 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008580:	d122      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008582:	4bb0      	ldr	r3, [pc, #704]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b20      	cmp	r3, #32
 800858c:	d118      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800858e:	4bad      	ldr	r3, [pc, #692]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800859a:	4baa      	ldr	r3, [pc, #680]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	0e1b      	lsrs	r3, r3, #24
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	e006      	b.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80085a6:	4ba7      	ldr	r3, [pc, #668]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80085a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085ac:	041b      	lsls	r3, r3, #16
 80085ae:	0e1b      	lsrs	r3, r3, #24
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	4aa4      	ldr	r2, [pc, #656]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80085b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80085bc:	f000 bf1f 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c4:	f000 bf1b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80085c8:	4b9e      	ldr	r3, [pc, #632]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d4:	d107      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085dc:	d103      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 80085de:	4b9b      	ldr	r3, [pc, #620]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e2:	f000 bf0c 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80085e6:	4b97      	ldr	r3, [pc, #604]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f2:	d107      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80085f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085fa:	d103      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 80085fc:	4b93      	ldr	r3, [pc, #588]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	f000 befd 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
 8008608:	f000 bef9 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800860c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008610:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008614:	430b      	orrs	r3, r1
 8008616:	d158      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008618:	4b8a      	ldr	r3, [pc, #552]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800861a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	2b04      	cmp	r3, #4
 8008628:	d84b      	bhi.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800862a:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008669 	.word	0x08008669
 8008634:	08008645 	.word	0x08008645
 8008638:	08008657 	.word	0x08008657
 800863c:	08008673 	.word	0x08008673
 8008640:	0800867d 	.word	0x0800867d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe ff4f 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008652:	f000 bed4 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008656:	f107 030c 	add.w	r3, r7, #12
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff f9fa 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008664:	f000 becb 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008668:	f7fd ff2c 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 800866c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800866e:	f000 bec6 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008672:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008678:	f000 bec1 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800867c:	4b71      	ldr	r3, [pc, #452]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b20      	cmp	r3, #32
 8008686:	d118      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008688:	4b6e      	ldr	r3, [pc, #440]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008694:	4b6b      	ldr	r3, [pc, #428]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	0e1b      	lsrs	r3, r3, #24
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	e006      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80086a0:	4b68      	ldr	r3, [pc, #416]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086a6:	041b      	lsls	r3, r3, #16
 80086a8:	0e1b      	lsrs	r3, r3, #24
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	4a66      	ldr	r2, [pc, #408]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80086b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086b6:	f000 bea2 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086be:	f000 be9e 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c6:	f000 be9a 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80086ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ce:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80086d2:	430b      	orrs	r3, r1
 80086d4:	d167      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80086d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80086d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80086e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086e8:	d036      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086f0:	d855      	bhi.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086f8:	d029      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008700:	d84d      	bhi.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008708:	d013      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008710:	d845      	bhi.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	2b00      	cmp	r3, #0
 8008716:	d015      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800871e:	d13e      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fee1 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800872e:	f000 be66 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff f98c 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008740:	f000 be5d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008744:	f7fd febe 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8008748:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800874a:	f000 be58 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800874e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008754:	f000 be53 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008758:	4b3a      	ldr	r3, [pc, #232]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b20      	cmp	r3, #32
 8008762:	d118      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008764:	4b37      	ldr	r3, [pc, #220]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008770:	4b34      	ldr	r3, [pc, #208]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	0e1b      	lsrs	r3, r3, #24
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	e006      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800877c:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800877e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	4a2f      	ldr	r2, [pc, #188]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800878c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008790:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008792:	f000 be34 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800879a:	f000 be30 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a2:	f000 be2c 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80087a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087aa:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80087ae:	430b      	orrs	r3, r1
 80087b0:	d152      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80087b2:	4b24      	ldr	r3, [pc, #144]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80087b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80087c4:	f7fd fe98 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 80087c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80087ca:	f000 be18 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087d4:	d104      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80087d6:	f7fd fd73 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80087da:	6378      	str	r0, [r7, #52]	@ 0x34
 80087dc:	f000 be0f 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80087e0:	4b18      	ldr	r3, [pc, #96]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ec:	d107      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087f4:	d103      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 80087f6:	4b15      	ldr	r3, [pc, #84]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087fa:	f000 be00 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80087fe:	4b11      	ldr	r3, [pc, #68]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b20      	cmp	r3, #32
 8008808:	d122      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008810:	d11e      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008812:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800881e:	4b09      	ldr	r3, [pc, #36]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	0e1b      	lsrs	r3, r3, #24
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	e006      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800882a:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800882c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008830:	041b      	lsls	r3, r3, #16
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	4a03      	ldr	r2, [pc, #12]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800883a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800883e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008840:	f000 bddd 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008844:	46020c00 	.word	0x46020c00
 8008848:	0800add4 	.word	0x0800add4
 800884c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	f000 bdd3 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008860:	430b      	orrs	r3, r1
 8008862:	d14c      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008864:	4ba8      	ldr	r3, [pc, #672]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800886a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800886e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008876:	f7fd fe3f 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 800887a:	6378      	str	r0, [r7, #52]	@ 0x34
 800887c:	f000 bdbf 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008886:	d104      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008888:	f7fd fd1a 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800888c:	6378      	str	r0, [r7, #52]	@ 0x34
 800888e:	f000 bdb6 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008892:	4b9d      	ldr	r3, [pc, #628]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800889e:	d107      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088a6:	d103      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80088a8:	4b98      	ldr	r3, [pc, #608]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ac:	f000 bda7 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80088b0:	4b95      	ldr	r3, [pc, #596]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d11c      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088c2:	d118      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088c4:	4b90      	ldr	r3, [pc, #576]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80088d0:	4b8d      	ldr	r3, [pc, #564]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	0e1b      	lsrs	r3, r3, #24
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	e006      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80088dc:	4b8a      	ldr	r3, [pc, #552]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80088de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	4a89      	ldr	r2, [pc, #548]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80088ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f2:	f000 bd84 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fa:	f000 bd80 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80088fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008902:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008906:	430b      	orrs	r3, r1
 8008908:	d158      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800890a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800890c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008910:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008914:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	2bc0      	cmp	r3, #192	@ 0xc0
 800891a:	d028      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008920:	d848      	bhi.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	2b80      	cmp	r3, #128	@ 0x80
 8008926:	d00e      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	2b80      	cmp	r3, #128	@ 0x80
 800892c:	d842      	bhi.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	2b40      	cmp	r3, #64	@ 0x40
 8008938:	d014      	beq.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800893a:	e03b      	b.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800893c:	f7fd fe04 	bl	8006548 <HAL_RCC_GetPCLK3Freq>
 8008940:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008942:	f000 bd5c 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008946:	4b70      	ldr	r3, [pc, #448]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800894e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008952:	d103      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8008954:	4b6d      	ldr	r3, [pc, #436]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008958:	f000 bd51 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008960:	f000 bd4d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008964:	f7fd fcac 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008968:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800896a:	f000 bd48 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800896e:	4b66      	ldr	r3, [pc, #408]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b20      	cmp	r3, #32
 8008978:	d118      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800897a:	4b63      	ldr	r3, [pc, #396]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8008986:	4b60      	ldr	r3, [pc, #384]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	0e1b      	lsrs	r3, r3, #24
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	e006      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8008992:	4b5d      	ldr	r3, [pc, #372]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	0e1b      	lsrs	r3, r3, #24
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	4a5b      	ldr	r2, [pc, #364]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80089a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089a8:	f000 bd29 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b0:	f000 bd25 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b8:	f000 bd21 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80089bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80089c4:	430b      	orrs	r3, r1
 80089c6:	d14c      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80089c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80089d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80089da:	f7fd fd8d 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 80089de:	6378      	str	r0, [r7, #52]	@ 0x34
 80089e0:	f000 bd0d 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ea:	d104      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80089ec:	f7fd fc68 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80089f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80089f2:	f000 bd04 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80089f6:	4b44      	ldr	r3, [pc, #272]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a02:	d107      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a0a:	d103      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8008a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a10:	f000 bcf5 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008a14:	4b3c      	ldr	r3, [pc, #240]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d11c      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008a26:	d118      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a28:	4b37      	ldr	r3, [pc, #220]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8008a34:	4b34      	ldr	r3, [pc, #208]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	0e1b      	lsrs	r3, r3, #24
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	e006      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008a40:	4b31      	ldr	r3, [pc, #196]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a46:	041b      	lsls	r3, r3, #16
 8008a48:	0e1b      	lsrs	r3, r3, #24
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	4a30      	ldr	r2, [pc, #192]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a56:	f000 bcd2 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5e:	f000 bcce 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8008a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a66:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8008a6a:	430b      	orrs	r3, r1
 8008a6c:	d152      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8008a6e:	4b26      	ldr	r3, [pc, #152]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a74:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008a78:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a80:	f7fd fd3a 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008a84:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a86:	f000 bcba 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a90:	d104      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a92:	f7fd fc15 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008a96:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a98:	f000 bcb1 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa8:	d107      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ab0:	d103      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8008ab2:	4b16      	ldr	r3, [pc, #88]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab6:	f000 bca2 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8008aba:	4b13      	ldr	r3, [pc, #76]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d11c      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008acc:	d118      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8008ada:	4b0b      	ldr	r3, [pc, #44]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	0e1b      	lsrs	r3, r3, #24
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	e006      	b.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8008ae6:	4b08      	ldr	r3, [pc, #32]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008aec:	041b      	lsls	r3, r3, #16
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	4a06      	ldr	r2, [pc, #24]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	f000 bc7f 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b04:	f000 bc7b 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008b08:	46020c00 	.word	0x46020c00
 8008b0c:	00f42400 	.word	0x00f42400
 8008b10:	0800add4 	.word	0x0800add4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8008b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b18:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	d14c      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8008b20:	4ba6      	ldr	r3, [pc, #664]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b26:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008b2a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b32:	f7fd fce1 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008b36:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b38:	f000 bc61 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b42:	d104      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b44:	f7fd fbbc 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008b48:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b4a:	f000 bc58 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8008b4e:	4b9b      	ldr	r3, [pc, #620]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5a:	d107      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b62:	d103      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8008b64:	4b96      	ldr	r3, [pc, #600]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b68:	f000 bc49 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8008b6c:	4b93      	ldr	r3, [pc, #588]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d11c      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b7e:	d118      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b80:	4b8e      	ldr	r3, [pc, #568]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8008b8c:	4b8b      	ldr	r3, [pc, #556]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	0e1b      	lsrs	r3, r3, #24
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	e006      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8008b98:	4b88      	ldr	r3, [pc, #544]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	4a87      	ldr	r2, [pc, #540]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8008ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bae:	f000 bc26 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb6:	f000 bc22 	b.w	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bbe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008bc2:	430b      	orrs	r3, r1
 8008bc4:	d164      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bd0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d120      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008bd8:	4b78      	ldr	r3, [pc, #480]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d117      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008be4:	4b75      	ldr	r3, [pc, #468]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008bf0:	4b72      	ldr	r3, [pc, #456]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	0e1b      	lsrs	r3, r3, #24
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	e006      	b.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8008bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	0e1b      	lsrs	r3, r3, #24
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8008c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c12:	e3f4      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c18:	e3f1      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008c1a:	4b68      	ldr	r3, [pc, #416]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c28:	d112      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c30:	d10e      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c32:	4b62      	ldr	r3, [pc, #392]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c40:	d102      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8008c42:	23fa      	movs	r3, #250	@ 0xfa
 8008c44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c46:	e3da      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8008c48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c4e:	e3d6      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008c50:	4b5a      	ldr	r3, [pc, #360]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c64:	d102      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8008c66:	4b56      	ldr	r3, [pc, #344]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6a:	e3c8      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008c6c:	4b53      	ldr	r3, [pc, #332]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d107      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c80:	d103      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8008c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c88:	e3b9      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8e:	e3b6      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	d164      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008c9c:	4b47      	ldr	r3, [pc, #284]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ca2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ca6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d120      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cae:	4b43      	ldr	r3, [pc, #268]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d117      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cba:	4b40      	ldr	r3, [pc, #256]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8008cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	0e1b      	lsrs	r3, r3, #24
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	e006      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	0e1b      	lsrs	r3, r3, #24
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	4a38      	ldr	r2, [pc, #224]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8008ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce8:	e389      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	e386      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008cf0:	4b32      	ldr	r3, [pc, #200]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cfe:	d112      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d06:	d10e      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d08:	4b2c      	ldr	r3, [pc, #176]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8008d18:	23fa      	movs	r3, #250	@ 0xfa
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d1c:	e36f      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8008d1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d24:	e36b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008d26:	4b25      	ldr	r3, [pc, #148]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d32:	d106      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d3a:	d102      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8008d3c:	4b20      	ldr	r3, [pc, #128]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d40:	e35d      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008d42:	4b1e      	ldr	r3, [pc, #120]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d56:	d103      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8008d58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	e34e      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d64:	e34b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d6a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	d14e      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008d72:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d78:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008d7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d84:	f7fd fbb8 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008d88:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d8a:	e338      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d9a:	d119      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008da2:	d115      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008da4:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8008da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db2:	d109      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8008db4:	23fa      	movs	r3, #250	@ 0xfa
 8008db6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008db8:	e321      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008dba:	bf00      	nop
 8008dbc:	46020c00 	.word	0x46020c00
 8008dc0:	00f42400 	.word	0x00f42400
 8008dc4:	0800add4 	.word	0x0800add4
      }
      else
      {
        frequency = LSI_VALUE;
 8008dc8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008dce:	e316      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008dd0:	4ba8      	ldr	r3, [pc, #672]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ddc:	d106      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008de4:	d102      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8008de6:	4ba4      	ldr	r3, [pc, #656]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dea:	e308      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008dec:	4ba1      	ldr	r3, [pc, #644]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d107      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008e00:	d103      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8008e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e08:	e2f9      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0e:	e2f6      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e14:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	d12d      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008e1c:	4b95      	ldr	r3, [pc, #596]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e22:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008e26:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008e28:	4b92      	ldr	r3, [pc, #584]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e34:	d105      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8008e3c:	4b8e      	ldr	r3, [pc, #568]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e40:	e2dd      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fb4c 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e58:	e2d1      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e60:	d107      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e62:	f107 0318 	add.w	r3, r7, #24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fc9a 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e70:	e2c5      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e2c2      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008e80:	430b      	orrs	r3, r1
 8008e82:	d156      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008e84:	4b7b      	ldr	r3, [pc, #492]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e8a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e96:	d028      	beq.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e9e:	d845      	bhi.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ea6:	d013      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eae:	d83d      	bhi.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008ebe:	e035      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008ec0:	f7fd fb2e 	bl	8006520 <HAL_RCC_GetPCLK2Freq>
 8008ec4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ec6:	e29a      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008ec8:	f7fd f9fa 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008ecc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ece:	e296      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ed0:	4b68      	ldr	r3, [pc, #416]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008edc:	d102      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8008ede:	4b66      	ldr	r3, [pc, #408]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ee2:	e28c      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ee8:	e289      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008eea:	4b62      	ldr	r3, [pc, #392]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	d117      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8008f02:	4b5c      	ldr	r3, [pc, #368]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	0e1b      	lsrs	r3, r3, #24
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	e006      	b.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8008f0e:	4b59      	ldr	r3, [pc, #356]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	0e1b      	lsrs	r3, r3, #24
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	4a57      	ldr	r2, [pc, #348]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8008f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f24:	e26b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f2a:	e268      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f30:	e265      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f36:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008f3a:	430b      	orrs	r3, r1
 8008f3c:	d156      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f48:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f50:	d028      	beq.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f58:	d845      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f60:	d013      	beq.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f68:	d83d      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f76:	d004      	beq.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8008f78:	e035      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008f7a:	f7fd fabd 	bl	80064f8 <HAL_RCC_GetPCLK1Freq>
 8008f7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f80:	e23d      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008f82:	f7fd f99d 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8008f86:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f88:	e239      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f96:	d102      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8008f98:	4b37      	ldr	r3, [pc, #220]	@ (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f9c:	e22f      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fa2:	e22c      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008fa4:	4b33      	ldr	r3, [pc, #204]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d117      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fb0:	4b30      	ldr	r3, [pc, #192]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8008fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	0e1b      	lsrs	r3, r3, #24
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	e006      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fce:	041b      	lsls	r3, r3, #16
 8008fd0:	0e1b      	lsrs	r3, r3, #24
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	4a29      	ldr	r2, [pc, #164]	@ (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8008fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fde:	e20e      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe4:	e20b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fea:	e208      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	d17c      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ffe:	f003 0318 	and.w	r3, r3, #24
 8009002:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	2b18      	cmp	r3, #24
 8009008:	d870      	bhi.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009081 	.word	0x08009081
 8009014:	080090ed 	.word	0x080090ed
 8009018:	080090ed 	.word	0x080090ed
 800901c:	080090ed 	.word	0x080090ed
 8009020:	080090ed 	.word	0x080090ed
 8009024:	080090ed 	.word	0x080090ed
 8009028:	080090ed 	.word	0x080090ed
 800902c:	080090ed 	.word	0x080090ed
 8009030:	08009089 	.word	0x08009089
 8009034:	080090ed 	.word	0x080090ed
 8009038:	080090ed 	.word	0x080090ed
 800903c:	080090ed 	.word	0x080090ed
 8009040:	080090ed 	.word	0x080090ed
 8009044:	080090ed 	.word	0x080090ed
 8009048:	080090ed 	.word	0x080090ed
 800904c:	080090ed 	.word	0x080090ed
 8009050:	08009091 	.word	0x08009091
 8009054:	080090ed 	.word	0x080090ed
 8009058:	080090ed 	.word	0x080090ed
 800905c:	080090ed 	.word	0x080090ed
 8009060:	080090ed 	.word	0x080090ed
 8009064:	080090ed 	.word	0x080090ed
 8009068:	080090ed 	.word	0x080090ed
 800906c:	080090ed 	.word	0x080090ed
 8009070:	080090ab 	.word	0x080090ab
 8009074:	46020c00 	.word	0x46020c00
 8009078:	00f42400 	.word	0x00f42400
 800907c:	0800add4 	.word	0x0800add4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009080:	f7fd fa62 	bl	8006548 <HAL_RCC_GetPCLK3Freq>
 8009084:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009086:	e1ba      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009088:	f7fd f91a 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800908c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800908e:	e1b6      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009090:	4b9f      	ldr	r3, [pc, #636]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800909c:	d102      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800909e:	4b9d      	ldr	r3, [pc, #628]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090a2:	e1ac      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a8:	e1a9      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80090aa:	4b99      	ldr	r3, [pc, #612]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	d117      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090b6:	4b96      	ldr	r3, [pc, #600]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 80090c2:	4b93      	ldr	r3, [pc, #588]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	0e1b      	lsrs	r3, r3, #24
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	e006      	b.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 80090ce:	4b90      	ldr	r3, [pc, #576]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80090d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	0e1b      	lsrs	r3, r3, #24
 80090d8:	f003 030f 	and.w	r3, r3, #15
 80090dc:	4a8e      	ldr	r2, [pc, #568]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80090de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090e4:	e18b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ea:	e188      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090f0:	e185      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80090f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80090fa:	430b      	orrs	r3, r1
 80090fc:	d155      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80090fe:	4b84      	ldr	r3, [pc, #528]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009104:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009108:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009110:	d013      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009118:	d844      	bhi.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009120:	d013      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009128:	d83c      	bhi.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d014      	beq.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009136:	d014      	beq.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 8009138:	e034      	b.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913a:	f107 0318 	add.w	r3, r7, #24
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fb2e 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009148:	e159      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe f9cc 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009158:	e151      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800915a:	f7fd f8b1 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800915e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009160:	e14d      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009162:	4b6b      	ldr	r3, [pc, #428]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b20      	cmp	r3, #32
 800916c:	d117      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800916e:	4b68      	ldr	r3, [pc, #416]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800917a:	4b65      	ldr	r3, [pc, #404]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	0e1b      	lsrs	r3, r3, #24
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	e006      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 8009186:	4b62      	ldr	r3, [pc, #392]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	0e1b      	lsrs	r3, r3, #24
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	4a60      	ldr	r2, [pc, #384]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800919c:	e12f      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a2:	e12c      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a8:	e129      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80091aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ae:	1e59      	subs	r1, r3, #1
 80091b0:	ea52 0301 	orrs.w	r3, r2, r1
 80091b4:	d13c      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80091b6:	4b56      	ldr	r3, [pc, #344]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80091b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091bc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80091c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091c8:	d027      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091d0:	d82b      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091d8:	d017      	beq.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 80091da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091e0:	d823      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091ee:	d004      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80091f0:	e01b      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80091f2:	f7fd f865 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80091f6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80091f8:	e101      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe f974 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009208:	e0f9      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920a:	f107 0318 	add.w	r3, r7, #24
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe fac6 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009218:	e0f1      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800921a:	f107 030c 	add.w	r3, r7, #12
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe fc18 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009228:	e0e9      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922e:	e0e6      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009234:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009238:	430b      	orrs	r3, r1
 800923a:	d131      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800923c:	4b34      	ldr	r3, [pc, #208]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800923e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009246:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009248:	4b31      	ldr	r3, [pc, #196]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800924a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b02      	cmp	r3, #2
 8009254:	d106      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800925c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009260:	637b      	str	r3, [r7, #52]	@ 0x34
 8009262:	e0cc      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009264:	4b2a      	ldr	r3, [pc, #168]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800926a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800926e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009272:	d112      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800927a:	d10e      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800927c:	4b24      	ldr	r3, [pc, #144]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800927e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800928a:	d102      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800928c:	23fa      	movs	r3, #250	@ 0xfa
 800928e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009290:	e0b5      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8009292:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009298:	e0b1      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	637b      	str	r3, [r7, #52]	@ 0x34
 800929e:	e0ae      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80092a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80092a8:	430b      	orrs	r3, r1
 80092aa:	d13b      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80092ac:	4b18      	ldr	r3, [pc, #96]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80092ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80092b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80092b8:	4b15      	ldr	r3, [pc, #84]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092c4:	d105      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 80092cc:	4b13      	ldr	r3, [pc, #76]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	e095      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80092d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092de:	d106      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e6:	d102      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 80092e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ec:	e087      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80092ee:	4b08      	ldr	r3, [pc, #32]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092fa:	d106      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009302:	d102      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8009304:	4b03      	ldr	r3, [pc, #12]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
 8009308:	e079      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
 800930e:	e076      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009310:	46020c00 	.word	0x46020c00
 8009314:	00f42400 	.word	0x00f42400
 8009318:	0800add4 	.word	0x0800add4
 800931c:	02dc6c00 	.word	0x02dc6c00
 8009320:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8009324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009328:	1e99      	subs	r1, r3, #2
 800932a:	ea52 0301 	orrs.w	r3, r2, r1
 800932e:	d120      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8009330:	4b35      	ldr	r3, [pc, #212]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8009332:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009348:	d008      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800934a:	e00f      	b.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fb7f 	bl	8007a54 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800935a:	e050      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935c:	f107 0318 	add.w	r3, r7, #24
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fa1d 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800936a:	e048      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009370:	e045      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8009372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009376:	f1a3 0108 	sub.w	r1, r3, #8
 800937a:	ea52 0301 	orrs.w	r3, r2, r1
 800937e:	d13c      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8009380:	4b21      	ldr	r3, [pc, #132]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8009382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009386:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800938a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800938c:	4b1e      	ldr	r3, [pc, #120]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009398:	d105      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2b00      	cmp	r3, #0
 800939e:	d102      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 80093a0:	4b1a      	ldr	r3, [pc, #104]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a4:	e02b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80093a6:	4b18      	ldr	r3, [pc, #96]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093b2:	d106      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ba:	d102      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 80093bc:	4b14      	ldr	r3, [pc, #80]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e01d      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c8:	d107      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe f88c 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	e011      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80093e0:	d108      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe f880 	bl	80074ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f2:	e004      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f8:	e001      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80093fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009400:	4618      	mov	r0, r3
 8009402:	3738      	adds	r7, #56	@ 0x38
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	46020c00 	.word	0x46020c00
 800940c:	00f42400 	.word	0x00f42400
 8009410:	007a1200 	.word	0x007a1200

08009414 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800941c:	4b47      	ldr	r3, [pc, #284]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a46      	ldr	r2, [pc, #280]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009426:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009428:	f7f8 f88a 	bl	8001540 <HAL_GetTick>
 800942c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800942e:	e008      	b.n	8009442 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009430:	f7f8 f886 	bl	8001540 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e077      	b.n	8009532 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009442:	4b3e      	ldr	r3, [pc, #248]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800944e:	4b3b      	ldr	r3, [pc, #236]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009456:	f023 0303 	bic.w	r3, r3, #3
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6811      	ldr	r1, [r2, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	6852      	ldr	r2, [r2, #4]
 8009462:	3a01      	subs	r2, #1
 8009464:	0212      	lsls	r2, r2, #8
 8009466:	430a      	orrs	r2, r1
 8009468:	4934      	ldr	r1, [pc, #208]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 800946a:	4313      	orrs	r3, r2
 800946c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800946e:	4b33      	ldr	r3, [pc, #204]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009472:	4b33      	ldr	r3, [pc, #204]	@ (8009540 <RCCEx_PLL2_Config+0x12c>)
 8009474:	4013      	ands	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6892      	ldr	r2, [r2, #8]
 800947a:	3a01      	subs	r2, #1
 800947c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	68d2      	ldr	r2, [r2, #12]
 8009484:	3a01      	subs	r2, #1
 8009486:	0252      	lsls	r2, r2, #9
 8009488:	b292      	uxth	r2, r2
 800948a:	4311      	orrs	r1, r2
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6912      	ldr	r2, [r2, #16]
 8009490:	3a01      	subs	r2, #1
 8009492:	0412      	lsls	r2, r2, #16
 8009494:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009498:	4311      	orrs	r1, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6952      	ldr	r2, [r2, #20]
 800949e:	3a01      	subs	r2, #1
 80094a0:	0612      	lsls	r2, r2, #24
 80094a2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80094a6:	430a      	orrs	r2, r1
 80094a8:	4924      	ldr	r1, [pc, #144]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80094ae:	4b23      	ldr	r3, [pc, #140]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	f023 020c 	bic.w	r2, r3, #12
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	4920      	ldr	r1, [pc, #128]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80094c0:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	491c      	ldr	r1, [pc, #112]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80094ce:	4b1b      	ldr	r3, [pc, #108]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	4a1a      	ldr	r2, [pc, #104]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094d4:	f023 0310 	bic.w	r3, r3, #16
 80094d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094da:	4b18      	ldr	r3, [pc, #96]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	69d2      	ldr	r2, [r2, #28]
 80094ea:	00d2      	lsls	r2, r2, #3
 80094ec:	4913      	ldr	r1, [pc, #76]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80094f2:	4b12      	ldr	r3, [pc, #72]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	4a11      	ldr	r2, [pc, #68]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 80094f8:	f043 0310 	orr.w	r3, r3, #16
 80094fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80094fe:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a0e      	ldr	r2, [pc, #56]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009508:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800950a:	f7f8 f819 	bl	8001540 <HAL_GetTick>
 800950e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009510:	e008      	b.n	8009524 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009512:	f7f8 f815 	bl	8001540 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e006      	b.n	8009532 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <RCCEx_PLL2_Config+0x128>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f0      	beq.n	8009512 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009530:	2300      	movs	r3, #0

}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	46020c00 	.word	0x46020c00
 8009540:	80800000 	.word	0x80800000

08009544 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800954c:	4b47      	ldr	r3, [pc, #284]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a46      	ldr	r2, [pc, #280]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009556:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009558:	f7f7 fff2 	bl	8001540 <HAL_GetTick>
 800955c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800955e:	e008      	b.n	8009572 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009560:	f7f7 ffee 	bl	8001540 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e077      	b.n	8009662 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009572:	4b3e      	ldr	r3, [pc, #248]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800957e:	4b3b      	ldr	r3, [pc, #236]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009582:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6811      	ldr	r1, [r2, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	3a01      	subs	r2, #1
 8009594:	0212      	lsls	r2, r2, #8
 8009596:	430a      	orrs	r2, r1
 8009598:	4934      	ldr	r1, [pc, #208]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 800959a:	4313      	orrs	r3, r2
 800959c:	630b      	str	r3, [r1, #48]	@ 0x30
 800959e:	4b33      	ldr	r3, [pc, #204]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095a2:	4b33      	ldr	r3, [pc, #204]	@ (8009670 <RCCEx_PLL3_Config+0x12c>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6892      	ldr	r2, [r2, #8]
 80095aa:	3a01      	subs	r2, #1
 80095ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68d2      	ldr	r2, [r2, #12]
 80095b4:	3a01      	subs	r2, #1
 80095b6:	0252      	lsls	r2, r2, #9
 80095b8:	b292      	uxth	r2, r2
 80095ba:	4311      	orrs	r1, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6912      	ldr	r2, [r2, #16]
 80095c0:	3a01      	subs	r2, #1
 80095c2:	0412      	lsls	r2, r2, #16
 80095c4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80095c8:	4311      	orrs	r1, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6952      	ldr	r2, [r2, #20]
 80095ce:	3a01      	subs	r2, #1
 80095d0:	0612      	lsls	r2, r2, #24
 80095d2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80095d6:	430a      	orrs	r2, r1
 80095d8:	4924      	ldr	r1, [pc, #144]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80095de:	4b23      	ldr	r3, [pc, #140]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e2:	f023 020c 	bic.w	r2, r3, #12
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	4920      	ldr	r1, [pc, #128]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80095f0:	4b1e      	ldr	r3, [pc, #120]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	491c      	ldr	r1, [pc, #112]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80095fe:	4b1b      	ldr	r3, [pc, #108]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009602:	4a1a      	ldr	r2, [pc, #104]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009604:	f023 0310 	bic.w	r3, r3, #16
 8009608:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800960a:	4b18      	ldr	r3, [pc, #96]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 800960c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800960e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009612:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	69d2      	ldr	r2, [r2, #28]
 800961a:	00d2      	lsls	r2, r2, #3
 800961c:	4913      	ldr	r1, [pc, #76]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 800961e:	4313      	orrs	r3, r2
 8009620:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009622:	4b12      	ldr	r3, [pc, #72]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	4a11      	ldr	r2, [pc, #68]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009628:	f043 0310 	orr.w	r3, r3, #16
 800962c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800962e:	4b0f      	ldr	r3, [pc, #60]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a0e      	ldr	r2, [pc, #56]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009638:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800963a:	f7f7 ff81 	bl	8001540 <HAL_GetTick>
 800963e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009640:	e008      	b.n	8009654 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009642:	f7f7 ff7d 	bl	8001540 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	2b02      	cmp	r3, #2
 800964e:	d901      	bls.n	8009654 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e006      	b.n	8009662 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <RCCEx_PLL3_Config+0x128>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0f0      	beq.n	8009642 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	46020c00 	.word	0x46020c00
 8009670:	80800000 	.word	0x80800000

08009674 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af02      	add	r7, sp, #8
 800967a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009680:	f7f7 ff5e 	bl	8001540 <HAL_GetTick>
 8009684:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d102      	bne.n	8009692 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]
 8009690:	e137      	b.n	8009902 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a76      	ldr	r2, [pc, #472]	@ (8009870 <HAL_XSPI_Init+0x1fc>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d008      	beq.n	80096ae <HAL_XSPI_Init+0x3a>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a74      	ldr	r2, [pc, #464]	@ (8009874 <HAL_XSPI_Init+0x200>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <HAL_XSPI_Init+0x3a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a73      	ldr	r2, [pc, #460]	@ (8009878 <HAL_XSPI_Init+0x204>)
 80096ac:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a72      	ldr	r2, [pc, #456]	@ (800987c <HAL_XSPI_Init+0x208>)
 80096b4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a6d      	ldr	r2, [pc, #436]	@ (8009870 <HAL_XSPI_Init+0x1fc>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d008      	beq.n	80096d2 <HAL_XSPI_Init+0x5e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a6b      	ldr	r2, [pc, #428]	@ (8009874 <HAL_XSPI_Init+0x200>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d003      	beq.n	80096d2 <HAL_XSPI_Init+0x5e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a6a      	ldr	r2, [pc, #424]	@ (8009878 <HAL_XSPI_Init+0x204>)
 80096d0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a66      	ldr	r2, [pc, #408]	@ (8009870 <HAL_XSPI_Init+0x1fc>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d008      	beq.n	80096ee <HAL_XSPI_Init+0x7a>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a64      	ldr	r2, [pc, #400]	@ (8009874 <HAL_XSPI_Init+0x200>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d003      	beq.n	80096ee <HAL_XSPI_Init+0x7a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a63      	ldr	r2, [pc, #396]	@ (8009878 <HAL_XSPI_Init+0x204>)
 80096ec:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f040 8102 	bne.w	8009902 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f7 f93e 	bl	8000980 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8009704:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8ff 	bl	800990c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	4b5a      	ldr	r3, [pc, #360]	@ (8009880 <HAL_XSPI_Init+0x20c>)
 8009716:	4013      	ands	r3, r2
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	68d1      	ldr	r1, [r2, #12]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6912      	ldr	r2, [r2, #16]
 8009720:	0412      	lsls	r2, r2, #16
 8009722:	4311      	orrs	r1, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6952      	ldr	r2, [r2, #20]
 8009728:	3a01      	subs	r2, #1
 800972a:	0212      	lsls	r2, r2, #8
 800972c:	4311      	orrs	r1, r2
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	69d2      	ldr	r2, [r2, #28]
 8009732:	4311      	orrs	r1, r2
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6812      	ldr	r2, [r2, #0]
 8009738:	430b      	orrs	r3, r1
 800973a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a4b      	ldr	r2, [pc, #300]	@ (8009870 <HAL_XSPI_Init+0x1fc>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d00e      	beq.n	8009764 <HAL_XSPI_Init+0xf0>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a4a      	ldr	r2, [pc, #296]	@ (8009874 <HAL_XSPI_Init+0x200>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d009      	beq.n	8009764 <HAL_XSPI_Init+0xf0>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a48      	ldr	r2, [pc, #288]	@ (8009878 <HAL_XSPI_Init+0x204>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d004      	beq.n	8009764 <HAL_XSPI_Init+0xf0>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a49      	ldr	r2, [pc, #292]	@ (8009884 <HAL_XSPI_Init+0x210>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d10a      	bne.n	800977a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f023 0108 	bic.w	r1, r3, #8
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a1a      	ldr	r2, [r3, #32]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	041a      	lsls	r2, r3, #16
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a30      	ldr	r2, [pc, #192]	@ (8009870 <HAL_XSPI_Init+0x1fc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00e      	beq.n	80097d0 <HAL_XSPI_Init+0x15c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009874 <HAL_XSPI_Init+0x200>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d009      	beq.n	80097d0 <HAL_XSPI_Init+0x15c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009878 <HAL_XSPI_Init+0x204>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d004      	beq.n	80097d0 <HAL_XSPI_Init+0x15c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009884 <HAL_XSPI_Init+0x210>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10a      	bne.n	80097e6 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80097ee:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	3b01      	subs	r3, #1
 8009800:	021a      	lsls	r2, r3, #8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	2120      	movs	r1, #32
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f887 	bl	800992a <XSPI_WaitFlagStateUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d16d      	bne.n	8009902 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a0e      	ldr	r2, [pc, #56]	@ (800987c <HAL_XSPI_Init+0x208>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d004      	beq.n	8009850 <HAL_XSPI_Init+0x1dc>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a0f      	ldr	r2, [pc, #60]	@ (8009888 <HAL_XSPI_Init+0x214>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d11d      	bne.n	800988c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2200      	movs	r2, #0
 800985a:	2120      	movs	r1, #32
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f864 	bl	800992a <XSPI_WaitFlagStateUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00f      	beq.n	800988c <HAL_XSPI_Init+0x218>
          {
            return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	e049      	b.n	8009904 <HAL_XSPI_Init+0x290>
 8009870:	420d1400 	.word	0x420d1400
 8009874:	520d1400 	.word	0x520d1400
 8009878:	420d2400 	.word	0x420d2400
 800987c:	420d3400 	.word	0x420d3400
 8009880:	f8e0c0fc 	.word	0xf8e0c0fc
 8009884:	520d2400 	.word	0x520d2400
 8009888:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80098aa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0201 	orr.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d107      	bne.n	80098ea <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0202 	orr.w	r2, r2, #2
 80098e8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098f2:	d103      	bne.n	80098fc <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80098fa:	e002      	b.n	8009902 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	4613      	mov	r3, r2
 8009938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800993a:	e019      	b.n	8009970 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d015      	beq.n	8009970 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009944:	f7f7 fdfc 	bl	8001540 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	429a      	cmp	r2, r3
 8009952:	d302      	bcc.n	800995a <XSPI_WaitFlagStateUntilTimeout+0x30>
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2202      	movs	r2, #2
 800995e:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009964:	f043 0201 	orr.w	r2, r3, #1
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e00e      	b.n	800998e <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6a1a      	ldr	r2, [r3, #32]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4013      	ands	r3, r2
 800997a:	2b00      	cmp	r3, #0
 800997c:	bf14      	ite	ne
 800997e:	2301      	movne	r3, #1
 8009980:	2300      	moveq	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	429a      	cmp	r2, r3
 800998a:	d1d7      	bne.n	800993c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f043 0202 	orr.w	r2, r3, #2
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f023 0202 	bic.w	r2, r3, #2
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80099d4:	b084      	sub	sp, #16
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	f107 001c 	add.w	r0, r7, #28
 80099e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80099ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80099ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80099ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80099f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80099f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80099fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <SDMMC_Init+0x50>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	b004      	add	sp, #16
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	ffc02c00 	.word	0xffc02c00

08009a28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f043 0203 	orr.w	r2, r3, #3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0303 	and.w	r3, r3, #3
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009a9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009aa4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009aaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	4b06      	ldr	r3, [pc, #24]	@ (8009ad0 <SDMMC_SendCommand+0x50>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	fffee0c0 	.word	0xfffee0c0

08009ad4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	b2db      	uxtb	r3, r3
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3314      	adds	r3, #20
 8009afc:	461a      	mov	r2, r3
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b3a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009b40:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009b46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0

}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b7a:	2310      	movs	r3, #16
 8009b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff ff73 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9e:	2110      	movs	r1, #16
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f935 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba8:	69fb      	ldr	r3, [r7, #28]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b088      	sub	sp, #32
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bc0:	2307      	movs	r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bd4:	f107 0308 	add.w	r3, r7, #8
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff ff50 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009be4:	2107      	movs	r1, #7
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f912 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bee:	69fb      	ldr	r3, [r7, #28]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff2f 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa70 	bl	800a108 <SDMMC_GetCmdError>
 8009c28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c40:	2302      	movs	r3, #2
 8009c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff ff10 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f9c7 	bl	8009ff4 <SDMMC_GetCmdResp2>
 8009c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c68:	69fb      	ldr	r3, [r7, #28]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b088      	sub	sp, #32
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c80:	2309      	movs	r3, #9
 8009c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c94:	f107 0308 	add.w	r3, r7, #8
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff fef0 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9a7 	bl	8009ff4 <SDMMC_GetCmdResp2>
 8009ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b088      	sub	sp, #32
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8009cbe:	887b      	ldrh	r3, [r7, #2]
 8009cc0:	041b      	lsls	r3, r3, #16
 8009cc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cd8:	f107 0308 	add.w	r3, r7, #8
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fece 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8009ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ce8:	2103      	movs	r1, #3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f890 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d0a:	230d      	movs	r3, #13
 8009d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff feab 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d2e:	210d      	movs	r1, #13
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f86d 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b088      	sub	sp, #32
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8009d50:	2301      	movs	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fe88 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f989 	bl	800a088 <SDMMC_GetCmdResp3>
 8009d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d78:	69fb      	ldr	r3, [r7, #28]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8009d90:	2306      	movs	r3, #6
 8009d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009da2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fe68 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8009db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009db4:	2106      	movs	r1, #6
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f82a 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009dd6:	2308      	movs	r3, #8
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fe45 	bl	8009a80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8009df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dfa:	2108      	movs	r1, #8
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f807 	bl	8009e10 <SDMMC_GetCmdResp1>
 8009e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e04:	69fb      	ldr	r3, [r7, #28]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e1e:	4b70      	ldr	r3, [pc, #448]	@ (8009fe0 <SDMMC_GetCmdResp1+0x1d0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a70      	ldr	r2, [pc, #448]	@ (8009fe4 <SDMMC_GetCmdResp1+0x1d4>)
 8009e24:	fba2 2303 	umull	r2, r3, r2, r3
 8009e28:	0a5a      	lsrs	r2, r3, #9
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	fb02 f303 	mul.w	r3, r2, r3
 8009e30:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	1e5a      	subs	r2, r3, #1
 8009e36:	61fa      	str	r2, [r7, #28]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e40:	e0c9      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e46:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	4b67      	ldr	r3, [pc, #412]	@ (8009fe8 <SDMMC_GetCmdResp1+0x1d8>)
 8009e4c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0ef      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x22>
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ea      	bne.n	8009e32 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2204      	movs	r2, #4
 8009e6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e6e:	2304      	movs	r3, #4
 8009e70:	e0b1      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e0a6      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4a58      	ldr	r2, [pc, #352]	@ (8009fec <SDMMC_GetCmdResp1+0x1dc>)
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff fe20 	bl	8009ad4 <SDMMC_GetCommandResponse>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461a      	mov	r2, r3
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d001      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e099      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fe22 	bl	8009aee <SDMMC_GetResponse>
 8009eaa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4b50      	ldr	r3, [pc, #320]	@ (8009ff0 <SDMMC_GetCmdResp1+0x1e0>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e08d      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	da02      	bge.n	8009ec6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ec4:	e087      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ed0:	2340      	movs	r3, #64	@ 0x40
 8009ed2:	e080      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ede:	2380      	movs	r3, #128	@ 0x80
 8009ee0:	e079      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ef0:	e071      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f00:	e069      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f10:	e061      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f20:	e059      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f30:	e051      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f40:	e049      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f50:	e041      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009f5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f60:	e039      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f70:	e031      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009f80:	e029      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f90:	e021      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fa0:	e019      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009fac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009fb0:	e011      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009fbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009fc0:	e009      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009fcc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009fd0:	e001      	b.n	8009fd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000000 	.word	0x20000000
 8009fe4:	10624dd3 	.word	0x10624dd3
 8009fe8:	00200045 	.word	0x00200045
 8009fec:	002000c5 	.word	0x002000c5
 8009ff0:	fdffe008 	.word	0xfdffe008

08009ff4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800a07c <SDMMC_GetCmdResp2+0x88>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a1f      	ldr	r2, [pc, #124]	@ (800a080 <SDMMC_GetCmdResp2+0x8c>)
 800a002:	fba2 2303 	umull	r2, r3, r2, r3
 800a006:	0a5b      	lsrs	r3, r3, #9
 800a008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1e5a      	subs	r2, r3, #1
 800a016:	60fa      	str	r2, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a01c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a020:	e026      	b.n	800a070 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a026:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ef      	beq.n	800a012 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1ea      	bne.n	800a012 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b00      	cmp	r3, #0
 800a046:	d004      	beq.n	800a052 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2204      	movs	r2, #4
 800a04c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a04e:	2304      	movs	r3, #4
 800a050:	e00e      	b.n	800a070 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a064:	2301      	movs	r3, #1
 800a066:	e003      	b.n	800a070 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a06      	ldr	r2, [pc, #24]	@ (800a084 <SDMMC_GetCmdResp2+0x90>)
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000000 	.word	0x20000000
 800a080:	10624dd3 	.word	0x10624dd3
 800a084:	002000c5 	.word	0x002000c5

0800a088 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a090:	4b1a      	ldr	r3, [pc, #104]	@ (800a0fc <SDMMC_GetCmdResp3+0x74>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a1a      	ldr	r2, [pc, #104]	@ (800a100 <SDMMC_GetCmdResp3+0x78>)
 800a096:	fba2 2303 	umull	r2, r3, r2, r3
 800a09a:	0a5b      	lsrs	r3, r3, #9
 800a09c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a0:	fb02 f303 	mul.w	r3, r2, r3
 800a0a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1e5a      	subs	r2, r3, #1
 800a0aa:	60fa      	str	r2, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d102      	bne.n	800a0b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0b4:	e01b      	b.n	800a0ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0ef      	beq.n	800a0a6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1ea      	bne.n	800a0a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2204      	movs	r2, #4
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	e003      	b.n	800a0ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a06      	ldr	r2, [pc, #24]	@ (800a104 <SDMMC_GetCmdResp3+0x7c>)
 800a0ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000000 	.word	0x20000000
 800a100:	10624dd3 	.word	0x10624dd3
 800a104:	002000c5 	.word	0x002000c5

0800a108 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a110:	4b11      	ldr	r3, [pc, #68]	@ (800a158 <SDMMC_GetCmdError+0x50>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a11      	ldr	r2, [pc, #68]	@ (800a15c <SDMMC_GetCmdError+0x54>)
 800a116:	fba2 2303 	umull	r2, r3, r2, r3
 800a11a:	0a5b      	lsrs	r3, r3, #9
 800a11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a120:	fb02 f303 	mul.w	r3, r2, r3
 800a124:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1e5a      	subs	r2, r3, #1
 800a12a:	60fa      	str	r2, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a130:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a134:	e009      	b.n	800a14a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f1      	beq.n	800a126 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a06      	ldr	r2, [pc, #24]	@ (800a160 <SDMMC_GetCmdError+0x58>)
 800a146:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000000 	.word	0x20000000
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	002000c5 	.word	0x002000c5

0800a164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a164:	b084      	sub	sp, #16
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	f107 001c 	add.w	r0, r7, #28
 800a172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a176:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d105      	bne.n	800a18a <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fdac 	bl	800ace8 <USB_CoreReset>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800a194:	7fbb      	ldrb	r3, [r7, #30]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d10b      	bne.n	800a1b2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f043 0208 	orr.w	r2, r3, #8
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f043 0220 	orr.w	r2, r3, #32
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1be:	b004      	add	sp, #16
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d165      	bne.n	800a2a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4a41      	ldr	r2, [pc, #260]	@ (800a2e0 <USB_SetTurnaroundTime+0x11c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d906      	bls.n	800a1ee <USB_SetTurnaroundTime+0x2a>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4a40      	ldr	r2, [pc, #256]	@ (800a2e4 <USB_SetTurnaroundTime+0x120>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d202      	bcs.n	800a1ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a1e8:	230f      	movs	r3, #15
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e062      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4a3c      	ldr	r2, [pc, #240]	@ (800a2e4 <USB_SetTurnaroundTime+0x120>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d306      	bcc.n	800a204 <USB_SetTurnaroundTime+0x40>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2e8 <USB_SetTurnaroundTime+0x124>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d202      	bcs.n	800a204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a1fe:	230e      	movs	r3, #14
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	e057      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4a38      	ldr	r2, [pc, #224]	@ (800a2e8 <USB_SetTurnaroundTime+0x124>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d306      	bcc.n	800a21a <USB_SetTurnaroundTime+0x56>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4a37      	ldr	r2, [pc, #220]	@ (800a2ec <USB_SetTurnaroundTime+0x128>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d202      	bcs.n	800a21a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a214:	230d      	movs	r3, #13
 800a216:	617b      	str	r3, [r7, #20]
 800a218:	e04c      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	4a33      	ldr	r2, [pc, #204]	@ (800a2ec <USB_SetTurnaroundTime+0x128>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d306      	bcc.n	800a230 <USB_SetTurnaroundTime+0x6c>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	4a32      	ldr	r2, [pc, #200]	@ (800a2f0 <USB_SetTurnaroundTime+0x12c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d802      	bhi.n	800a230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a22a:	230c      	movs	r3, #12
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	e041      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4a2f      	ldr	r2, [pc, #188]	@ (800a2f0 <USB_SetTurnaroundTime+0x12c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d906      	bls.n	800a246 <USB_SetTurnaroundTime+0x82>
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4a2e      	ldr	r2, [pc, #184]	@ (800a2f4 <USB_SetTurnaroundTime+0x130>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d802      	bhi.n	800a246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a240:	230b      	movs	r3, #11
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	e036      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	4a2a      	ldr	r2, [pc, #168]	@ (800a2f4 <USB_SetTurnaroundTime+0x130>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d906      	bls.n	800a25c <USB_SetTurnaroundTime+0x98>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	4a29      	ldr	r2, [pc, #164]	@ (800a2f8 <USB_SetTurnaroundTime+0x134>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d802      	bhi.n	800a25c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a256:	230a      	movs	r3, #10
 800a258:	617b      	str	r3, [r7, #20]
 800a25a:	e02b      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	4a26      	ldr	r2, [pc, #152]	@ (800a2f8 <USB_SetTurnaroundTime+0x134>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d906      	bls.n	800a272 <USB_SetTurnaroundTime+0xae>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4a25      	ldr	r2, [pc, #148]	@ (800a2fc <USB_SetTurnaroundTime+0x138>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d202      	bcs.n	800a272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a26c:	2309      	movs	r3, #9
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	e020      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	4a21      	ldr	r2, [pc, #132]	@ (800a2fc <USB_SetTurnaroundTime+0x138>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d306      	bcc.n	800a288 <USB_SetTurnaroundTime+0xc4>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	4a20      	ldr	r2, [pc, #128]	@ (800a300 <USB_SetTurnaroundTime+0x13c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d802      	bhi.n	800a288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a282:	2308      	movs	r3, #8
 800a284:	617b      	str	r3, [r7, #20]
 800a286:	e015      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4a1d      	ldr	r2, [pc, #116]	@ (800a300 <USB_SetTurnaroundTime+0x13c>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d906      	bls.n	800a29e <USB_SetTurnaroundTime+0xda>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4a1c      	ldr	r2, [pc, #112]	@ (800a304 <USB_SetTurnaroundTime+0x140>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d202      	bcs.n	800a29e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a298:	2307      	movs	r3, #7
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	e00a      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a29e:	2306      	movs	r3, #6
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	e007      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d102      	bne.n	800a2b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2aa:	2309      	movs	r3, #9
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e001      	b.n	800a2b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a2b0:	2309      	movs	r3, #9
 800a2b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	029b      	lsls	r3, r3, #10
 800a2c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	00d8acbf 	.word	0x00d8acbf
 800a2e4:	00e4e1c0 	.word	0x00e4e1c0
 800a2e8:	00f42400 	.word	0x00f42400
 800a2ec:	01067380 	.word	0x01067380
 800a2f0:	011a499f 	.word	0x011a499f
 800a2f4:	01312cff 	.word	0x01312cff
 800a2f8:	014ca43f 	.word	0x014ca43f
 800a2fc:	016e3600 	.word	0x016e3600
 800a300:	01a6ab1f 	.word	0x01a6ab1f
 800a304:	01e84800 	.word	0x01e84800

0800a308 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f023 0201 	bic.w	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d115      	bne.n	800a378 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a358:	200a      	movs	r0, #10
 800a35a:	f7f7 f8fd 	bl	8001558 <HAL_Delay>
      ms += 10U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	330a      	adds	r3, #10
 800a362:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fc2f 	bl	800abc8 <USB_GetMode>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d01e      	beq.n	800a3ae <USB_SetCurrentMode+0x84>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2bc7      	cmp	r3, #199	@ 0xc7
 800a374:	d9f0      	bls.n	800a358 <USB_SetCurrentMode+0x2e>
 800a376:	e01a      	b.n	800a3ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a378:	78fb      	ldrb	r3, [r7, #3]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d115      	bne.n	800a3aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a38a:	200a      	movs	r0, #10
 800a38c:	f7f7 f8e4 	bl	8001558 <HAL_Delay>
      ms += 10U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	330a      	adds	r3, #10
 800a394:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fc16 	bl	800abc8 <USB_GetMode>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <USB_SetCurrentMode+0x84>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2bc7      	cmp	r3, #199	@ 0xc7
 800a3a6:	d9f0      	bls.n	800a38a <USB_SetCurrentMode+0x60>
 800a3a8:	e001      	b.n	800a3ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e005      	b.n	800a3ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2bc8      	cmp	r3, #200	@ 0xc8
 800a3b2:	d101      	bne.n	800a3b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e000      	b.n	800a3ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a3d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	e009      	b.n	800a3f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	3340      	adds	r3, #64	@ 0x40
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	613b      	str	r3, [r7, #16]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b0e      	cmp	r3, #14
 800a3fc:	d9f2      	bls.n	800a3e4 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a402:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a40a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11c      	bne.n	800a44c <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a420:	f043 0302 	orr.w	r3, r3, #2
 800a424:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a436:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a442:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	639a      	str	r2, [r3, #56]	@ 0x38
 800a44a:	e011      	b.n	800a470 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a450:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a468:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a476:	461a      	mov	r2, r3
 800a478:	2300      	movs	r3, #0
 800a47a:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a47c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a480:	2b03      	cmp	r3, #3
 800a482:	d10d      	bne.n	800a4a0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d104      	bne.n	800a496 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a48c:	2100      	movs	r1, #0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f968 	bl	800a764 <USB_SetDevSpeed>
 800a494:	e008      	b.n	800a4a8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a496:	2101      	movs	r1, #1
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f963 	bl	800a764 <USB_SetDevSpeed>
 800a49e:	e003      	b.n	800a4a8 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a4a0:	2103      	movs	r1, #3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f95e 	bl	800a764 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4a8:	2110      	movs	r1, #16
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f8fa 	bl	800a6a4 <USB_FlushTxFifo>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f924 	bl	800a708 <USB_FlushRxFifo>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4dc:	461a      	mov	r2, r3
 800a4de:	2300      	movs	r3, #0
 800a4e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	613b      	str	r3, [r7, #16]
 800a4f2:	e043      	b.n	800a57c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a50a:	d118      	bne.n	800a53e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51e:	461a      	mov	r2, r3
 800a520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	e013      	b.n	800a550 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a534:	461a      	mov	r2, r3
 800a536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e008      	b.n	800a550 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a54a:	461a      	mov	r2, r3
 800a54c:	2300      	movs	r3, #0
 800a54e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a55c:	461a      	mov	r2, r3
 800a55e:	2300      	movs	r3, #0
 800a560:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a56e:	461a      	mov	r2, r3
 800a570:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	3301      	adds	r3, #1
 800a57a:	613b      	str	r3, [r7, #16]
 800a57c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a580:	461a      	mov	r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	4293      	cmp	r3, r2
 800a586:	d3b5      	bcc.n	800a4f4 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a588:	2300      	movs	r3, #0
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	e043      	b.n	800a616 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5a4:	d118      	bne.n	800a5d8 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e013      	b.n	800a5ea <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	e008      	b.n	800a5ea <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a608:	461a      	mov	r2, r3
 800a60a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a60e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	3301      	adds	r3, #1
 800a614:	613b      	str	r3, [r7, #16]
 800a616:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a61a:	461a      	mov	r2, r3
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4293      	cmp	r3, r2
 800a620:	d3b5      	bcc.n	800a58e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a634:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a642:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d105      	bne.n	800a658 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	f043 0210 	orr.w	r2, r3, #16
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	4b10      	ldr	r3, [pc, #64]	@ (800a6a0 <USB_DevInit+0x2dc>)
 800a65e:	4313      	orrs	r3, r2
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	f043 0208 	orr.w	r2, r3, #8
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d107      	bne.n	800a690 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a688:	f043 0304 	orr.w	r3, r3, #4
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a69c:	b004      	add	sp, #16
 800a69e:	4770      	bx	lr
 800a6a0:	803c3800 	.word	0x803c3800

0800a6a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6be:	d901      	bls.n	800a6c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e01b      	b.n	800a6fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	daf2      	bge.n	800a6b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	019b      	lsls	r3, r3, #6
 800a6d4:	f043 0220 	orr.w	r2, r3, #32
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6e8:	d901      	bls.n	800a6ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e006      	b.n	800a6fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d0f0      	beq.n	800a6dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3301      	adds	r3, #1
 800a718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a720:	d901      	bls.n	800a726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e018      	b.n	800a758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	daf2      	bge.n	800a714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2210      	movs	r2, #16
 800a736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3301      	adds	r3, #1
 800a73c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a744:	d901      	bls.n	800a74a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e006      	b.n	800a758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	f003 0310 	and.w	r3, r3, #16
 800a752:	2b10      	cmp	r3, #16
 800a754:	d0f0      	beq.n	800a738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a784:	4313      	orrs	r3, r2
 800a786:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a796:	b480      	push	{r7}
 800a798:	b087      	sub	sp, #28
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0306 	and.w	r3, r3, #6
 800a7ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]
 800a7ba:	e00a      	b.n	800a7d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d002      	beq.n	800a7c8 <USB_GetDevSpeed+0x32>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d102      	bne.n	800a7ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	75fb      	strb	r3, [r7, #23]
 800a7cc:	e001      	b.n	800a7d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7ce:	230f      	movs	r3, #15
 800a7d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d14a      	bne.n	800a894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a816:	f040 8086 	bne.w	800a926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	7812      	ldrb	r2, [r2, #0]
 800a82e:	0151      	lsls	r1, r2, #5
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	440a      	add	r2, r1
 800a834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a838:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a83c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	7812      	ldrb	r2, [r2, #0]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a85c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3301      	adds	r3, #1
 800a866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a86e:	4293      	cmp	r3, r2
 800a870:	d902      	bls.n	800a878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	75fb      	strb	r3, [r7, #23]
          break;
 800a876:	e056      	b.n	800a926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a88c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a890:	d0e7      	beq.n	800a862 <USB_EPStopXfer+0x82>
 800a892:	e048      	b.n	800a926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8ac:	d13b      	bne.n	800a926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	7812      	ldrb	r2, [r2, #0]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a902:	4293      	cmp	r3, r2
 800a904:	d902      	bls.n	800a90c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	75fb      	strb	r3, [r7, #23]
          break;
 800a90a:	e00c      	b.n	800a926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a924:	d0e7      	beq.n	800a8f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a934:	b480      	push	{r7}
 800a936:	b089      	sub	sp, #36	@ 0x24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4611      	mov	r1, r2
 800a940:	461a      	mov	r2, r3
 800a942:	460b      	mov	r3, r1
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	4613      	mov	r3, r2
 800a948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a956:	2b00      	cmp	r3, #0
 800a958:	d123      	bne.n	800a9a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a95a:	88bb      	ldrh	r3, [r7, #4]
 800a95c:	3303      	adds	r3, #3
 800a95e:	089b      	lsrs	r3, r3, #2
 800a960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	e018      	b.n	800a99a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	031a      	lsls	r2, r3, #12
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a974:	461a      	mov	r2, r3
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	3301      	adds	r3, #1
 800a980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	3301      	adds	r3, #1
 800a986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	3301      	adds	r3, #1
 800a98c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	3301      	adds	r3, #1
 800a992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	3301      	adds	r3, #1
 800a998:	61bb      	str	r3, [r7, #24]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d3e2      	bcc.n	800a968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3724      	adds	r7, #36	@ 0x24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b08b      	sub	sp, #44	@ 0x2c
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	089b      	lsrs	r3, r3, #2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	f003 0303 	and.w	r3, r3, #3
 800a9d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	623b      	str	r3, [r7, #32]
 800a9da:	e014      	b.n	800aa06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	3301      	adds	r3, #1
 800aa04:	623b      	str	r3, [r7, #32]
 800aa06:	6a3a      	ldr	r2, [r7, #32]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d3e6      	bcc.n	800a9dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa0e:	8bfb      	ldrh	r3, [r7, #30]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d01e      	beq.n	800aa52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f107 0310 	add.w	r3, r7, #16
 800aa24:	6812      	ldr	r2, [r2, #0]
 800aa26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa38:	701a      	strb	r2, [r3, #0]
      i++;
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	3301      	adds	r3, #1
 800aa44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa46:	8bfb      	ldrh	r3, [r7, #30]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa4c:	8bfb      	ldrh	r3, [r7, #30]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1ea      	bne.n	800aa28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	372c      	adds	r7, #44	@ 0x2c
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa8e:	f043 0302 	orr.w	r3, r3, #2
 800aa92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4013      	ands	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaba:	68fb      	ldr	r3, [r7, #12]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	4013      	ands	r3, r2
 800aaea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	0c1b      	lsrs	r3, r3, #16
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	b29b      	uxth	r3, r3
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	f003 030f 	and.w	r3, r3, #15
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9c:	01db      	lsls	r3, r3, #7
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4013      	ands	r3, r2
 800abb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abba:	68bb      	ldr	r3, [r7, #8]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	371c      	adds	r7, #28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	f003 0301 	and.w	r3, r3, #1
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abfe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ac02:	f023 0307 	bic.w	r3, r3, #7
 800ac06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	460b      	mov	r3, r1
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	333c      	adds	r3, #60	@ 0x3c
 800ac42:	3304      	adds	r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	4a26      	ldr	r2, [pc, #152]	@ (800ace4 <USB_EP0_OutStart+0xb8>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d90a      	bls.n	800ac66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac60:	d101      	bne.n	800ac66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e037      	b.n	800acd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	2300      	movs	r3, #0
 800ac70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac94:	f043 0318 	orr.w	r3, r3, #24
 800ac98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aca8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800acac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800acae:	7afb      	ldrb	r3, [r7, #11]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d10f      	bne.n	800acd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800acd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	371c      	adds	r7, #28
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	4f54300a 	.word	0x4f54300a

0800ace8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad00:	d901      	bls.n	800ad06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e01b      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	daf2      	bge.n	800acf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	f043 0201 	orr.w	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3301      	adds	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad2a:	d901      	bls.n	800ad30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e006      	b.n	800ad3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d0f0      	beq.n	800ad1e <USB_CoreReset+0x36>

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <memset>:
 800ad4a:	4402      	add	r2, r0
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d100      	bne.n	800ad54 <memset+0xa>
 800ad52:	4770      	bx	lr
 800ad54:	f803 1b01 	strb.w	r1, [r3], #1
 800ad58:	e7f9      	b.n	800ad4e <memset+0x4>
	...

0800ad5c <__libc_init_array>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ad94 <__libc_init_array+0x38>)
 800ad60:	2600      	movs	r6, #0
 800ad62:	4c0d      	ldr	r4, [pc, #52]	@ (800ad98 <__libc_init_array+0x3c>)
 800ad64:	1b64      	subs	r4, r4, r5
 800ad66:	10a4      	asrs	r4, r4, #2
 800ad68:	42a6      	cmp	r6, r4
 800ad6a:	d109      	bne.n	800ad80 <__libc_init_array+0x24>
 800ad6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad9c <__libc_init_array+0x40>)
 800ad6e:	2600      	movs	r6, #0
 800ad70:	4c0b      	ldr	r4, [pc, #44]	@ (800ada0 <__libc_init_array+0x44>)
 800ad72:	f000 f817 	bl	800ada4 <_init>
 800ad76:	1b64      	subs	r4, r4, r5
 800ad78:	10a4      	asrs	r4, r4, #2
 800ad7a:	42a6      	cmp	r6, r4
 800ad7c:	d105      	bne.n	800ad8a <__libc_init_array+0x2e>
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad84:	3601      	adds	r6, #1
 800ad86:	4798      	blx	r3
 800ad88:	e7ee      	b.n	800ad68 <__libc_init_array+0xc>
 800ad8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad8e:	3601      	adds	r6, #1
 800ad90:	4798      	blx	r3
 800ad92:	e7f2      	b.n	800ad7a <__libc_init_array+0x1e>
 800ad94:	0800ae94 	.word	0x0800ae94
 800ad98:	0800ae94 	.word	0x0800ae94
 800ad9c:	0800ae94 	.word	0x0800ae94
 800ada0:	0800ae98 	.word	0x0800ae98

0800ada4 <_init>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	bf00      	nop
 800ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adaa:	bc08      	pop	{r3}
 800adac:	469e      	mov	lr, r3
 800adae:	4770      	bx	lr

0800adb0 <_fini>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr
