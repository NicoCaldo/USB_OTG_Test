
USB_OTG_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6d4  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800e940  0800e940  0000f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ea18  0800ea18  0000fa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800ea1c  0800ea1c  0000fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000003c  20000000  0800ea20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ce8  2000003c  0800ea5c  0001003c  2**2
                  ALLOC
  7 ._user_heap_stack 00006004  20000d24  0800ea5c  00010d24  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00036e85  00000000  00000000  00010072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000070ad  00000000  00000000  00046ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001dd8  00000000  00000000  0004dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000162b  00000000  00000000  0004fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00047f4c  00000000  00000000  000513ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000346d5  00000000  00000000  000992f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00188c81  00000000  00000000  000cd9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0025664d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000072b0  00000000  00000000  00256690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0025d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	2000003c 	.word	0x2000003c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800e928 	.word	0x0800e928

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000040 	.word	0x20000040
 80002a8:	0800e928 	.word	0x0800e928

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f001 f892 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80002b4:	f000 f872 	bl	800039c <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f812 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 fa18 	bl	80006f0 <MX_GPIO_Init>
  MX_HSPI1_Init();
 80002c0:	f000 f87a 	bl	80003b8 <MX_HSPI1_Init>
  MX_I2C3_Init();
 80002c4:	f000 f8b6 	bl	8000434 <MX_I2C3_Init>
  MX_I2C5_Init();
 80002c8:	f000 f8f4 	bl	80004b4 <MX_I2C5_Init>
  MX_ICACHE_Init();
 80002cc:	f000 f932 	bl	8000534 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 80002d0:	f000 f944 	bl	800055c <MX_OCTOSPI1_Init>
  MX_SDMMC1_MMC_Init();
 80002d4:	f000 f9ba 	bl	800064c <MX_SDMMC1_MMC_Init>
  MX_USBX_Device_Init();
 80002d8:	f00e fa96 	bl	800e808 <MX_USBX_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <main+0x30>

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09e      	sub	sp, #120	@ 0x78
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2260      	movs	r2, #96	@ 0x60
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f00e faed 	bl	800e8ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000304:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000308:	f005 f8a0 	bl	800544c <HAL_PWREx_ControlVoltageScaling>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000312:	f000 fb15 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 8000316:	2311      	movs	r3, #17
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000324:	2310      	movs	r3, #16
 8000326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000328:	2300      	movs	r3, #0
 800032a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	2303      	movs	r3, #3
 8000332:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800033c:	2308      	movs	r3, #8
 800033e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000340:	2308      	movs	r3, #8
 8000342:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000344:	2302      	movs	r3, #2
 8000346:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000348:	2302      	movs	r3, #2
 800034a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800034c:	230c      	movs	r3, #12
 800034e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f005 f991 	bl	8005680 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000364:	f000 faec 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	231f      	movs	r3, #31
 800036a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f006 f857 	bl	8006438 <HAL_RCC_ClockConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000390:	f000 fad6 	bl	8000940 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3778      	adds	r7, #120	@ 0x78
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003a0:	f005 f95e 	bl	8005660 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80003a4:	2002      	movs	r0, #2
 80003a6:	f005 f8dd 	bl	8005564 <HAL_PWREx_ConfigSupply>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80003b0:	f000 fac6 	bl	8000940 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_HSPI1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 1;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_HSPI1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 800040a:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_HSPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_HSPI1_Init+0x74>)
 8000418:	f009 fbda 	bl	8009bd0 <HAL_XSPI_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_HSPI1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 fa8d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000058 	.word	0x20000058
 8000430:	420d3400 	.word	0x420d3400

08000434 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_I2C3_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <MX_I2C3_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_I2C3_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000470:	f001 fcde 	bl	8001e30 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 fa61 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000482:	f001 fd70 	bl	8001f66 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 fa58 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_I2C3_Init+0x74>)
 8000494:	f001 fdb2 	bl	8001ffc <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 fa4f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000b8 	.word	0x200000b8
 80004ac:	46002800 	.word	0x46002800
 80004b0:	20303e5d 	.word	0x20303e5d

080004b4 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <MX_I2C5_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x20303E5D;
 80004be:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <MX_I2C5_Init+0x7c>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 80004d6:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e2:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 80004ee:	480e      	ldr	r0, [pc, #56]	@ (8000528 <MX_I2C5_Init+0x74>)
 80004f0:	f001 fc9e 	bl	8001e30 <HAL_I2C_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 80004fa:	f000 fa21 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	@ (8000528 <MX_I2C5_Init+0x74>)
 8000502:	f001 fd30 	bl	8001f66 <HAL_I2CEx_ConfigAnalogFilter>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 800050c:	f000 fa18 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000510:	2100      	movs	r1, #0
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <MX_I2C5_Init+0x74>)
 8000514:	f001 fd72 	bl	8001ffc <HAL_I2CEx_ConfigDigitalFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 fa0f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2000010c 	.word	0x2000010c
 800052c:	40009800 	.word	0x40009800
 8000530:	20303e5d 	.word	0x20303e5d

08000534 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000538:	2000      	movs	r0, #0
 800053a:	f001 fdab 	bl	8002094 <HAL_ICACHE_ConfigAssociativityMode>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000544:	f000 f9fc 	bl	8000940 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000548:	f001 fdc4 	bl	80020d4 <HAL_ICACHE_Enable>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000552:	f000 f9f5 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800057c:	4b30      	ldr	r3, [pc, #192]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800057e:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <MX_OCTOSPI1_Init+0xe8>)
 8000580:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000584:	2201      	movs	r2, #1
 8000586:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800058e:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 8000596:	2220      	movs	r2, #32
 8000598:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800059c:	2201      	movs	r2, #1
 800059e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 80005de:	f002 fcc3 	bl	8002f68 <HAL_OSPI_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 80005e8:	f000 f9aa 	bl	8000940 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80005f8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80005fc:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_OCTOSPI1_Init+0xec>)
 8000600:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800060e:	f002 fdeb 	bl	80031e8 <HAL_OSPIM_Config>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000618:	f000 f992 	bl	8000940 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_OCTOSPI1_Init+0xe4>)
 800062a:	f003 fbcd 	bl	8003dc8 <HAL_OSPI_DLYB_SetConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_OCTOSPI1_Init+0xdc>
  {
    Error_Handler();
 8000634:	f000 f984 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000160 	.word	0x20000160
 8000644:	420d1400 	.word	0x420d1400
 8000648:	01000001 	.word	0x01000001

0800064c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_SDMMC1_MMC_Init+0x44>)
 8000654:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000664:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000668:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_SDMMC1_MMC_Init+0x40>)
 8000678:	f001 fd3c 	bl	80020f4 <HAL_MMC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8000682:	f000 f95d 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001bc 	.word	0x200001bc
 8000690:	420c8000 	.word	0x420c8000

08000694 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_HS_PCD_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800069a:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <MX_USB_OTG_HS_PCD_Init+0x58>)
 800069c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006a0:	2209      	movs	r2, #9
 80006a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80006d6:	f003 fbbf 	bl	8003e58 <HAL_PCD_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80006e0:	f000 f92e 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000434 	.word	0x20000434
 80006ec:	42040000 	.word	0x42040000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	@ 0x38
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	4b85      	ldr	r3, [pc, #532]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070c:	4a83      	ldr	r2, [pc, #524]	@ (800091c <MX_GPIO_Init+0x22c>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000716:	4b81      	ldr	r3, [pc, #516]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	623b      	str	r3, [r7, #32]
 8000722:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b7d      	ldr	r3, [pc, #500]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800072a:	4a7c      	ldr	r2, [pc, #496]	@ (800091c <MX_GPIO_Init+0x22c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000734:	4b79      	ldr	r3, [pc, #484]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b76      	ldr	r3, [pc, #472]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000748:	4a74      	ldr	r2, [pc, #464]	@ (800091c <MX_GPIO_Init+0x22c>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000752:	4b72      	ldr	r3, [pc, #456]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b6e      	ldr	r3, [pc, #440]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000766:	4a6d      	ldr	r2, [pc, #436]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000770:	4b6a      	ldr	r3, [pc, #424]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b67      	ldr	r3, [pc, #412]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000784:	4a65      	ldr	r2, [pc, #404]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078e:	4b63      	ldr	r3, [pc, #396]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b5f      	ldr	r3, [pc, #380]	@ (800091c <MX_GPIO_Init+0x22c>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a2:	4a5e      	ldr	r2, [pc, #376]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ac:	4b5b      	ldr	r3, [pc, #364]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ba:	4b58      	ldr	r3, [pc, #352]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c0:	4a56      	ldr	r2, [pc, #344]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ca:	4b54      	ldr	r3, [pc, #336]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d8:	4b50      	ldr	r3, [pc, #320]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007de:	4a4f      	ldr	r2, [pc, #316]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e8:	4b4c      	ldr	r3, [pc, #304]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b49      	ldr	r3, [pc, #292]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fc:	4a47      	ldr	r2, [pc, #284]	@ (800091c <MX_GPIO_Init+0x22c>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000806:	4b45      	ldr	r3, [pc, #276]	@ (800091c <MX_GPIO_Init+0x22c>)
 8000808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f244 2103 	movw	r1, #16899	@ 0x4203
 800081a:	4841      	ldr	r0, [pc, #260]	@ (8000920 <MX_GPIO_Init+0x230>)
 800081c:	f001 fad6 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESETn_GPIO_Port, DSI_RESETn_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	483f      	ldr	r0, [pc, #252]	@ (8000924 <MX_GPIO_Init+0x234>)
 8000826:	f001 fad1 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eMMC_RSTn_GPIO_Port, eMMC_RSTn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	@ 0x40
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000830:	f001 facc 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_BL_CTRL_GPIO_Port, DSI_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	483c      	ldr	r0, [pc, #240]	@ (800092c <MX_GPIO_Init+0x23c>)
 800083a:	f001 fac7 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin UCPD_DBn_Pin TOF_LPN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin;
 800083e:	f244 2303 	movw	r3, #16899	@ 0x4203
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	4832      	ldr	r0, [pc, #200]	@ (8000920 <MX_GPIO_Init+0x230>)
 8000858:	f001 f8e0 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INTN_Pin */
  GPIO_InitStruct.Pin = TOF_INTN_Pin;
 800085c:	2320      	movs	r3, #32
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000860:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <MX_GPIO_Init+0x240>)
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TOF_INTN_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4831      	ldr	r0, [pc, #196]	@ (8000934 <MX_GPIO_Init+0x244>)
 8000870:	f001 f8d4 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESETn_Pin */
  GPIO_InitStruct.Pin = DSI_RESETn_Pin;
 8000874:	2320      	movs	r3, #32
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DSI_RESETn_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4826      	ldr	r0, [pc, #152]	@ (8000924 <MX_GPIO_Init+0x234>)
 800088c:	f001 f8c6 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : eMMC_RSTn_Pin */
  GPIO_InitStruct.Pin = eMMC_RSTn_Pin;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(eMMC_RSTn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4820      	ldr	r0, [pc, #128]	@ (8000928 <MX_GPIO_Init+0x238>)
 80008a8:	f001 f8b8 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	481a      	ldr	r0, [pc, #104]	@ (800092c <MX_GPIO_Init+0x23c>)
 80008c4:	f001 f8aa 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_GPIO_Init+0x240>)
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	4816      	ldr	r0, [pc, #88]	@ (8000938 <MX_GPIO_Init+0x248>)
 80008de:	f001 f89d 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INTN_Pin */
  GPIO_InitStruct.Pin = TEMP_INTN_Pin;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_GPIO_Init+0x240>)
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TEMP_INTN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <MX_GPIO_Init+0x24c>)
 80008f6:	f001 f891 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DSI_TOUCH_INT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin|UCPD_FLT_Pin;
 80008fa:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x240>)
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_GPIO_Init+0x230>)
 8000910:	f001 f884 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3738      	adds	r7, #56	@ 0x38
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	46020c00 	.word	0x46020c00
 8000920:	42021000 	.word	0x42021000
 8000924:	42020c00 	.word	0x42020c00
 8000928:	42021c00 	.word	0x42021c00
 800092c:	42022000 	.word	0x42022000
 8000930:	10110000 	.word	0x10110000
 8000934:	42020400 	.word	0x42020400
 8000938:	42020800 	.word	0x42020800
 800093c:	42021400 	.word	0x42021400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_MspInit+0x30>)
 8000954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000958:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x30>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x30>)
 8000964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000970:	f004 fe48 	bl	8005604 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	46020c00 	.word	0x46020c00

08000980 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0c4      	sub	sp, #272	@ 0x110
 8000984:	af00      	add	r7, sp, #0
 8000986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800098a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800098e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	22e0      	movs	r2, #224	@ 0xe0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00d ff90 	bl	800e8ce <memset>
  if(hxspi->Instance==HSPI1)
 80009ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a58      	ldr	r2, [pc, #352]	@ (8000b1c <HAL_XSPI_MspInit+0x19c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	f040 80a8 	bne.w	8000b12 <HAL_XSPI_MspInit+0x192>

    /* USER CODE END HSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI;
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	f04f 0301 	mov.w	r3, #1
 80009ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_SYSCLK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 f8fd 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_XSPI_MspInit+0x68>
    {
      Error_Handler();
 80009e4:	f7ff ffac 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80009e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80009f8:	4b49      	ldr	r3, [pc, #292]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 80009fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a06:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0c:	4a44      	ldr	r2, [pc, #272]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a16:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a32:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	4a39      	ldr	r2, [pc, #228]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a44:	4b36      	ldr	r3, [pc, #216]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a4a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a60:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a68:	4a2d      	ldr	r2, [pc, #180]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a72:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <HAL_XSPI_MspInit+0x1a0>)
 8000a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a78:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000a7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a8e:	681b      	ldr	r3, [r3, #0]
    PH11     ------> HSPI1_IO1
    PH13     ------> HSPI1_IO3
    PH9     ------> HSPI1_NCS
    PH12     ------> HSPI1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000aae:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <HAL_XSPI_MspInit+0x1a4>)
 8000ab6:	f000 ffb1 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000aba:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8000abe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ada:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <HAL_XSPI_MspInit+0x1a8>)
 8000ae2:	f000 ff9b 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11
 8000ae6:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000aea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000b00:	2308      	movs	r3, #8
 8000b02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b06:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <HAL_XSPI_MspInit+0x1ac>)
 8000b0e:	f000 ff85 	bl	8001a1c <HAL_GPIO_Init>

    /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	420d3400 	.word	0x420d3400
 8000b20:	46020c00 	.word	0x46020c00
 8000b24:	42022400 	.word	0x42022400
 8000b28:	42022000 	.word	0x42022000
 8000b2c:	42021c00 	.word	0x42021c00

08000b30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0c4      	sub	sp, #272	@ 0x110
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	22e0      	movs	r2, #224	@ 0xe0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00d feb8 	bl	800e8ce <memset>
  if(hi2c->Instance==I2C3)
 8000b5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8000cd8 <HAL_I2C_MspInit+0x1a8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d14f      	bne.n	8000c10 <HAL_I2C_MspInit+0xe0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f826 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8000b92:	f7ff fed5 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	4b51      	ldr	r3, [pc, #324]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bb4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bb8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4841      	ldr	r0, [pc, #260]	@ (8000ce0 <HAL_I2C_MspInit+0x1b0>)
 8000bdc:	f000 ff1e 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000be0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000be6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000bf6:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bfe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c0c:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN I2C5_MspInit 1 */

    /* USER CODE END I2C5_MspInit 1 */
  }

}
 8000c0e:	e05e      	b.n	8000cce <HAL_I2C_MspInit+0x19e>
  else if(hi2c->Instance==I2C5)
 8000c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a31      	ldr	r2, [pc, #196]	@ (8000ce4 <HAL_I2C_MspInit+0x1b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d155      	bne.n	8000cce <HAL_I2C_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 ffcd 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8000c44:	f7ff fe7c 	bl	8000940 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8000c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c74:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000c76:	2330      	movs	r3, #48	@ 0x30
 8000c78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7c:	2312      	movs	r3, #18
 8000c7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C5;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c94:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <HAL_I2C_MspInit+0x1b0>)
 8000c9c:	f000 febe 	bl	8001a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_I2C_MspInit+0x1ac>)
 8000cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000cb6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ccc:	681b      	ldr	r3, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	46002800 	.word	0x46002800
 8000cdc:	46020c00 	.word	0x46020c00
 8000ce0:	42021c00 	.word	0x42021c00
 8000ce4:	40009800 	.word	0x40009800

08000ce8 <HAL_OSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hospi: OSPI handle pointer
  * @retval None
  */
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0c6      	sub	sp, #280	@ 0x118
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cf6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	22e0      	movs	r2, #224	@ 0xe0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00d fddc 	bl	800e8ce <memset>
  if(hospi->Instance==OCTOSPI1)
 8000d16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a79      	ldr	r2, [pc, #484]	@ (8000f08 <HAL_OSPI_MspInit+0x220>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 80e9 	bne.w	8000efc <HAL_OSPI_MspInit+0x214>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000d2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 ff49 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8000d4c:	f7ff fdf8 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000d50:	4b6e      	ldr	r3, [pc, #440]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d56:	4a6d      	ldr	r2, [pc, #436]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d60:	4b6a      	ldr	r3, [pc, #424]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d6e:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d74:	4a65      	ldr	r2, [pc, #404]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000d7e:	4b63      	ldr	r3, [pc, #396]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d84:	f003 0210 	and.w	r2, r3, #16
 8000d88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d9a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	4a5a      	ldr	r2, [pc, #360]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dac:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db2:	f003 0220 	and.w	r2, r3, #32
 8000db6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dc8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b50      	ldr	r3, [pc, #320]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de0:	f003 0204 	and.w	r2, r3, #4
 8000de4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000df6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b44      	ldr	r3, [pc, #272]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfe:	4a43      	ldr	r2, [pc, #268]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <HAL_OSPI_MspInit+0x224>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e24:	681b      	ldr	r3, [r3, #0]
    PC3     ------> OCTOSPIM_P1_IO6
    PC2     ------> OCTOSPIM_P1_IO5
    PC0     ------> OCTOSPIM_P1_IO7
    PA1     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e46:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4830      	ldr	r0, [pc, #192]	@ (8000f10 <HAL_OSPI_MspInit+0x228>)
 8000e4e:	f000 fde5 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8;
 8000e52:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e72:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000e76:	4619      	mov	r1, r3
 8000e78:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <HAL_OSPI_MspInit+0x228>)
 8000e7a:	f000 fdcf 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2;
 8000e7e:	230e      	movs	r3, #14
 8000e80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000e96:	230a      	movs	r3, #10
 8000e98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	@ (8000f14 <HAL_OSPI_MspInit+0x22c>)
 8000ea4:	f000 fdba 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <HAL_OSPI_MspInit+0x230>)
 8000ece:	f000 fda5 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <HAL_OSPI_MspInit+0x22c>)
 8000ef8:	f000 fd90 	bl	8001a1c <HAL_GPIO_Init>

    /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8000efc:	bf00      	nop
 8000efe:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	420d1400 	.word	0x420d1400
 8000f0c:	46020c00 	.word	0x46020c00
 8000f10:	42021400 	.word	0x42021400
 8000f14:	42020800 	.word	0x42020800
 8000f18:	42020000 	.word	0x42020000

08000f1c <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0c4      	sub	sp, #272	@ 0x110
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	22e0      	movs	r2, #224	@ 0xe0
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00d fcc2 	bl	800e8ce <memset>
  if(hmmc->Instance==SDMMC1)
 8000f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a59      	ldr	r2, [pc, #356]	@ (80010bc <HAL_MMC_MspInit+0x1a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f040 80a9 	bne.w	80010b0 <HAL_MMC_MspInit+0x194>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f5e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fe2e 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_MMC_MspInit+0x6a>
    {
      Error_Handler();
 8000f82:	f7ff fcdd 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f86:	4b4e      	ldr	r3, [pc, #312]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f96:	4b4a      	ldr	r3, [pc, #296]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000faa:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb4:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	f003 0204 	and.w	r2, r3, #4
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fd0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd8:	4a39      	ldr	r2, [pc, #228]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe8:	f003 0208 	and.w	r2, r3, #8
 8000fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ffe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001006:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_MMC_MspInit+0x1a4>)
 8001012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001016:	f003 0202 	and.w	r2, r3, #2
 800101a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800101e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800102c:	681b      	ldr	r3, [r3, #0]
    PB8     ------> SDMMC1_D4
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_7
 800102e:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8001032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001048:	230c      	movs	r3, #12
 800104a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001052:	4619      	mov	r1, r3
 8001054:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <HAL_MMC_MspInit+0x1a8>)
 8001056:	f000 fce1 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001072:	230c      	movs	r3, #12
 8001074:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <HAL_MMC_MspInit+0x1ac>)
 8001080:	f000 fccc 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001084:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001088:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800109e:	230c      	movs	r3, #12
 80010a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80010a8:	4619      	mov	r1, r3
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <HAL_MMC_MspInit+0x1b0>)
 80010ac:	f000 fcb6 	bl	8001a1c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80010b0:	bf00      	nop
 80010b2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	420c8000 	.word	0x420c8000
 80010c0:	46020c00 	.word	0x46020c00
 80010c4:	42020800 	.word	0x42020800
 80010c8:	42020c00 	.word	0x42020c00
 80010cc:	42020400 	.word	0x42020400

080010d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0c6      	sub	sp, #280	@ 0x118
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	22e0      	movs	r2, #224	@ 0xe0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00d fbe8 	bl	800e8ce <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80010fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001102:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a5f      	ldr	r2, [pc, #380]	@ (8001288 <HAL_PCD_MspInit+0x1b8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f040 80b5 	bne.w	800127c <HAL_PCD_MspInit+0x1ac>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001118:	4a5c      	ldr	r2, [pc, #368]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001124:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0308 	mov.w	r3, #8
 8001138:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800113c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001140:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fd45 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_PCD_MspInit+0x88>
    {
      Error_Handler();
 8001154:	f7ff fbf4 	bl	8000940 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8001158:	200c      	movs	r0, #12
 800115a:	f000 fa3b 	bl	80015d4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b4b      	ldr	r3, [pc, #300]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001174:	f003 0201 	and.w	r2, r3, #1
 8001178:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800117c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001186:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800118a:	681b      	ldr	r3, [r3, #0]
    /**USB_OTG_HS GPIO Configuration
    PA12     ------> USB_OTG_HS_DP
    PA11     ------> USB_OTG_HS_DM
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80011a4:	4619      	mov	r1, r3
 80011a6:	483a      	ldr	r0, [pc, #232]	@ (8001290 <HAL_PCD_MspInit+0x1c0>)
 80011a8:	f000 fc38 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80011ac:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c2:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80011c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80011da:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e0:	4a2a      	ldr	r2, [pc, #168]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ea:	4b28      	ldr	r3, [pc, #160]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 80011ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80011f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001206:	681b      	ldr	r3, [r3, #0]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d123      	bne.n	800125e <HAL_PCD_MspInit+0x18e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800122c:	f003 0204 	and.w	r2, r3, #4
 8001230:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001234:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800123e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001242:	681b      	ldr	r3, [r3, #0]
      HAL_PWREx_EnableVddUSB();
 8001244:	f004 f9de 	bl	8005604 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8001248:	f004 f9ec 	bl	8005624 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_PCD_MspInit+0x1bc>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800125c:	e003      	b.n	8001266 <HAL_PCD_MspInit+0x196>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800125e:	f004 f9d1 	bl	8005604 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8001262:	f004 f9df 	bl	8005624 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8001266:	2001      	movs	r0, #1
 8001268:	f000 f9a0 	bl	80015ac <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2049      	movs	r0, #73	@ 0x49
 8001272:	f000 fa7b 	bl	800176c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001276:	2049      	movs	r0, #73	@ 0x49
 8001278:	f000 fa92 	bl	80017a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	42040000 	.word	0x42040000
 800128c:	46020c00 	.word	0x46020c00
 8001290:	42020000 	.word	0x42020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f91b 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80012f8:	2101      	movs	r1, #1
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <OTG_HS_IRQHandler+0x18>)
 80012fc:	f000 fd7e 	bl	8001dfc <HAL_GPIO_TogglePin>
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <OTG_HS_IRQHandler+0x1c>)
 8001302:	f002 feff 	bl	8004104 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	42021000 	.word	0x42021000
 8001310:	20000434 	.word	0x20000434

08001314 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <SystemInit+0x68>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131e:	4a17      	ldr	r2, [pc, #92]	@ (800137c <SystemInit+0x68>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <SystemInit+0x6c>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <SystemInit+0x6c>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <SystemInit+0x6c>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <SystemInit+0x6c>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <SystemInit+0x6c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <SystemInit+0x6c>)
 8001346:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800134a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800134e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <SystemInit+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SystemInit+0x6c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SystemInit+0x6c>)
 800135c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001360:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <SystemInit+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SystemInit+0x68>)
 800136a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800136e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	46020c00 	.word	0x46020c00

08001384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013bc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001388:	f7ff ffc4 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800138c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800138e:	e003      	b.n	8001398 <LoopCopyDataInit>

08001390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001396:	3104      	adds	r1, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800139c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800139e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013a0:	d3f6      	bcc.n	8001390 <CopyDataInit>
	ldr	r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80013a4:	e002      	b.n	80013ac <LoopFillZerobss>

080013a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013a8:	f842 3b04 	str.w	r3, [r2], #4

080013ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013b0:	d3f9      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f00d fa95 	bl	800e8e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b6:	f7fe ff79 	bl	80002ac <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013bc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80013c0:	0800ea20 	.word	0x0800ea20
	ldr	r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013c8:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 80013cc:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 80013d0:	20000d24 	.word	0x20000d24

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_Init+0x50>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <HAL_Init+0x50>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f9b4 	bl	8001756 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013ee:	f005 fa15 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_Init+0x54>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <HAL_Init+0x58>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_Init+0x5c>)
 8001406:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001408:	2004      	movs	r0, #4
 800140a:	f000 f9f9 	bl	8001800 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f812 	bl	8001438 <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e002      	b.n	8001424 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141e:	f7ff fa95 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40022000 	.word	0x40022000
 800142c:	46020c00 	.word	0x46020c00
 8001430:	0800e940 	.word	0x0800e940
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <HAL_InitTick+0xdc>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e05c      	b.n	800150a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <HAL_InitTick+0xe0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b04      	cmp	r3, #4
 800145a:	d10c      	bne.n	8001476 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <HAL_InitTick+0xe4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <HAL_InitTick+0xdc>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e037      	b.n	80014e6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001476:	f000 fa1b 	bl	80018b0 <HAL_SYSTICK_GetCLKSourceConfig>
 800147a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d023      	beq.n	80014ca <HAL_InitTick+0x92>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d82d      	bhi.n	80014e4 <HAL_InitTick+0xac>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_InitTick+0x5e>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d00d      	beq.n	80014b0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001494:	e026      	b.n	80014e4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <HAL_InitTick+0xe4>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <HAL_InitTick+0xdc>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80014a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	60fb      	str	r3, [r7, #12]
        break;
 80014ae:	e01a      	b.n	80014e6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_InitTick+0xdc>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80014be:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
        break;
 80014c8:	e00d      	b.n	80014e6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0xdc>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	60fb      	str	r3, [r7, #12]
        break;
 80014e2:	e000      	b.n	80014e6 <HAL_InitTick+0xae>
        break;
 80014e4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f968 	bl	80017bc <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e009      	b.n	800150a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f6:	2200      	movs	r2, #0
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	f000 f935 	bl	800176c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_InitTick+0xe8>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	e000e010 	.word	0xe000e010
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	20000918 	.word	0x20000918

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000918 	.word	0x20000918

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b8:	f023 0201 	bic.w	r2, r3, #1
 80015bc:	4904      	ldr	r1, [pc, #16]	@ (80015d0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	46000400 	.word	0x46000400

080015d4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e0:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	46000400 	.word	0x46000400

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	@ (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff4c 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177a:	f7ff ff63 	bl	8001644 <__NVIC_GetPriorityGrouping>
 800177e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	f7ff ffb3 	bl	80016f0 <NVIC_EncodePriority>
 800178a:	4602      	mov	r2, r0
 800178c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff82 	bl	800169c <__NVIC_SetPriority>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff56 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00d      	b.n	80017ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <HAL_SYSTICK_Config+0x40>)
 80017e6:	f043 0303 	orr.w	r3, r3, #3
 80017ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d844      	bhi.n	8001898 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800180e:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001837 	.word	0x08001837
 8001818:	08001855 	.word	0x08001855
 800181c:	08001877 	.word	0x08001877
 8001820:	08001899 	.word	0x08001899
 8001824:	08001829 	.word	0x08001829
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6013      	str	r3, [r2, #0]
      break;
 8001834:	e031      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800184a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800184e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001852:	e022      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800186c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001874:	e011      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001888:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800188e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001892:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001896:	e000      	b.n	800189a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001898:	bf00      	nop
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010
 80018ac:	46020c00 	.word	0x46020c00

080018b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80018c2:	2304      	movs	r3, #4
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	e021      	b.n	800190c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ce:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80018d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018da:	d011      	beq.n	8001900 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80018e2:	d810      	bhi.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018f0:	d003      	beq.n	80018fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80018f2:	e008      	b.n	8001906 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
        break;
 80018f8:	e008      	b.n	800190c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80018fa:	2301      	movs	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
        break;
 80018fe:	e005      	b.n	800190c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001900:	2302      	movs	r3, #2
 8001902:	607b      	str	r3, [r7, #4]
        break;
 8001904:	e002      	b.n	800190c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
        break;
 800190a:	bf00      	nop
    }
  }
  return systick_source;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010
 8001920:	46020c00 	.word	0x46020c00

08001924 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800192c:	f7ff fe0e 	bl	800154c <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e06b      	b.n	8001a14 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d008      	beq.n	800195a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e05c      	b.n	8001a14 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0204 	orr.w	r2, r2, #4
 8001968:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001972:	e020      	b.n	80019b6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001974:	f7ff fdea 	bl	800154c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b05      	cmp	r3, #5
 8001980:	d919      	bls.n	80019b6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	f043 0210 	orr.w	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a6:	2201      	movs	r2, #1
 80019a8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e02e      	b.n	8001a14 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0d7      	beq.n	8001974 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0202 	orr.w	r2, r2, #2
 80019d2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80019e4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fe:	2201      	movs	r2, #1
 8001a00:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a2e:	e1ba      	b.n	8001da6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 81aa 	beq.w	8001da0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a55      	ldr	r2, [pc, #340]	@ (8001ba4 <HAL_GPIO_Init+0x188>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d15d      	bne.n	8001b10 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001a84:	4a48      	ldr	r2, [pc, #288]	@ (8001ba8 <HAL_GPIO_Init+0x18c>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a8c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a8e:	4a46      	ldr	r2, [pc, #280]	@ (8001ba8 <HAL_GPIO_Init+0x18c>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220b      	movs	r2, #11
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69f9      	ldr	r1, [r7, #28]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2202      	movs	r2, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e067      	b.n	8001be0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x104>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b12      	cmp	r3, #18
 8001b1e:	d145      	bne.n	8001bac <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69f9      	ldr	r1, [r7, #28]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e01e      	b.n	8001be0 <HAL_GPIO_Init+0x1c4>
 8001ba2:	bf00      	nop
 8001ba4:	46020000 	.word	0x46020000
 8001ba8:	0800e998 	.word	0x0800e998
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d130      	bne.n	8001c62 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c36:	2201      	movs	r2, #1
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d07c      	beq.n	8001da0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ca6:	4a47      	ldr	r2, [pc, #284]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3318      	adds	r3, #24
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0a9a      	lsrs	r2, r3, #10
 8001cce:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc8 <HAL_GPIO_Init+0x3ac>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ce2:	4938      	ldr	r1, [pc, #224]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3318      	adds	r3, #24
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cf0:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001d14:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d6a:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <HAL_GPIO_Init+0x3a8>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f47f ae3d 	bne.w	8001a30 <HAL_GPIO_Init+0x14>
  }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3724      	adds	r7, #36	@ 0x24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	46022000 	.word	0x46022000
 8001dc8:	002f7f7f 	.word	0x002f7f7f

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43d9      	mvns	r1, r3
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08d      	b.n	8001f5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fe6a 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e007      	b.n	8001ee2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d138      	bne.n	8001fee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e032      	b.n	8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2224      	movs	r2, #36	@ 0x24
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d139      	bne.n	8002086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800201c:	2302      	movs	r3, #2
 800201e:	e033      	b.n	8002088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	@ 0x24
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800204e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e007      	b.n	80020c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0204 	bic.w	r2, r3, #4
 80020ba:	4905      	ldr	r1, [pc, #20]	@ (80020d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40030400 	.word	0x40030400

080020d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_ICACHE_Enable+0x1c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_ICACHE_Enable+0x1c>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40030400 	.word	0x40030400

080020f4 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e031      	b.n	800216a <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7fe feff 	bl	8000f1c <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2203      	movs	r2, #3
 8002122:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f824 	bl	8002174 <HAL_MMC_InitCard>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e019      	b.n	800216a <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fb47 	bl	80027ec <HAL_MMC_ConfigWideBusOperation>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b08d      	sub	sp, #52	@ 0x34
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800218c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	f006 f866 	bl	8008264 <HAL_RCCEx_GetPeriphCLKFreq>
 8002198:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e070      	b.n	8002296 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	4a39      	ldr	r2, [pc, #228]	@ (80022a0 <HAL_MMC_InitCard+0x12c>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681c      	ldr	r4, [r3, #0]
 80021c6:	466a      	mov	r2, sp
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021da:	4620      	mov	r0, r4
 80021dc:	f007 fea8 	bl	8009f30 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f007 feda 	bl	8009f9e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_MMC_InitCard+0x130>)
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	3301      	adds	r3, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f9a9 	bl	8001564 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fcb4 	bl	8002b80 <MMC_PowerON>
 8002218:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e02e      	b.n	8002296 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fba3 	bl	8002984 <MMC_InitCard>
 800223e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01b      	b.n	8002296 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002266:	4618      	mov	r0, r3
 8002268:	f007 ff2e 	bl	800a0c8 <SDMMC_CmdBlockLength>
 800226c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00f      	beq.n	8002294 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <HAL_MMC_InitCard+0x134>)
 800227a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	372c      	adds	r7, #44	@ 0x2c
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	bf00      	nop
 80022a0:	014f8b59 	.word	0x014f8b59
 80022a4:	00012110 	.word	0x00012110
 80022a8:	1fe00fff 	.word	0x1fe00fff

080022ac <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	0f9b      	lsrs	r3, r3, #30
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	0e9b      	lsrs	r3, r3, #26
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	0e1b      	lsrs	r3, r3, #24
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	b2da      	uxtb	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002310:	0d1b      	lsrs	r3, r3, #20
 8002312:	b29a      	uxth	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	0bdb      	lsrs	r3, r3, #15
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	b2da      	uxtb	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	0b9b      	lsrs	r3, r3, #14
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	0b5b      	lsrs	r3, r3, #13
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	0b1b      	lsrs	r3, r3, #12
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8002380:	22d4      	movs	r2, #212	@ 0xd4
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fc4c 	bl	8002c20 <MMC_ReadExtCSD>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e129      	b.n	80025e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d163      	bne.n	8002462 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80023aa:	0f92      	lsrs	r2, r2, #30
 80023ac:	431a      	orrs	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	0edb      	lsrs	r3, r3, #27
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	0e1b      	lsrs	r3, r3, #24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	0bdb      	lsrs	r3, r3, #15
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	b2da      	uxtb	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	7e1b      	ldrb	r3, [r3, #24]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	3302      	adds	r3, #2
 8002422:	2201      	movs	r2, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800242c:	fb03 f202 	mul.w	r2, r3, r2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7a1b      	ldrb	r3, [r3, #8]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800244e:	0a52      	lsrs	r2, r2, #9
 8002450:	fb03 f202 	mul.w	r2, r3, r2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002460:	e023      	b.n	80024aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10f      	bne.n	800248a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
 8002488:	e00f      	b.n	80024aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a58      	ldr	r2, [pc, #352]	@ (80025f0 <HAL_MMC_GetCardCSD+0x344>)
 8002490:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002496:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09d      	b.n	80025e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ae:	0b9b      	lsrs	r3, r3, #14
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c0:	09db      	lsrs	r3, r3, #7
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e2:	0fdb      	lsrs	r3, r3, #31
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ee:	0f5b      	lsrs	r3, r3, #29
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	b2da      	uxtb	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002512:	0d9b      	lsrs	r3, r3, #22
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	b2da      	uxtb	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002524:	0d5b      	lsrs	r3, r3, #21
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002554:	0bdb      	lsrs	r3, r3, #15
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	b2da      	uxtb	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002568:	0b9b      	lsrs	r3, r3, #14
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	b2da      	uxtb	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257c:	0b5b      	lsrs	r3, r3, #13
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002590:	0b1b      	lsrs	r3, r3, #12
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a4:	0a9b      	lsrs	r3, r3, #10
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	1fe00fff 	.word	0x1fe00fff

080025f4 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7fe ffa4 	bl	800154c <HAL_GetTick>
 8002604:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0de      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 80d7 	bne.w	80027d8 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2203      	movs	r2, #3
 8002634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 800264a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800264e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002650:	2390      	movs	r3, #144	@ 0x90
 8002652:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002654:	2302      	movs	r3, #2
 8002656:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f107 0210 	add.w	r2, r7, #16
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f007 fd00 	bl	800a070 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800267e:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f007 fe4c 	bl	800a324 <SDMMC_CmdSendEXTCSD>
 800268c:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d045      	beq.n	8002720 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800269a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e092      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d013      	beq.n	80026ea <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c6:	e00d      	b.n	80026e4 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f007 fc59 	bl	8009f84 <SDMMC_ReadFIFO>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	3304      	adds	r3, #4
 80026dc:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80026de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e0:	3301      	adds	r3, #1
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	2b07      	cmp	r3, #7
 80026e8:	d9ee      	bls.n	80026c8 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80026ea:	f7fe ff2f 	bl	800154c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d902      	bls.n	8002700 <HAL_MMC_GetCardExtCSD+0x10c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a37      	ldr	r2, [pc, #220]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e05c      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002726:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0c2      	beq.n	80026b4 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800273c:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00f      	beq.n	800276c <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002752:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	f043 0208 	orr.w	r2, r3, #8
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e036      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01f      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00f      	beq.n	80027c8 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80027ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e008      	b.n	80027da <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a06      	ldr	r2, [pc, #24]	@ (80027e8 <HAL_MMC_GetCardExtCSD+0x1f4>)
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3738      	adds	r7, #56	@ 0x38
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	1fe00fff 	.word	0x1fe00fff
 80027e8:	18000f3a 	.word	0x18000f3a

080027ec <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80027ec:	b5b0      	push	{r4, r5, r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d014      	beq.n	800283a <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 800281e:	2204      	movs	r2, #4
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 faf0 	bl	8002e08 <MMC_PwrClassUpdate>
 8002828:	6238      	str	r0, [r7, #32]
 800282a:	e00c      	b.n	8002846 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 800282c:	2202      	movs	r2, #2
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fae9 	bl	8002e08 <MMC_PwrClassUpdate>
 8002836:	6238      	str	r0, [r7, #32]
 8002838:	e005      	b.n	8002846 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 800283a:	2201      	movs	r2, #1
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fae2 	bl	8002e08 <MMC_PwrClassUpdate>
 8002844:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d17b      	bne.n	8002944 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002852:	d107      	bne.n	8002864 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4946      	ldr	r1, [pc, #280]	@ (8002974 <HAL_MMC_ConfigWideBusOperation+0x188>)
 800285a:	4618      	mov	r0, r3
 800285c:	f007 fd3f 	bl	800a2de <SDMMC_CmdSwitch>
 8002860:	6238      	str	r0, [r7, #32]
 8002862:	e019      	b.n	8002898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800286a:	d107      	bne.n	800287c <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4941      	ldr	r1, [pc, #260]	@ (8002978 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8002872:	4618      	mov	r0, r3
 8002874:	f007 fd33 	bl	800a2de <SDMMC_CmdSwitch>
 8002878:	6238      	str	r0, [r7, #32]
 800287a:	e00d      	b.n	8002898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	493d      	ldr	r1, [pc, #244]	@ (800297c <HAL_MMC_ConfigWideBusOperation+0x190>)
 8002888:	4618      	mov	r0, r3
 800288a:	f007 fd28 	bl	800a2de <SDMMC_CmdSwitch>
 800288e:	6238      	str	r0, [r7, #32]
 8002890:	e002      	b.n	8002898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8002892:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002896:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d152      	bne.n	8002944 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800289e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f007 fcd1 	bl	800a258 <SDMMC_CmdSendStatus>
 80028b6:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d112      	bne.n	80028e4 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f007 fbc0 	bl	800a04a <SDMMC_GetResponse>
 80028ca:	61f8      	str	r0, [r7, #28]
        count--;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	3b01      	subs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_MMC_ConfigWideBusOperation+0xfa>
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e0      	bne.n	80028a4 <HAL_MMC_ConfigWideBusOperation+0xb8>
 80028e2:	e000      	b.n	80028e6 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 80028e4:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d025      	beq.n	8002938 <HAL_MMC_ConfigWideBusOperation+0x14c>
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d122      	bne.n	8002938 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80028fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002900:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8002902:	e01f      	b.n	8002944 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f107 0408 	add.w	r4, r7, #8
 800290a:	1d1d      	adds	r5, r3, #4
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	466a      	mov	r2, sp
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002926:	e882 0003 	stmia.w	r2, {r0, r1}
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002930:	4620      	mov	r0, r4
 8002932:	f007 fafd 	bl	8009f30 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8002936:	e005      	b.n	8002944 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 800293e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002942:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bdb0      	pop	{r4, r5, r7, pc}
 8002974:	03b70200 	.word	0x03b70200
 8002978:	03b70100 	.word	0x03b70100
 800297c:	03b70000 	.word	0x03b70000
 8002980:	1fe00fff 	.word	0x1fe00fff

08002984 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b096      	sub	sp, #88	@ 0x58
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800298c:	2302      	movs	r3, #2
 800298e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f007 fb12 	bl	8009fc0 <SDMMC_GetPowerState>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80029a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029a6:	e0e6      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f007 fbef 	bl	800a190 <SDMMC_CmdSendCID>
 80029b2:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80029b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MMC_InitCard+0x3a>
  {
    return errorstate;
 80029ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029bc:	e0db      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f007 fb40 	bl	800a04a <SDMMC_GetResponse>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2104      	movs	r1, #4
 80029d6:	4618      	mov	r0, r3
 80029d8:	f007 fb37 	bl	800a04a <SDMMC_GetResponse>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2108      	movs	r1, #8
 80029e8:	4618      	mov	r0, r3
 80029ea:	f007 fb2e 	bl	800a04a <SDMMC_GetResponse>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	210c      	movs	r1, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f007 fb25 	bl	800a04a <SDMMC_GetResponse>
 8002a00:	4602      	mov	r2, r0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f007 fbfc 	bl	800a20e <SDMMC_CmdSetRelAddMmc>
 8002a16:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a20:	e0a9      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8002a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f007 fbc9 	bl	800a1ce <SDMMC_CmdSendCSD>
 8002a3c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8002a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a46:	e096      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f007 fafb 	bl	800a04a <SDMMC_GetResponse>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 faf2 	bl	800a04a <SDMMC_GetResponse>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2108      	movs	r1, #8
 8002a72:	4618      	mov	r0, r3
 8002a74:	f007 fae9 	bl	800a04a <SDMMC_GetResponse>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	210c      	movs	r1, #12
 8002a84:	4618      	mov	r0, r3
 8002a86:	f007 fae0 	bl	800a04a <SDMMC_GetResponse>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2104      	movs	r1, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f007 fad7 	bl	800a04a <SDMMC_GetResponse>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	0d1a      	lsrs	r2, r3, #20
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f007 fb2c 	bl	800a10e <SDMMC_CmdSelDesel>
 8002ab6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8002abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac0:	e059      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fbef 	bl	80022ac <HAL_MMC_GetCardCSD>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	e04d      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f007 fbb6 	bl	800a258 <SDMMC_CmdSendStatus>
 8002aec:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3378      	adds	r3, #120	@ 0x78
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fd72 	bl	80025f4 <HAL_MMC_GetCardExtCSD>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1a:	e02c      	b.n	8002b76 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f007 fb95 	bl	800a258 <SDMMC_CmdSendStatus>
 8002b2e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f107 0408 	add.w	r4, r7, #8
 8002b48:	1d1d      	adds	r5, r3, #4
 8002b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681c      	ldr	r4, [r3, #0]
 8002b5a:	466a      	mov	r2, sp
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b64:	e882 0003 	stmia.w	r2, {r0, r1}
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f007 f9de 	bl	8009f30 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3750      	adds	r7, #80	@ 0x50
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b80 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f007 fadb 	bl	800a154 <SDMMC_CmdGoIdleState>
 8002b9e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d027      	beq.n	8002bf6 <MMC_PowerON+0x76>
  {
    return errorstate;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	e034      	b.n	8002c14 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bbc:	e02a      	b.n	8002c14 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <MMC_PowerON+0x9c>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f007 fb6a 	bl	800a29e <SDMMC_CmdOpCondition>
 8002bca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002bd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002bd6:	e01d      	b.n	8002c14 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fa33 	bl	800a04a <SDMMC_GetResponse>
 8002be4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	0fdb      	lsrs	r3, r3, #31
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <MMC_PowerON+0x72>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <MMC_PowerON+0x74>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0d6      	beq.n	8002baa <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	0e1b      	lsrs	r3, r3, #24
 8002c00:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c02:	d103      	bne.n	8002c0c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c0a:	e002      	b.n	8002c12 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	c0ff8000 	.word	0xc0ff8000

08002c20 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b090      	sub	sp, #64	@ 0x40
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7fe fc8c 	bl	800154c <HAL_GetTick>
 8002c34:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8002c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c52:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002c54:	2390      	movs	r3, #144	@ 0x90
 8002c56:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f107 0214 	add.w	r2, r7, #20
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f007 f9fe 	bl	800a070 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f007 fb52 	bl	800a324 <SDMMC_CmdSendEXTCSD>
 8002c80:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d04e      	beq.n	8002d26 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002e00 <MMC_ReadExtCSD+0x1e0>)
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0a6      	b.n	8002df6 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01c      	beq.n	8002cf0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cba:	e013      	b.n	8002ce4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f007 f95f 	bl	8009f84 <SDMMC_ReadFIFO>
 8002cc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8002cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ccc:	4413      	add	r3, r2
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	0892      	lsrs	r2, r2, #2
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d102      	bne.n	8002cde <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cdc:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8002cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	d9e8      	bls.n	8002cbc <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	3308      	adds	r3, #8
 8002cee:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8002cf0:	f7fe fc2c 	bl	800154c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d902      	bls.n	8002d06 <MMC_ReadExtCSD+0xe6>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e00 <MMC_ReadExtCSD+0x1e0>)
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e067      	b.n	8002df6 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0b9      	beq.n	8002ca8 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00f      	beq.n	8002d62 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <MMC_ReadExtCSD+0x1e0>)
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	f043 0208 	orr.w	r2, r3, #8
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e049      	b.n	8002df6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00f      	beq.n	8002d90 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	@ (8002e00 <MMC_ReadExtCSD+0x1e0>)
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e032      	b.n	8002df6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <MMC_ReadExtCSD+0x1e0>)
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e01b      	b.n	8002df6 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f007 fa44 	bl	800a258 <SDMMC_CmdSendStatus>
 8002dd0:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a06      	ldr	r2, [pc, #24]	@ (8002e04 <MMC_ReadExtCSD+0x1e4>)
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3740      	adds	r7, #64	@ 0x40
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	1fe00fff 	.word	0x1fe00fff
 8002e04:	18000f3a 	.word	0x18000f3a

08002e08 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	@ 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e22:	d004      	beq.n	8002e2e <MMC_PwrClassUpdate+0x26>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2a:	f040 8088 	bne.w	8002f3e <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002e32:	f107 0114 	add.w	r1, r7, #20
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	22bb      	movs	r2, #187	@ 0xbb
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff feef 	bl	8002c20 <MMC_ReadExtCSD>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e002      	b.n	8002e56 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	0e1b      	lsrs	r3, r3, #24
 8002e54:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d105      	bne.n	8002e68 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e00e      	b.n	8002e86 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d106      	bne.n	8002e7c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e004      	b.n	8002e86 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e82:	0e1b      	lsrs	r3, r3, #24
 8002e84:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d158      	bne.n	8002f3e <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e92:	d102      	bne.n	8002e9a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4053      	eors	r3, r2
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d04a      	beq.n	8002f3e <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eb4:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8002eb8:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f007 fa0d 	bl	800a2de <SDMMC_CmdSwitch>
 8002ec4:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d138      	bne.n	8002f3e <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8002ecc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f007 f9ba 	bl	800a258 <SDMMC_CmdSendStatus>
 8002ee4:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f007 f8a9 	bl	800a04a <SDMMC_GetResponse>
 8002ef8:	6238      	str	r0, [r7, #32]
            count--;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	3b01      	subs	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <MMC_PwrClassUpdate+0x10c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e0      	bne.n	8002ed2 <MMC_PwrClassUpdate+0xca>
 8002f10:	e000      	b.n	8002f14 <MMC_PwrClassUpdate+0x10c>
              break;
 8002f12:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <MMC_PwrClassUpdate+0x12a>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8002f2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002f2e:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8002f30:	e005      	b.n	8002f3e <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8002f38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f3c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	@ 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7fe faea 	bl	800154c <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e0a5      	b.n	80030d2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 809e 	bne.w	80030d2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fea6 	bl	8000ce8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002f9c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f912 	bl	80031ca <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_OSPI_Init+0x174>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68d1      	ldr	r1, [r2, #12]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6912      	ldr	r2, [r2, #16]
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0412      	lsls	r2, r2, #16
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6952      	ldr	r2, [r2, #20]
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	0212      	lsls	r2, r2, #8
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	69d2      	ldr	r2, [r2, #28]
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800300c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	3b01      	subs	r3, #1
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	2120      	movs	r1, #32
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fdcd 	bl	8003bd4 <OSPI_WaitFlagStateUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d146      	bne.n	80030d2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800307a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0202 	orr.w	r2, r2, #2
 80030b8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030c2:	d103      	bne.n	80030cc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80030ca:	e002      	b.n	80030d2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	f8e0c0f4 	.word	0xf8e0c0f4

080030e0 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7fe fa2e 	bl	800154c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <HAL_OSPI_Abort+0x2c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d052      	beq.n	80031b2 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0204 	bic.w	r2, r2, #4
 8003128:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fbf8 	bl	8001924 <HAL_DMA_Abort>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02b      	beq.n	80031aa <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0202 	orr.w	r2, r2, #2
 8003160:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2201      	movs	r2, #1
 800316c:	2102      	movs	r1, #2
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fd30 	bl	8003bd4 <OSPI_WaitFlagStateUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11f      	bne.n	80031be <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2200      	movs	r2, #0
 8003190:	2120      	movs	r1, #32
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd1e 	bl	8003bd4 <OSPI_WaitFlagStateUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80031a8:	e009      	b.n	80031be <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80031b0:	e005      	b.n	80031be <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2210      	movs	r2, #16
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80031bc:	e000      	b.n	80031c0 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80031be:	bf00      	nop
  }

  /* Return function status */
  return status;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b094      	sub	sp, #80	@ 0x50
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a9d      	ldr	r2, [pc, #628]	@ (800347c <HAL_OSPIM_Config+0x294>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d105      	bne.n	8003216 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003214:	e004      	b.n	8003220 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003216:	2301      	movs	r3, #1
 8003218:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003220:	2300      	movs	r3, #0
 8003222:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003226:	e01d      	b.n	8003264 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003228:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800322c:	3301      	adds	r3, #1
 800322e:	b2d8      	uxtb	r0, r3
 8003230:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003234:	f107 0114 	add.w	r1, r7, #20
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	4619      	mov	r1, r3
 8003244:	f000 fd06 	bl	8003c54 <OSPIM_GetConfig>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2208      	movs	r2, #8
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800325a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800325e:	3301      	adds	r3, #1
 8003260:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003264:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003268:	2b01      	cmp	r3, #1
 800326a:	d9dd      	bls.n	8003228 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800326c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 84a2 	bne.w	8003bba <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003276:	4b81      	ldr	r3, [pc, #516]	@ (800347c <HAL_OSPIM_Config+0x294>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003282:	4b7e      	ldr	r3, [pc, #504]	@ (800347c <HAL_OSPIM_Config+0x294>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7d      	ldr	r2, [pc, #500]	@ (800347c <HAL_OSPIM_Config+0x294>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800328e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800329a:	4b79      	ldr	r3, [pc, #484]	@ (8003480 <HAL_OSPIM_Config+0x298>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <HAL_OSPIM_Config+0x298>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a75      	ldr	r2, [pc, #468]	@ (8003480 <HAL_OSPIM_Config+0x298>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80032b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80032be:	4971      	ldr	r1, [pc, #452]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 80032c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	3350      	adds	r3, #80	@ 0x50
 80032cc:	443b      	add	r3, r7
 80032ce:	3b34      	subs	r3, #52	@ 0x34
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	486a      	ldr	r0, [pc, #424]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 80032dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3350      	adds	r3, #80	@ 0x50
 80032e8:	443b      	add	r3, r7
 80032ea:	3b34      	subs	r3, #52	@ 0x34
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4403      	add	r3, r0
 80032f8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80032fa:	4b62      	ldr	r3, [pc, #392]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80c0 	beq.w	8003488 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003308:	4b5e      	ldr	r3, [pc, #376]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5d      	ldr	r2, [pc, #372]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003314:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 8162 	bne.w	80035e2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800331e:	4959      	ldr	r1, [pc, #356]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 8003320:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3350      	adds	r3, #80	@ 0x50
 800332e:	443b      	add	r3, r7
 8003330:	3b3c      	subs	r3, #60	@ 0x3c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	4851      	ldr	r0, [pc, #324]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 800333e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	3350      	adds	r3, #80	@ 0x50
 800334c:	443b      	add	r3, r7
 800334e:	3b3c      	subs	r3, #60	@ 0x3c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3b01      	subs	r3, #1
 8003354:	f041 0202 	orr.w	r2, r1, #2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4403      	add	r3, r0
 800335c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800335e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	3350      	adds	r3, #80	@ 0x50
 800336c:	443b      	add	r3, r7
 800336e:	3b38      	subs	r3, #56	@ 0x38
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01f      	beq.n	80033b6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003376:	4943      	ldr	r1, [pc, #268]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 8003378:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3350      	adds	r3, #80	@ 0x50
 8003386:	443b      	add	r3, r7
 8003388:	3b38      	subs	r3, #56	@ 0x38
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	483b      	ldr	r0, [pc, #236]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 8003396:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	3350      	adds	r3, #80	@ 0x50
 80033a4:	443b      	add	r3, r7
 80033a6:	3b38      	subs	r3, #56	@ 0x38
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f041 0220 	orr.w	r2, r1, #32
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80033b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	3350      	adds	r3, #80	@ 0x50
 80033c4:	443b      	add	r3, r7
 80033c6:	3b30      	subs	r3, #48	@ 0x30
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d023      	beq.n	8003416 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80033ce:	492d      	ldr	r1, [pc, #180]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 80033d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	3350      	adds	r3, #80	@ 0x50
 80033de:	443b      	add	r3, r7
 80033e0:	3b30      	subs	r3, #48	@ 0x30
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	4824      	ldr	r0, [pc, #144]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 80033f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3350      	adds	r3, #80	@ 0x50
 8003400:	443b      	add	r3, r7
 8003402:	3b30      	subs	r3, #48	@ 0x30
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003416:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	3350      	adds	r3, #80	@ 0x50
 8003424:	443b      	add	r3, r7
 8003426:	3b2c      	subs	r3, #44	@ 0x2c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80d9 	beq.w	80035e2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8003430:	4914      	ldr	r1, [pc, #80]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 8003432:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	3350      	adds	r3, #80	@ 0x50
 8003440:	443b      	add	r3, r7
 8003442:	3b2c      	subs	r3, #44	@ 0x2c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	480c      	ldr	r0, [pc, #48]	@ (8003484 <HAL_OSPIM_Config+0x29c>)
 8003454:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003458:	4613      	mov	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	3350      	adds	r3, #80	@ 0x50
 8003462:	443b      	add	r3, r7
 8003464:	3b2c      	subs	r3, #44	@ 0x2c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4403      	add	r3, r0
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e0b3      	b.n	80035e2 <HAL_OSPIM_Config+0x3fa>
 800347a:	bf00      	nop
 800347c:	420d1400 	.word	0x420d1400
 8003480:	420d2400 	.word	0x420d2400
 8003484:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	3350      	adds	r3, #80	@ 0x50
 8003494:	443b      	add	r3, r7
 8003496:	3b3c      	subs	r3, #60	@ 0x3c
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80a1 	beq.w	80035e2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80034a0:	4995      	ldr	r1, [pc, #596]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80034a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	3350      	adds	r3, #80	@ 0x50
 80034ae:	443b      	add	r3, r7
 80034b0:	3b3c      	subs	r3, #60	@ 0x3c
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	488e      	ldr	r0, [pc, #568]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80034be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3350      	adds	r3, #80	@ 0x50
 80034ca:	443b      	add	r3, r7
 80034cc:	3b3c      	subs	r3, #60	@ 0x3c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	f021 0201 	bic.w	r2, r1, #1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80034dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	3350      	adds	r3, #80	@ 0x50
 80034e8:	443b      	add	r3, r7
 80034ea:	3b38      	subs	r3, #56	@ 0x38
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01d      	beq.n	800352e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80034f2:	4981      	ldr	r1, [pc, #516]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80034f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	3350      	adds	r3, #80	@ 0x50
 8003500:	443b      	add	r3, r7
 8003502:	3b38      	subs	r3, #56	@ 0x38
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	487a      	ldr	r0, [pc, #488]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 8003510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	3350      	adds	r3, #80	@ 0x50
 800351c:	443b      	add	r3, r7
 800351e:	3b38      	subs	r3, #56	@ 0x38
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3b01      	subs	r3, #1
 8003524:	f021 0210 	bic.w	r2, r1, #16
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4403      	add	r3, r0
 800352c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800352e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3350      	adds	r3, #80	@ 0x50
 800353a:	443b      	add	r3, r7
 800353c:	3b30      	subs	r3, #48	@ 0x30
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d021      	beq.n	8003588 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003544:	496c      	ldr	r1, [pc, #432]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 8003546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	3350      	adds	r3, #80	@ 0x50
 8003552:	443b      	add	r3, r7
 8003554:	3b30      	subs	r3, #48	@ 0x30
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	4864      	ldr	r0, [pc, #400]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 8003566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	3350      	adds	r3, #80	@ 0x50
 8003572:	443b      	add	r3, r7
 8003574:	3b30      	subs	r3, #48	@ 0x30
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4403      	add	r3, r0
 8003586:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	3350      	adds	r3, #80	@ 0x50
 8003594:	443b      	add	r3, r7
 8003596:	3b2c      	subs	r3, #44	@ 0x2c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d021      	beq.n	80035e2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800359e:	4956      	ldr	r1, [pc, #344]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80035a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	3350      	adds	r3, #80	@ 0x50
 80035ac:	443b      	add	r3, r7
 80035ae:	3b2c      	subs	r3, #44	@ 0x2c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	484e      	ldr	r0, [pc, #312]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80035c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	3350      	adds	r3, #80	@ 0x50
 80035cc:	443b      	add	r3, r7
 80035ce:	3b2c      	subs	r3, #44	@ 0x2c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4403      	add	r3, r0
 80035e0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	3350      	adds	r3, #80	@ 0x50
 80035f4:	443b      	add	r3, r7
 80035f6:	3b3c      	subs	r3, #60	@ 0x3c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4299      	cmp	r1, r3
 80035fc:	d03c      	beq.n	8003678 <HAL_OSPIM_Config+0x490>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3350      	adds	r3, #80	@ 0x50
 8003610:	443b      	add	r3, r7
 8003612:	3b34      	subs	r3, #52	@ 0x34
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4299      	cmp	r1, r3
 8003618:	d02e      	beq.n	8003678 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	3350      	adds	r3, #80	@ 0x50
 800362c:	443b      	add	r3, r7
 800362e:	3b38      	subs	r3, #56	@ 0x38
 8003630:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003632:	4299      	cmp	r1, r3
 8003634:	d103      	bne.n	800363e <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11c      	bne.n	8003678 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	3350      	adds	r3, #80	@ 0x50
 8003650:	443b      	add	r3, r7
 8003652:	3b30      	subs	r3, #48	@ 0x30
 8003654:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003656:	4299      	cmp	r1, r3
 8003658:	d00e      	beq.n	8003678 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6919      	ldr	r1, [r3, #16]
 800365e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	3350      	adds	r3, #80	@ 0x50
 800366c:	443b      	add	r3, r7
 800366e:	3b2c      	subs	r3, #44	@ 0x2c
 8003670:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003672:	4299      	cmp	r1, r3
 8003674:	f040 810e 	bne.w	8003894 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3350      	adds	r3, #80	@ 0x50
 800368a:	443b      	add	r3, r7
 800368c:	3b3c      	subs	r3, #60	@ 0x3c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4299      	cmp	r1, r3
 8003692:	d133      	bne.n	80036fc <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	3350      	adds	r3, #80	@ 0x50
 80036a6:	443b      	add	r3, r7
 80036a8:	3b38      	subs	r3, #56	@ 0x38
 80036aa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80036ac:	4299      	cmp	r1, r3
 80036ae:	d125      	bne.n	80036fc <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	68d9      	ldr	r1, [r3, #12]
 80036b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	3350      	adds	r3, #80	@ 0x50
 80036c2:	443b      	add	r3, r7
 80036c4:	3b30      	subs	r3, #48	@ 0x30
 80036c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80036c8:	4299      	cmp	r1, r3
 80036ca:	d117      	bne.n	80036fc <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6919      	ldr	r1, [r3, #16]
 80036d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	3350      	adds	r3, #80	@ 0x50
 80036de:	443b      	add	r3, r7
 80036e0:	3b2c      	subs	r3, #44	@ 0x2c
 80036e2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d109      	bne.n	80036fc <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80036e8:	4b03      	ldr	r3, [pc, #12]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a02      	ldr	r2, [pc, #8]	@ (80036f8 <HAL_OSPIM_Config+0x510>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e0ce      	b.n	8003894 <HAL_OSPIM_Config+0x6ac>
 80036f6:	bf00      	nop
 80036f8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80036fc:	49a4      	ldr	r1, [pc, #656]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80036fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	3350      	adds	r3, #80	@ 0x50
 800370c:	443b      	add	r3, r7
 800370e:	3b3c      	subs	r3, #60	@ 0x3c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	489d      	ldr	r0, [pc, #628]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 800371c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	3350      	adds	r3, #80	@ 0x50
 800372a:	443b      	add	r3, r7
 800372c:	3b3c      	subs	r3, #60	@ 0x3c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	f021 0201 	bic.w	r2, r1, #1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800373c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	3350      	adds	r3, #80	@ 0x50
 800374a:	443b      	add	r3, r7
 800374c:	3b38      	subs	r3, #56	@ 0x38
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01f      	beq.n	8003794 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003754:	498e      	ldr	r1, [pc, #568]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003756:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	3350      	adds	r3, #80	@ 0x50
 8003764:	443b      	add	r3, r7
 8003766:	3b38      	subs	r3, #56	@ 0x38
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	6859      	ldr	r1, [r3, #4]
 8003772:	4887      	ldr	r0, [pc, #540]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003774:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3350      	adds	r3, #80	@ 0x50
 8003782:	443b      	add	r3, r7
 8003784:	3b38      	subs	r3, #56	@ 0x38
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	f021 0210 	bic.w	r2, r1, #16
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4403      	add	r3, r0
 8003792:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003794:	497e      	ldr	r1, [pc, #504]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003796:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	3350      	adds	r3, #80	@ 0x50
 80037a4:	443b      	add	r3, r7
 80037a6:	3b34      	subs	r3, #52	@ 0x34
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	4877      	ldr	r0, [pc, #476]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80037b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	3350      	adds	r3, #80	@ 0x50
 80037c2:	443b      	add	r3, r7
 80037c4:	3b34      	subs	r3, #52	@ 0x34
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4403      	add	r3, r0
 80037d2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	3350      	adds	r3, #80	@ 0x50
 80037e2:	443b      	add	r3, r7
 80037e4:	3b30      	subs	r3, #48	@ 0x30
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d023      	beq.n	8003834 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037ec:	4968      	ldr	r1, [pc, #416]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80037ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	3350      	adds	r3, #80	@ 0x50
 80037fc:	443b      	add	r3, r7
 80037fe:	3b30      	subs	r3, #48	@ 0x30
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	4860      	ldr	r0, [pc, #384]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003810:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	3350      	adds	r3, #80	@ 0x50
 800381e:	443b      	add	r3, r7
 8003820:	3b30      	subs	r3, #48	@ 0x30
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003834:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	3350      	adds	r3, #80	@ 0x50
 8003842:	443b      	add	r3, r7
 8003844:	3b2c      	subs	r3, #44	@ 0x2c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800384c:	4950      	ldr	r1, [pc, #320]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 800384e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	3350      	adds	r3, #80	@ 0x50
 800385c:	443b      	add	r3, r7
 800385e:	3b2c      	subs	r3, #44	@ 0x2c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	4848      	ldr	r0, [pc, #288]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003870:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	3350      	adds	r3, #80	@ 0x50
 800387e:	443b      	add	r3, r7
 8003880:	3b2c      	subs	r3, #44	@ 0x2c
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4403      	add	r3, r0
 8003892:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003894:	4a3e      	ldr	r2, [pc, #248]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	3b01      	subs	r3, #1
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a8:	025b      	lsls	r3, r3, #9
 80038aa:	431a      	orrs	r2, r3
 80038ac:	4938      	ldr	r1, [pc, #224]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <HAL_OSPIM_Config+0x710>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ce:	d813      	bhi.n	80038f8 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90a      	bls.n	80038f8 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80038e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	4927      	ldr	r1, [pc, #156]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 809a 	beq.w	8003a3a <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003906:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 0203 	bic.w	r2, r3, #3
 8003918:	491d      	ldr	r1, [pc, #116]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d011      	beq.n	8003956 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003932:	4a17      	ldr	r2, [pc, #92]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	3b01      	subs	r3, #1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003944:	4912      	ldr	r1, [pc, #72]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f042 0210 	orr.w	r2, r2, #16
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003962:	4a0b      	ldr	r2, [pc, #44]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003978:	4905      	ldr	r1, [pc, #20]	@ (8003990 <HAL_OSPIM_Config+0x7a8>)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	3b01      	subs	r3, #1
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e01b      	b.n	80039c8 <HAL_OSPIM_Config+0x7e0>
 8003990:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800399c:	4a8a      	ldr	r2, [pc, #552]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80039b2:	4985      	ldr	r1, [pc, #532]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d016      	beq.n	8003a02 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039d4:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	3b01      	subs	r3, #1
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80039ea:	4977      	ldr	r1, [pc, #476]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	e0c3      	b.n	8003b8a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80bf 	beq.w	8003b8a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003a22:	4969      	ldr	r1, [pc, #420]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e0a7      	b.n	8003b8a <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003a3a:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 0203 	bic.w	r2, r3, #3
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	495d      	ldr	r1, [pc, #372]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d014      	beq.n	8003a96 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a6c:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a80:	015b      	lsls	r3, r3, #5
 8003a82:	431a      	orrs	r2, r3
 8003a84:	4950      	ldr	r1, [pc, #320]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f042 0210 	orr.w	r2, r2, #16
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003aa2:	4a49      	ldr	r2, [pc, #292]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aba:	049b      	lsls	r3, r3, #18
 8003abc:	431a      	orrs	r2, r3
 8003abe:	4942      	ldr	r1, [pc, #264]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	e01c      	b.n	8003b10 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ade:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af6:	069b      	lsls	r3, r3, #26
 8003af8:	431a      	orrs	r2, r3
 8003afa:	4933      	ldr	r1, [pc, #204]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d019      	beq.n	8003b50 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b34:	049b      	lsls	r3, r3, #18
 8003b36:	431a      	orrs	r2, r3
 8003b38:	4923      	ldr	r1, [pc, #140]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e01c      	b.n	8003b8a <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b58:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b70:	069b      	lsls	r3, r3, #26
 8003b72:	431a      	orrs	r2, r3
 8003b74:	4914      	ldr	r1, [pc, #80]	@ (8003bc8 <HAL_OSPIM_Config+0x9e0>)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003b8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_OSPIM_Config+0x9e4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bcc <HAL_OSPIM_Config+0x9e4>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003ba2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003bae:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <HAL_OSPIM_Config+0x9e8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a07      	ldr	r2, [pc, #28]	@ (8003bd0 <HAL_OSPIM_Config+0x9e8>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003bba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3750      	adds	r7, #80	@ 0x50
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	420c4000 	.word	0x420c4000
 8003bcc:	420d1400 	.word	0x420d1400
 8003bd0:	420d2400 	.word	0x420d2400

08003bd4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003be4:	e022      	b.n	8003c2c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d01e      	beq.n	8003c2c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fd fcad 	bl	800154c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d00b      	beq.n	8003c2c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1a:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e00e      	b.n	8003c4a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1ce      	bne.n	8003be6 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <OSPIM_GetConfig+0x26>
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d802      	bhi.n	8003c7a <OSPIM_GetConfig+0x26>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
 8003c7e:	e098      	b.n	8003db2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d10b      	bne.n	8003cbc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003ca4:	4b46      	ldr	r3, [pc, #280]	@ (8003dc0 <OSPIM_GetConfig+0x16c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003cb0:	4b44      	ldr	r3, [pc, #272]	@ (8003dc4 <OSPIM_GetConfig+0x170>)
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	e002      	b.n	8003cbc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cba:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e074      	b.n	8003dac <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc0 <OSPIM_GetConfig+0x16c>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4053      	eors	r3, r2
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4053      	eors	r3, r2
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d018      	beq.n	8003d6a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4053      	eors	r3, r2
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d111      	bne.n	8003d6a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e005      	b.n	8003d6a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d018      	beq.n	8003da6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4053      	eors	r3, r2
 8003d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d111      	bne.n	8003da6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	e005      	b.n	8003da6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d987      	bls.n	8003cc2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	420c4000 	.word	0x420c4000
 8003dc4:	04040222 	.word	0x04040222

08003dc8 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0202 	orr.w	r2, r2, #2
 8003de4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2208      	movs	r2, #8
 8003dea:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d109      	bne.n	8003e0a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003df6:	4815      	ldr	r0, [pc, #84]	@ (8003e4c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003df8:	f7ff f8a6 	bl	8002f48 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4813      	ldr	r0, [pc, #76]	@ (8003e4c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003e00:	f006 f877 	bl	8009ef2 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e00d      	b.n	8003e26 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	@ (8003e50 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003e14:	480f      	ldr	r0, [pc, #60]	@ (8003e54 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003e16:	f7ff f897 	bl	8002f48 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	480d      	ldr	r0, [pc, #52]	@ (8003e54 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003e1e:	f006 f868 	bl	8009ef2 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff f95a 	bl	80030e0 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0202 	bic.w	r2, r2, #2
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	420d1400 	.word	0x420d1400
 8003e4c:	420cf000 	.word	0x420cf000
 8003e50:	420d2400 	.word	0x420d2400
 8003e54:	420cf400 	.word	0x420cf400

08003e58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0fe      	b.n	8004068 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fd f926 	bl	80010d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2203      	movs	r2, #3
 8003e88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f006 fcf8 	bl	800a886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7c1a      	ldrb	r2, [r3, #16]
 8003e9e:	f88d 2000 	strb.w	r2, [sp]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea6:	f006 fc0b 	bl	800a6c0 <USB_CoreInit>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d5      	b.n	8004068 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f006 fcf0 	bl	800a8a8 <USB_SetCurrentMode>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e0c6      	b.n	8004068 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	e04a      	b.n	8003f76 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3315      	adds	r3, #21
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3314      	adds	r3, #20
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	b298      	uxth	r0, r3
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	332e      	adds	r3, #46	@ 0x2e
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3318      	adds	r3, #24
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	331c      	adds	r3, #28
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3320      	adds	r3, #32
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3324      	adds	r3, #36	@ 0x24
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	3301      	adds	r3, #1
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	791b      	ldrb	r3, [r3, #4]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3af      	bcc.n	8003ee0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e044      	b.n	8004010 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	3301      	adds	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	429a      	cmp	r2, r3
 8004018:	d3b5      	bcc.n	8003f86 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7c1a      	ldrb	r2, [r3, #16]
 8004022:	f88d 2000 	strb.w	r2, [sp]
 8004026:	3304      	adds	r3, #4
 8004028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800402a:	f006 fc89 	bl	800a940 <USB_DevInit>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e013      	b.n	8004068 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7b1b      	ldrb	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f001 f9c8 	bl	80053ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f007 fcd8 	bl	800ba16 <USB_DevDisconnect>

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_PCD_Start+0x16>
 8004082:	2302      	movs	r3, #2
 8004084:	e012      	b.n	80040ac <HAL_PCD_Start+0x3c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f006 fbe6 	bl	800a864 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f007 fc99 	bl	800b9d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_Stop+0x16>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e018      	b.n	80040fc <HAL_PCD_Stop+0x48>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f006 fbd5 	bl	800a886 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f007 fc98 	bl	800ba16 <USB_DevDisconnect>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2110      	movs	r1, #16
 80040ec:	4618      	mov	r0, r3
 80040ee:	f006 fd97 	bl	800ac20 <USB_FlushTxFifo>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_UNLOCK(hpcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b08d      	sub	sp, #52	@ 0x34
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f007 fd2f 	bl	800bb7e <USB_GetMode>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 84b9 	bne.w	8004a9a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f007 fc93 	bl	800ba58 <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 84af 	beq.w	8004a98 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f007 fc80 	bl	800ba58 <USB_ReadInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f002 0202 	and.w	r2, r2, #2
 8004170:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f007 fc6e 	bl	800ba58 <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d161      	bne.n	800424a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0210 	bic.w	r2, r2, #16
 8004194:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	3304      	adds	r3, #4
 80041b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80041bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c0:	d124      	bne.n	800420c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d035      	beq.n	800423a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041dc:	b29b      	uxth	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	6a38      	ldr	r0, [r7, #32]
 80041e2:	f007 faa5 	bl	800b730 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f2:	441a      	add	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004204:	441a      	add	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	615a      	str	r2, [r3, #20]
 800420a:	e016      	b.n	800423a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004212:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004216:	d110      	bne.n	800423a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800421e:	2208      	movs	r2, #8
 8004220:	4619      	mov	r1, r3
 8004222:	6a38      	ldr	r0, [r7, #32]
 8004224:	f007 fa84 	bl	800b730 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004234:	441a      	add	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0210 	orr.w	r2, r2, #16
 8004248:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f007 fc02 	bl	800ba58 <USB_ReadInterrupts>
 8004254:	4603      	mov	r3, r0
 8004256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800425a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800425e:	f040 80a7 	bne.w	80043b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f007 fc07 	bl	800ba7e <USB_ReadDevAllOutEpInterrupt>
 8004270:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004272:	e099      	b.n	80043a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 808e 	beq.w	800439c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f007 fc2b 	bl	800bae6 <USB_ReadDevOutEPInterrupt>
 8004290:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 ff15 	bl	80050e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	2308      	movs	r3, #8
 80042d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 ffeb 	bl	80052b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f0:	461a      	mov	r2, r3
 80042f2:	2310      	movs	r3, #16
 80042f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d030      	beq.n	8004362 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004308:	2b80      	cmp	r3, #128	@ 0x80
 800430a:	d109      	bne.n	8004320 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800431a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800431e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d108      	bne.n	8004350 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fba8 	bl	8004aa0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2302      	movs	r3, #2
 8004360:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	2320      	movs	r3, #32
 800437c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800439a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	3301      	adds	r3, #1
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f47f af62 	bne.w	8004274 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f007 fb4f 	bl	800ba58 <USB_ReadInterrupts>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043c4:	f040 80db 	bne.w	800457e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f007 fb70 	bl	800bab2 <USB_ReadDevAllInEpInterrupt>
 80043d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80043d8:	e0cd      	b.n	8004576 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80c2 	beq.w	800456a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f007 fb96 	bl	800bb22 <USB_ReadDevInEPInterrupt>
 80043f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d057      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2201      	movs	r2, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	43db      	mvns	r3, r3
 800441c:	69f9      	ldr	r1, [r7, #28]
 800441e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004422:	4013      	ands	r3, r2
 8004424:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004432:	461a      	mov	r2, r3
 8004434:	2301      	movs	r3, #1
 8004436:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	799b      	ldrb	r3, [r3, #6]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d132      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3320      	adds	r3, #32
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4403      	add	r3, r0
 8004460:	331c      	adds	r3, #28
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4419      	add	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4403      	add	r3, r0
 8004474:	3320      	adds	r3, #32
 8004476:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x3a2>
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3324      	adds	r3, #36	@ 0x24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800449e:	461a      	mov	r2, r3
 80044a0:	2101      	movs	r1, #1
 80044a2:	f007 fb9d 	bl	800bbe0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f009 fc59 	bl	800dd64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c8:	461a      	mov	r2, r3
 80044ca:	2308      	movs	r3, #8
 80044cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	2310      	movs	r3, #16
 80044e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	2340      	movs	r3, #64	@ 0x40
 8004504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004512:	6a38      	ldr	r0, [r7, #32]
 8004514:	f006 fb84 	bl	800ac20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	3310      	adds	r3, #16
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	78db      	ldrb	r3, [r3, #3]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	b2db      	uxtb	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fab9 	bl	8004ab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004552:	461a      	mov	r2, r3
 8004554:	2302      	movs	r3, #2
 8004556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fd2f 	bl	8004fc8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	3301      	adds	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f af2e 	bne.w	80043da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f007 fa68 	bl	800ba58 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004592:	d122      	bne.n	80045da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d108      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ba:	2100      	movs	r1, #0
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 ff39 	bl	8005434 <HAL_PCDEx_LPM_Callback>
 80045c2:	e002      	b.n	80045ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f009 fd8d 	bl	800e0e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f007 fa3a 	bl	800ba58 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ee:	d112      	bne.n	8004616 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f009 fd59 	bl	800e0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004614:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f007 fa1c 	bl	800ba58 <USB_ReadInterrupts>
 8004620:	4603      	mov	r3, r0
 8004622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d121      	bne.n	8004670 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800463a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004642:	2b00      	cmp	r3, #0
 8004644:	d111      	bne.n	800466a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004660:	2101      	movs	r1, #1
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fee6 	bl	8005434 <HAL_PCDEx_LPM_Callback>
 8004668:	e002      	b.n	8004670 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f009 fd24 	bl	800e0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f007 f9ef 	bl	800ba58 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	f040 80b7 	bne.w	80047f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2110      	movs	r1, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f006 fabc 	bl	800ac20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ac:	e046      	b.n	800473c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004734:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	3301      	adds	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	461a      	mov	r2, r3
 8004742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004744:	4293      	cmp	r3, r2
 8004746:	d3b2      	bcc.n	80046ae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004756:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800475a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7bdb      	ldrb	r3, [r3, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004774:	f043 030b 	orr.w	r3, r3, #11
 8004778:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800478a:	f043 030b 	orr.w	r3, r3, #11
 800478e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004790:	e015      	b.n	80047be <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80047a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b8:	f043 030b 	orr.w	r3, r3, #11
 80047bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047e0:	461a      	mov	r2, r3
 80047e2:	f007 f9fd 	bl	800bbe0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f007 f92c 	bl	800ba58 <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800480a:	d123      	bne.n	8004854 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f007 f9c2 	bl	800bb9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f006 fa79 	bl	800ad12 <USB_GetDevSpeed>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681c      	ldr	r4, [r3, #0]
 800482c:	f002 f8f8 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8004830:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004836:	461a      	mov	r2, r3
 8004838:	4620      	mov	r0, r4
 800483a:	f005 ff71 	bl	800a720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f009 fbd6 	bl	800dff0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004852:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f007 f8fd 	bl	800ba58 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10a      	bne.n	800487e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f009 fc51 	bl	800e110 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f002 0208 	and.w	r2, r2, #8
 800487c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f007 f8e8 	bl	800ba58 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d123      	bne.n	80048da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800489e:	2301      	movs	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	e014      	b.n	80048ce <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb22 	bl	8004f0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	791b      	ldrb	r3, [r3, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d3e4      	bcc.n	80048a4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f007 f8ba 	bl	800ba58 <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d13c      	bne.n	800496a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	e02b      	b.n	800494e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3318      	adds	r3, #24
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d115      	bne.n	8004948 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800491c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	da12      	bge.n	8004948 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3317      	adds	r3, #23
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fae2 	bl	8004f0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	3301      	adds	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	4293      	cmp	r3, r2
 8004958:	d3cd      	bcc.n	80048f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f007 f872 	bl	800ba58 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800497e:	d156      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004980:	2301      	movs	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
 8004984:	e045      	b.n	8004a12 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d12e      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da2b      	bge.n	8004a0c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	0c1a      	lsrs	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80049be:	4053      	eors	r3, r2
 80049c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d121      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a08:	6053      	str	r3, [r2, #4]
            break;
 8004a0a:	e008      	b.n	8004a1e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	3301      	adds	r3, #1
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	791b      	ldrb	r3, [r3, #4]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d3b3      	bcc.n	8004986 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f007 f810 	bl	800ba58 <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d10a      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f009 fb03 	bl	800e050 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f006 fffa 	bl	800ba58 <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d115      	bne.n	8004a9a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f009 fafb 	bl	800e07c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e000      	b.n	8004a9a <HAL_PCD_IRQHandler+0x996>
      return;
 8004a98:	bf00      	nop
    }
  }
}
 8004a9a:	3734      	adds	r7, #52	@ 0x34
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}

08004aa0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_PCD_SetAddress+0x1a>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e012      	b.n	8004b10 <HAL_PCD_SetAddress+0x40>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f006 ff41 	bl	800b988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	803b      	strh	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	da0f      	bge.n	8004b5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 020f 	and.w	r2, r3, #15
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	3304      	adds	r3, #4
 8004b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	705a      	strb	r2, [r3, #1]
 8004b5c:	e00f      	b.n	8004b7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	3304      	adds	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b8a:	883b      	ldrh	r3, [r7, #0]
 8004b8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	78ba      	ldrb	r2, [r7, #2]
 8004b98:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bac:	78bb      	ldrb	r3, [r7, #2]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d102      	bne.n	8004bb8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_PCD_EP_Open+0xae>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e00e      	b.n	8004be4 <HAL_PCD_EP_Open+0xcc>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f006 f8c1 	bl	800ad5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004be2:	7afb      	ldrb	r3, [r7, #11]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da0f      	bge.n	8004c20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3310      	adds	r3, #16
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	705a      	strb	r2, [r3, #1]
 8004c1e:	e00f      	b.n	8004c40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	3304      	adds	r3, #4
 8004c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_PCD_EP_Close+0x6e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e00e      	b.n	8004c78 <HAL_PCD_EP_Close+0x8c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f006 f8ff 	bl	800ae6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	799b      	ldrb	r3, [r3, #6]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	799b      	ldrb	r3, [r3, #6]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	f006 f99c 	bl	800b024 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004d18:	681b      	ldr	r3, [r3, #0]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	460b      	mov	r3, r1
 8004d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	3310      	adds	r3, #16
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2201      	movs	r2, #1
 8004d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	799b      	ldrb	r3, [r3, #6]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d102      	bne.n	8004d80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	799b      	ldrb	r3, [r3, #6]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	f006 f94a 	bl	800b024 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	7912      	ldrb	r2, [r2, #4]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e04f      	b.n	8004e58 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0f      	bge.n	8004de0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3310      	adds	r3, #16
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
 8004dde:	e00d      	b.n	8004dfc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	3304      	adds	r3, #4
 8004df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_PCD_EP_SetStall+0x82>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e01d      	b.n	8004e58 <HAL_PCD_EP_SetStall+0xbe>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f006 fcd8 	bl	800b7e0 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7999      	ldrb	r1, [r3, #6]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f006 fec9 	bl	800bbe0 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	7912      	ldrb	r2, [r2, #4]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da0f      	bge.n	8004ea6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	3310      	adds	r3, #16
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	705a      	strb	r2, [r3, #1]
 8004ea4:	e00f      	b.n	8004ec6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_PCD_EP_ClrStall+0x86>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e00e      	b.n	8004f04 <HAL_PCD_EP_ClrStall+0xa4>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f006 fce1 	bl	800b8bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da0c      	bge.n	8004f3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3310      	adds	r3, #16
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e00c      	b.n	8004f54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3304      	adds	r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f006 fb00 	bl	800b560 <USB_EPStopXfer>
 8004f60:	4603      	mov	r3, r0
 8004f62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f64:	7afb      	ldrb	r3, [r7, #11]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_PCD_EP_Flush+0x1a>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e01b      	b.n	8004fc0 <HAL_PCD_EP_Flush+0x52>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8004f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da09      	bge.n	8004fac <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f005 fe3b 	bl	800ac20 <USB_FlushTxFifo>
 8004faa:	e004      	b.n	8004fb6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f005 fe67 	bl	800ac84 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	@ 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	3304      	adds	r3, #4
 8004fee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d901      	bls.n	8005000 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e06b      	b.n	80050d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d902      	bls.n	800501c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3303      	adds	r3, #3
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005024:	e02a      	b.n	800507c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	429a      	cmp	r2, r3
 800503a:	d902      	bls.n	8005042 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3303      	adds	r3, #3
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68d9      	ldr	r1, [r3, #12]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f006 fb28 	bl	800b6b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	429a      	cmp	r2, r3
 8005090:	d809      	bhi.n	80050a6 <PCD_WriteEmptyTxFifo+0xde>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800509a:	429a      	cmp	r2, r3
 800509c:	d203      	bcs.n	80050a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1bf      	bne.n	8005026 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d811      	bhi.n	80050d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2201      	movs	r2, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	6939      	ldr	r1, [r7, #16]
 80050ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050d2:	4013      	ands	r3, r2
 80050d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	333c      	adds	r3, #60	@ 0x3c
 80050f8:	3304      	adds	r3, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	799b      	ldrb	r3, [r3, #6]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d17b      	bne.n	800520e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4a61      	ldr	r2, [pc, #388]	@ (80052a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	f240 80b9 	bls.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80b3 	beq.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	e0a7      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	2320      	movs	r3, #32
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	e098      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 8093 	bne.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4a4b      	ldr	r2, [pc, #300]	@ (80052a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d90f      	bls.n	800519e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519a:	6093      	str	r3, [r2, #8]
 800519c:	e07e      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	440b      	add	r3, r1
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d114      	bne.n	8005200 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051e8:	461a      	mov	r2, r3
 80051ea:	2101      	movs	r1, #1
 80051ec:	f006 fcf8 	bl	800bbe0 <USB_EP0_OutStart>
 80051f0:	e006      	b.n	8005200 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f008 fe6a 	bl	800dee0 <HAL_PCD_DataOutStageCallback>
 800520c:	e046      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d124      	bne.n	8005260 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005232:	6093      	str	r3, [r2, #8]
 8005234:	e032      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	2320      	movs	r3, #32
 8005250:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f008 fe41 	bl	800dee0 <HAL_PCD_DataOutStageCallback>
 800525e:	e01d      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d114      	bne.n	8005290 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d108      	bne.n	8005290 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005288:	461a      	mov	r2, r3
 800528a:	2100      	movs	r1, #0
 800528c:	f006 fca8 	bl	800bbe0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f008 fe22 	bl	800dee0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	4f54300a 	.word	0x4f54300a
 80052ac:	4f54310a 	.word	0x4f54310a

080052b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	333c      	adds	r3, #60	@ 0x3c
 80052c8:	3304      	adds	r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <PCD_EP_OutSetupPacket_int+0x88>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d90e      	bls.n	8005304 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fc:	461a      	mov	r2, r3
 80052fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005302:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f008 fcab 	bl	800dc60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a0a      	ldr	r2, [pc, #40]	@ (8005338 <PCD_EP_OutSetupPacket_int+0x88>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d90c      	bls.n	800532c <PCD_EP_OutSetupPacket_int+0x7c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	799b      	ldrb	r3, [r3, #6]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d108      	bne.n	800532c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005324:	461a      	mov	r2, r3
 8005326:	2101      	movs	r1, #1
 8005328:	f006 fc5a 	bl	800bbe0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	4f54300a 	.word	0x4f54300a

0800533c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
 8005348:	4613      	mov	r3, r2
 800534a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800535a:	883b      	ldrh	r3, [r7, #0]
 800535c:	0419      	lsls	r1, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	430a      	orrs	r2, r1
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
 8005368:	e028      	b.n	80053bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4413      	add	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e00d      	b.n	800539a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	3340      	adds	r3, #64	@ 0x40
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4413      	add	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	3301      	adds	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	3b01      	subs	r3, #1
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3ec      	bcc.n	800537e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053a4:	883b      	ldrh	r3, [r7, #0]
 80053a6:	0418      	lsls	r0, r3, #16
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4302      	orrs	r2, r0
 80053b4:	3340      	adds	r3, #64	@ 0x40
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541e:	f043 0303 	orr.w	r3, r3, #3
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800545c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d10b      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546c:	d905      	bls.n	800547a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800546e:	4b33      	ldr	r3, [pc, #204]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a32      	ldr	r2, [pc, #200]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005478:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e057      	b.n	800552e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005484:	d90a      	bls.n	800549c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005486:	4b2d      	ldr	r3, [pc, #180]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4313      	orrs	r3, r2
 8005492:	4a2a      	ldr	r2, [pc, #168]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005498:	60d3      	str	r3, [r2, #12]
 800549a:	e007      	b.n	80054ac <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800549c:	4b27      	ldr	r3, [pc, #156]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80054a4:	4925      	ldr	r1, [pc, #148]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80054ac:	4b24      	ldr	r3, [pc, #144]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a24      	ldr	r2, [pc, #144]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	2232      	movs	r2, #50	@ 0x32
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	4a21      	ldr	r2, [pc, #132]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	099b      	lsrs	r3, r3, #6
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80054ca:	e002      	b.n	80054d2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80054d2:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f3      	bne.n	80054cc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01b      	beq.n	8005522 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a15      	ldr	r2, [pc, #84]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	2232      	movs	r2, #50	@ 0x32
 80054f8:	fb02 f303 	mul.w	r3, r2, r3
 80054fc:	4a11      	ldr	r2, [pc, #68]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005508:	e002      	b.n	8005510 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005510:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f3      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e000      	b.n	800552e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	46020800 	.word	0x46020800
 8005540:	20000000 	.word	0x20000000
 8005544:	10624dd3 	.word	0x10624dd3

08005548 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <HAL_PWREx_GetVoltageRange+0x18>)
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	46020800 	.word	0x46020800

08005564 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800556c:	4b22      	ldr	r3, [pc, #136]	@ (80055f8 <HAL_PWREx_ConfigSupply+0x94>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <HAL_PWREx_ConfigSupply+0x98>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	2232      	movs	r2, #50	@ 0x32
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <HAL_PWREx_ConfigSupply+0x98>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d113      	bne.n	80055b8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005590:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a1a      	ldr	r2, [pc, #104]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 8005596:	f023 0302 	bic.w	r3, r3, #2
 800559a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800559c:	e002      	b.n	80055a4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80055a4:	4b16      	ldr	r3, [pc, #88]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d116      	bne.n	80055de <HAL_PWREx_ConfigSupply+0x7a>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f3      	bne.n	800559e <HAL_PWREx_ConfigSupply+0x3a>
 80055b6:	e012      	b.n	80055de <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80055b8:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a10      	ldr	r2, [pc, #64]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80055c4:	e002      	b.n	80055cc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80055cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <HAL_PWREx_ConfigSupply+0x9c>)
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_PWREx_ConfigSupply+0x7a>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f3      	bne.n	80055c6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e000      	b.n	80055ea <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000000 	.word	0x20000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	46020800 	.word	0x46020800

08005604 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_PWREx_EnableVddUSB+0x1c>)
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <HAL_PWREx_EnableVddUSB+0x1c>)
 800560e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005612:	6113      	str	r3, [r2, #16]
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	46020800 	.word	0x46020800

08005624 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800562a:	f7ff ff8d 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 800562e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005636:	d003      	beq.n	8005640 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800563e:	d107      	bne.n	8005650 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a05      	ldr	r2, [pc, #20]	@ (800565c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8005646:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800564a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e000      	b.n	8005652 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	46020800 	.word	0x46020800

08005660 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	4a04      	ldr	r2, [pc, #16]	@ (800567c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	46020800 	.word	0x46020800

08005680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	@ 0x38
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f000 bec8 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569a:	4b99      	ldr	r3, [pc, #612]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a4:	4b96      	ldr	r3, [pc, #600]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 816c 	beq.w	8005994 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_RCC_OscConfig+0x52>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	f040 80de 	bne.w	8005886 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 80da 	bne.w	8005886 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f000 bea5 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e4:	4b86      	ldr	r3, [pc, #536]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCC_OscConfig+0x7a>
 80056f0:	4b83      	ldr	r3, [pc, #524]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056f8:	e005      	b.n	8005706 <HAL_RCC_OscConfig+0x86>
 80056fa:	4b81      	ldr	r3, [pc, #516]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80056fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005706:	4293      	cmp	r3, r2
 8005708:	d255      	bcs.n	80057b6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	4618      	mov	r0, r3
 8005716:	f001 f9d9 	bl	8006acc <RCC_SetFlashLatencyFromMSIRange>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	f000 be82 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005726:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	4a75      	ldr	r2, [pc, #468]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800572c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005730:	6093      	str	r3, [r2, #8]
 8005732:	4b73      	ldr	r3, [pc, #460]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	4970      	ldr	r1, [pc, #448]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005740:	4313      	orrs	r3, r2
 8005742:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800574c:	d309      	bcc.n	8005762 <HAL_RCC_OscConfig+0xe2>
 800574e:	4b6c      	ldr	r3, [pc, #432]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 021f 	bic.w	r2, r3, #31
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4969      	ldr	r1, [pc, #420]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
 8005760:	e07e      	b.n	8005860 <HAL_RCC_OscConfig+0x1e0>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0a      	bge.n	8005780 <HAL_RCC_OscConfig+0x100>
 800576a:	4b65      	ldr	r3, [pc, #404]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	015b      	lsls	r3, r3, #5
 8005778:	4961      	ldr	r1, [pc, #388]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800577a:	4313      	orrs	r3, r2
 800577c:	60cb      	str	r3, [r1, #12]
 800577e:	e06f      	b.n	8005860 <HAL_RCC_OscConfig+0x1e0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005788:	d30a      	bcc.n	80057a0 <HAL_RCC_OscConfig+0x120>
 800578a:	4b5d      	ldr	r3, [pc, #372]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	4959      	ldr	r1, [pc, #356]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800579a:	4313      	orrs	r3, r2
 800579c:	60cb      	str	r3, [r1, #12]
 800579e:	e05f      	b.n	8005860 <HAL_RCC_OscConfig+0x1e0>
 80057a0:	4b57      	ldr	r3, [pc, #348]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	03db      	lsls	r3, r3, #15
 80057ae:	4954      	ldr	r1, [pc, #336]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60cb      	str	r3, [r1, #12]
 80057b4:	e054      	b.n	8005860 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80057b6:	4b52      	ldr	r3, [pc, #328]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4a51      	ldr	r2, [pc, #324]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057c0:	6093      	str	r3, [r2, #8]
 80057c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	494c      	ldr	r1, [pc, #304]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80057dc:	d309      	bcc.n	80057f2 <HAL_RCC_OscConfig+0x172>
 80057de:	4b48      	ldr	r3, [pc, #288]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f023 021f 	bic.w	r2, r3, #31
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4945      	ldr	r1, [pc, #276]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60cb      	str	r3, [r1, #12]
 80057f0:	e028      	b.n	8005844 <HAL_RCC_OscConfig+0x1c4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da0a      	bge.n	8005810 <HAL_RCC_OscConfig+0x190>
 80057fa:	4b41      	ldr	r3, [pc, #260]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	015b      	lsls	r3, r3, #5
 8005808:	493d      	ldr	r1, [pc, #244]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800580a:	4313      	orrs	r3, r2
 800580c:	60cb      	str	r3, [r1, #12]
 800580e:	e019      	b.n	8005844 <HAL_RCC_OscConfig+0x1c4>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005818:	d30a      	bcc.n	8005830 <HAL_RCC_OscConfig+0x1b0>
 800581a:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	4935      	ldr	r1, [pc, #212]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 800582a:	4313      	orrs	r3, r2
 800582c:	60cb      	str	r3, [r1, #12]
 800582e:	e009      	b.n	8005844 <HAL_RCC_OscConfig+0x1c4>
 8005830:	4b33      	ldr	r3, [pc, #204]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	03db      	lsls	r3, r3, #15
 800583e:	4930      	ldr	r1, [pc, #192]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005840:	4313      	orrs	r3, r2
 8005842:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	4618      	mov	r0, r3
 8005850:	f001 f93c 	bl	8006acc <RCC_SetFlashLatencyFromMSIRange>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f000 bde5 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005860:	f001 f8de 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005864:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <HAL_RCC_OscConfig+0x284>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f7fb fde5 	bl	8001438 <HAL_InitTick>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 808a 	beq.w	8005992 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800587e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005882:	f000 bdd2 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d066      	beq.n	800595c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800588e:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800589a:	f7fb fe57 	bl	800154c <HAL_GetTick>
 800589e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80058a0:	e009      	b.n	80058b6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058a2:	f7fb fe53 	bl	800154c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d902      	bls.n	80058b6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	f000 bdba 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80058b6:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0ef      	beq.n	80058a2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058cc:	6093      	str	r3, [r2, #8]
 80058ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	4909      	ldr	r1, [pc, #36]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80058e8:	d30e      	bcc.n	8005908 <HAL_RCC_OscConfig+0x288>
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f023 021f 	bic.w	r2, r3, #31
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4902      	ldr	r1, [pc, #8]	@ (8005900 <HAL_RCC_OscConfig+0x280>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60cb      	str	r3, [r1, #12]
 80058fc:	e04a      	b.n	8005994 <HAL_RCC_OscConfig+0x314>
 80058fe:	bf00      	nop
 8005900:	46020c00 	.word	0x46020c00
 8005904:	20000004 	.word	0x20000004
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	da0a      	bge.n	8005926 <HAL_RCC_OscConfig+0x2a6>
 8005910:	4b98      	ldr	r3, [pc, #608]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	015b      	lsls	r3, r3, #5
 800591e:	4995      	ldr	r1, [pc, #596]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
 8005924:	e036      	b.n	8005994 <HAL_RCC_OscConfig+0x314>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592e:	d30a      	bcc.n	8005946 <HAL_RCC_OscConfig+0x2c6>
 8005930:	4b90      	ldr	r3, [pc, #576]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	498d      	ldr	r1, [pc, #564]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	60cb      	str	r3, [r1, #12]
 8005944:	e026      	b.n	8005994 <HAL_RCC_OscConfig+0x314>
 8005946:	4b8b      	ldr	r3, [pc, #556]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	03db      	lsls	r3, r3, #15
 8005954:	4987      	ldr	r1, [pc, #540]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005956:	4313      	orrs	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]
 800595a:	e01b      	b.n	8005994 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800595c:	4b85      	ldr	r3, [pc, #532]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a84      	ldr	r2, [pc, #528]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005968:	f7fb fdf0 	bl	800154c <HAL_GetTick>
 800596c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800596e:	e009      	b.n	8005984 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005970:	f7fb fdec 	bl	800154c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	f000 bd53 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005984:	4b7b      	ldr	r3, [pc, #492]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ef      	bne.n	8005970 <HAL_RCC_OscConfig+0x2f0>
 8005990:	e000      	b.n	8005994 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 808b 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_OscConfig+0x334>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d109      	bne.n	80059c2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d17d      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f000 bd34 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ca:	d106      	bne.n	80059da <HAL_RCC_OscConfig+0x35a>
 80059cc:	4b69      	ldr	r3, [pc, #420]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a68      	ldr	r2, [pc, #416]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e041      	b.n	8005a5e <HAL_RCC_OscConfig+0x3de>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059e2:	d112      	bne.n	8005a0a <HAL_RCC_OscConfig+0x38a>
 80059e4:	4b63      	ldr	r3, [pc, #396]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a62      	ldr	r2, [pc, #392]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	4b60      	ldr	r3, [pc, #384]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a5c      	ldr	r2, [pc, #368]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e029      	b.n	8005a5e <HAL_RCC_OscConfig+0x3de>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005a12:	d112      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3ba>
 8005a14:	4b57      	ldr	r3, [pc, #348]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a56      	ldr	r2, [pc, #344]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4b54      	ldr	r3, [pc, #336]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a53      	ldr	r2, [pc, #332]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	4b51      	ldr	r3, [pc, #324]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a50      	ldr	r2, [pc, #320]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e011      	b.n	8005a5e <HAL_RCC_OscConfig+0x3de>
 8005a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	4b4b      	ldr	r3, [pc, #300]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b48      	ldr	r3, [pc, #288]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a47      	ldr	r2, [pc, #284]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d014      	beq.n	8005a90 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005a66:	f7fb fd71 	bl	800154c <HAL_GetTick>
 8005a6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6c:	e009      	b.n	8005a82 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6e:	f7fb fd6d 	bl	800154c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b64      	cmp	r3, #100	@ 0x64
 8005a7a:	d902      	bls.n	8005a82 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	f000 bcd4 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a82:	4b3c      	ldr	r3, [pc, #240]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ef      	beq.n	8005a6e <HAL_RCC_OscConfig+0x3ee>
 8005a8e:	e013      	b.n	8005ab8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005a90:	f7fb fd5c 	bl	800154c <HAL_GetTick>
 8005a94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a96:	e009      	b.n	8005aac <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a98:	f7fb fd58 	bl	800154c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	@ 0x64
 8005aa4:	d902      	bls.n	8005aac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	f000 bcbf 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aac:	4b31      	ldr	r3, [pc, #196]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ef      	bne.n	8005a98 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05f      	beq.n	8005b84 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d005      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x456>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d114      	bne.n	8005afa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d111      	bne.n	8005afa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f000 bca3 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005ae4:	4b23      	ldr	r3, [pc, #140]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	4920      	ldr	r1, [pc, #128]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005af8:	e044      	b.n	8005b84 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d024      	beq.n	8005b4c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005b02:	4b1c      	ldr	r3, [pc, #112]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b0e:	f7fb fd1d 	bl	800154c <HAL_GetTick>
 8005b12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b14:	e009      	b.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b16:	f7fb fd19 	bl	800154c <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d902      	bls.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	f000 bc80 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005b36:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	490b      	ldr	r1, [pc, #44]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]
 8005b4a:	e01b      	b.n	8005b84 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005b4c:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a08      	ldr	r2, [pc, #32]	@ (8005b74 <HAL_RCC_OscConfig+0x4f4>)
 8005b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b58:	f7fb fcf8 	bl	800154c <HAL_GetTick>
 8005b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b5e:	e00b      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b60:	f7fb fcf4 	bl	800154c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d904      	bls.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	f000 bc5b 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
 8005b74:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b78:	4baf      	ldr	r3, [pc, #700]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ed      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80c8 	beq.w	8005d22 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b98:	4ba7      	ldr	r3, [pc, #668]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d111      	bne.n	8005bca <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bac:	4aa2      	ldr	r2, [pc, #648]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005bb6:	4ba0      	ldr	r3, [pc, #640]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005bca:	4b9c      	ldr	r3, [pc, #624]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005bd6:	4b99      	ldr	r3, [pc, #612]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	4a98      	ldr	r2, [pc, #608]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be2:	f7fb fcb3 	bl	800154c <HAL_GetTick>
 8005be6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005be8:	e009      	b.n	8005bfe <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fb fcaf 	bl	800154c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d902      	bls.n	8005bfe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	f000 bc16 	b.w	800642a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d05f      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005c12:	4b89      	ldr	r3, [pc, #548]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c18:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d037      	beq.n	8005c98 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e3f4      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c50:	4a79      	ldr	r2, [pc, #484]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c52:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005c56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005c5a:	f7fb fc77 	bl	800154c <HAL_GetTick>
 8005c5e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fb fc73 	bl	800154c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e3da      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c74:	4b70      	ldr	r3, [pc, #448]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ef      	bne.n	8005c62 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005c82:	4b6d      	ldr	r3, [pc, #436]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	4969      	ldr	r1, [pc, #420]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005c98:	4b67      	ldr	r3, [pc, #412]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c9e:	4a66      	ldr	r2, [pc, #408]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ca4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005ca8:	f7fb fc50 	bl	800154c <HAL_GetTick>
 8005cac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb0:	f7fb fc4c 	bl	800154c <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e3b3      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ef      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x630>
 8005cd0:	e01b      	b.n	8005d0a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cd8:	4a57      	ldr	r2, [pc, #348]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005cda:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005ce2:	f7fb fc33 	bl	800154c <HAL_GetTick>
 8005ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fb fc2f 	bl	800154c <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b05      	cmp	r3, #5
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e396      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ef      	bne.n	8005cea <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d0a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d12:	4b49      	ldr	r3, [pc, #292]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d18:	4a47      	ldr	r2, [pc, #284]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8111 	beq.w	8005f52 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d36:	4b40      	ldr	r3, [pc, #256]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d111      	bne.n	8005d68 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d44:	4b3c      	ldr	r3, [pc, #240]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d54:	4b38      	ldr	r3, [pc, #224]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d68:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d118      	bne.n	8005da6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005d74:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	4a30      	ldr	r2, [pc, #192]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d80:	f7fb fbe4 	bl	800154c <HAL_GetTick>
 8005d84:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d88:	f7fb fbe0 	bl	800154c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e347      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d9a:	4b28      	ldr	r3, [pc, #160]	@ (8005e3c <HAL_RCC_OscConfig+0x7bc>)
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01f      	beq.n	8005df2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d010      	beq.n	8005de0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005dc6:	f043 0304 	orr.w	r3, r3, #4
 8005dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005dce:	4b1a      	ldr	r3, [pc, #104]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dd4:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005dde:	e018      	b.n	8005e12 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005de0:	4b15      	ldr	r3, [pc, #84]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de6:	4a14      	ldr	r2, [pc, #80]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005df0:	e00f      	b.n	8005e12 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005df2:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005df8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e08:	4a0b      	ldr	r2, [pc, #44]	@ (8005e38 <HAL_RCC_OscConfig+0x7b8>)
 8005e0a:	f023 0304 	bic.w	r3, r3, #4
 8005e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d057      	beq.n	8005eca <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005e1a:	f7fb fb97 	bl	800154c <HAL_GetTick>
 8005e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e20:	e00e      	b.n	8005e40 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e22:	f7fb fb93 	bl	800154c <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d905      	bls.n	8005e40 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e2f8      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
 8005e38:	46020c00 	.word	0x46020c00
 8005e3c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e40:	4b9c      	ldr	r3, [pc, #624]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0e9      	beq.n	8005e22 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01b      	beq.n	8005e92 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e5a:	4b96      	ldr	r3, [pc, #600]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e60:	4a94      	ldr	r2, [pc, #592]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6c:	f7fb fb6e 	bl	800154c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e2d3      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e82:	4b8c      	ldr	r3, [pc, #560]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ed      	beq.n	8005e6c <HAL_RCC_OscConfig+0x7ec>
 8005e90:	e053      	b.n	8005f3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e92:	4b88      	ldr	r3, [pc, #544]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e98:	4a86      	ldr	r2, [pc, #536]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fb fb52 	bl	800154c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e2b7      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eba:	4b7e      	ldr	r3, [pc, #504]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ed      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x824>
 8005ec8:	e037      	b.n	8005f3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005eca:	f7fb fb3f 	bl	800154c <HAL_GetTick>
 8005ece:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ed0:	e00a      	b.n	8005ee8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed2:	f7fb fb3b 	bl	800154c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e2a0      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ee8:	4b72      	ldr	r3, [pc, #456]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1ed      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f04:	4b6b      	ldr	r3, [pc, #428]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f0a:	4a6a      	ldr	r2, [pc, #424]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f14:	e00a      	b.n	8005f2c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f16:	f7fb fb19 	bl	800154c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e27e      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f2c:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ed      	bne.n	8005f16 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f42:	4b5c      	ldr	r3, [pc, #368]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f48:	4a5a      	ldr	r2, [pc, #360]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d036      	beq.n	8005fcc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d019      	beq.n	8005f9a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005f66:	4b53      	ldr	r3, [pc, #332]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a52      	ldr	r2, [pc, #328]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f70:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005f72:	f7fb faeb 	bl	800154c <HAL_GetTick>
 8005f76:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f7a:	f7fb fae7 	bl	800154c <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e24e      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f8c:	4b49      	ldr	r3, [pc, #292]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x8fa>
 8005f98:	e018      	b.n	8005fcc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005f9a:	4b46      	ldr	r3, [pc, #280]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a45      	ldr	r2, [pc, #276]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fa4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005fa6:	f7fb fad1 	bl	800154c <HAL_GetTick>
 8005faa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fae:	f7fb facd 	bl	800154c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e234      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f0      	bne.n	8005fae <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d036      	beq.n	8006046 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d019      	beq.n	8006014 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005fe0:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a33      	ldr	r2, [pc, #204]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8005fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005fec:	f7fb faae 	bl	800154c <HAL_GetTick>
 8005ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005ff4:	f7fb faaa 	bl	800154c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e211      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006006:	4b2b      	ldr	r3, [pc, #172]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x974>
 8006012:	e018      	b.n	8006046 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006014:	4b27      	ldr	r3, [pc, #156]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a26      	ldr	r2, [pc, #152]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 800601a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800601e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006020:	f7fb fa94 	bl	800154c <HAL_GetTick>
 8006024:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006028:	f7fb fa90 	bl	800154c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e1f7      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800603a:	4b1e      	ldr	r3, [pc, #120]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d07f      	beq.n	8006152 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	d062      	beq.n	8006120 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800605a:	4b16      	ldr	r3, [pc, #88]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006060:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006064:	6093      	str	r3, [r2, #8]
 8006066:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006072:	4910      	ldr	r1, [pc, #64]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006074:	4313      	orrs	r3, r2
 8006076:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006080:	d309      	bcc.n	8006096 <HAL_RCC_OscConfig+0xa16>
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f023 021f 	bic.w	r2, r3, #31
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4909      	ldr	r1, [pc, #36]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 8006090:	4313      	orrs	r3, r2
 8006092:	60cb      	str	r3, [r1, #12]
 8006094:	e02a      	b.n	80060ec <HAL_RCC_OscConfig+0xa6c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0c      	bge.n	80060b8 <HAL_RCC_OscConfig+0xa38>
 800609e:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	015b      	lsls	r3, r3, #5
 80060ac:	4901      	ldr	r1, [pc, #4]	@ (80060b4 <HAL_RCC_OscConfig+0xa34>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60cb      	str	r3, [r1, #12]
 80060b2:	e01b      	b.n	80060ec <HAL_RCC_OscConfig+0xa6c>
 80060b4:	46020c00 	.word	0x46020c00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c0:	d30a      	bcc.n	80060d8 <HAL_RCC_OscConfig+0xa58>
 80060c2:	4ba1      	ldr	r3, [pc, #644]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	029b      	lsls	r3, r3, #10
 80060d0:	499d      	ldr	r1, [pc, #628]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60cb      	str	r3, [r1, #12]
 80060d6:	e009      	b.n	80060ec <HAL_RCC_OscConfig+0xa6c>
 80060d8:	4b9b      	ldr	r3, [pc, #620]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	03db      	lsls	r3, r3, #15
 80060e6:	4998      	ldr	r1, [pc, #608]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80060ec:	4b96      	ldr	r3, [pc, #600]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a95      	ldr	r2, [pc, #596]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80060f2:	f043 0310 	orr.w	r3, r3, #16
 80060f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80060f8:	f7fb fa28 	bl	800154c <HAL_GetTick>
 80060fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006100:	f7fb fa24 	bl	800154c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e18b      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006112:	4b8d      	ldr	r3, [pc, #564]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xa80>
 800611e:	e018      	b.n	8006152 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006120:	4b89      	ldr	r3, [pc, #548]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a88      	ldr	r2, [pc, #544]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800612c:	f7fb fa0e 	bl	800154c <HAL_GetTick>
 8006130:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006134:	f7fb fa0a 	bl	800154c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e171      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006146:	4b80      	ldr	r3, [pc, #512]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8166 	beq.w	8006428 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006162:	4b79      	ldr	r3, [pc, #484]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b0c      	cmp	r3, #12
 800616c:	f000 80f2 	beq.w	8006354 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006174:	2b02      	cmp	r3, #2
 8006176:	f040 80c5 	bne.w	8006304 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b73      	ldr	r3, [pc, #460]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a72      	ldr	r2, [pc, #456]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006184:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006186:	f7fb f9e1 	bl	800154c <HAL_GetTick>
 800618a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618e:	f7fb f9dd 	bl	800154c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e144      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80061a0:	4b69      	ldr	r3, [pc, #420]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ac:	4b66      	ldr	r3, [pc, #408]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d111      	bne.n	80061de <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	4b63      	ldr	r3, [pc, #396]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80061bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061c0:	4a61      	ldr	r2, [pc, #388]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80061ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80061cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80061de:	4b5b      	ldr	r3, [pc, #364]	@ (800634c <HAL_RCC_OscConfig+0xccc>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80061f2:	4b56      	ldr	r3, [pc, #344]	@ (800634c <HAL_RCC_OscConfig+0xccc>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4a55      	ldr	r2, [pc, #340]	@ (800634c <HAL_RCC_OscConfig+0xccc>)
 80061f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061fc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80061fe:	4b52      	ldr	r3, [pc, #328]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006212:	3a01      	subs	r2, #1
 8006214:	0212      	lsls	r2, r2, #8
 8006216:	4311      	orrs	r1, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800621c:	430a      	orrs	r2, r1
 800621e:	494a      	ldr	r1, [pc, #296]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006220:	4313      	orrs	r3, r2
 8006222:	628b      	str	r3, [r1, #40]	@ 0x28
 8006224:	4b48      	ldr	r3, [pc, #288]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006228:	4b49      	ldr	r3, [pc, #292]	@ (8006350 <HAL_RCC_OscConfig+0xcd0>)
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006230:	3a01      	subs	r2, #1
 8006232:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800623a:	3a01      	subs	r2, #1
 800623c:	0252      	lsls	r2, r2, #9
 800623e:	b292      	uxth	r2, r2
 8006240:	4311      	orrs	r1, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006246:	3a01      	subs	r2, #1
 8006248:	0412      	lsls	r2, r2, #16
 800624a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006254:	3a01      	subs	r2, #1
 8006256:	0612      	lsls	r2, r2, #24
 8006258:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800625c:	430a      	orrs	r2, r1
 800625e:	493a      	ldr	r1, [pc, #232]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006260:	4313      	orrs	r3, r2
 8006262:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006264:	4b38      	ldr	r3, [pc, #224]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	4a37      	ldr	r2, [pc, #220]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800626a:	f023 0310 	bic.w	r3, r3, #16
 800626e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006274:	4a34      	ldr	r2, [pc, #208]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800627a:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	4a32      	ldr	r2, [pc, #200]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006280:	f043 0310 	orr.w	r3, r3, #16
 8006284:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006286:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	f023 020c 	bic.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006292:	492d      	ldr	r1, [pc, #180]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006294:	4313      	orrs	r3, r2
 8006296:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006298:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80062a0:	4b2a      	ldr	r3, [pc, #168]	@ (800634c <HAL_RCC_OscConfig+0xccc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a29      	ldr	r2, [pc, #164]	@ (800634c <HAL_RCC_OscConfig+0xccc>)
 80062a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062aa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80062ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80062b4:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ba:	4a23      	ldr	r2, [pc, #140]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80062c4:	4b20      	ldr	r3, [pc, #128]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80062d0:	f7fb f93c 	bl	800154c <HAL_GetTick>
 80062d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fb f938 	bl	800154c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e09f      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80062ea:	4b17      	ldr	r3, [pc, #92]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fa:	4a13      	ldr	r2, [pc, #76]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 80062fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006300:	6293      	str	r3, [r2, #40]	@ 0x28
 8006302:	e091      	b.n	8006428 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006304:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a0f      	ldr	r2, [pc, #60]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800630a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800630e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006310:	f7fb f91c 	bl	800154c <HAL_GetTick>
 8006314:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006318:	f7fb f918 	bl	800154c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e07f      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800632a:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006336:	4b04      	ldr	r3, [pc, #16]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 8006338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633a:	4a03      	ldr	r2, [pc, #12]	@ (8006348 <HAL_RCC_OscConfig+0xcc8>)
 800633c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	6293      	str	r3, [r2, #40]	@ 0x28
 8006346:	e06f      	b.n	8006428 <HAL_RCC_OscConfig+0xda8>
 8006348:	46020c00 	.word	0x46020c00
 800634c:	46020800 	.word	0x46020800
 8006350:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006354:	4b37      	ldr	r3, [pc, #220]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800635a:	4b36      	ldr	r3, [pc, #216]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 800635c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	2b01      	cmp	r3, #1
 8006366:	d039      	beq.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 0203 	and.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d132      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	0a1b      	lsrs	r3, r3, #8
 800637a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d129      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d122      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d11a      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	0a5b      	lsrs	r3, r3, #9
 80063aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d111      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d108      	bne.n	80063dc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d001      	beq.n	80063e0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e024      	b.n	800642a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80063e0:	4b14      	ldr	r3, [pc, #80]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d01a      	beq.n	8006428 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80063f2:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7fb f8a5 	bl	800154c <HAL_GetTick>
 8006402:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006404:	bf00      	nop
 8006406:	f7fb f8a1 	bl	800154c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	4293      	cmp	r3, r2
 8006410:	d0f9      	beq.n	8006406 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006416:	4a07      	ldr	r2, [pc, #28]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800641c:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	4a04      	ldr	r2, [pc, #16]	@ (8006434 <HAL_RCC_OscConfig+0xdb4>)
 8006422:	f043 0310 	orr.w	r3, r3, #16
 8006426:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3738      	adds	r7, #56	@ 0x38
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	46020c00 	.word	0x46020c00

08006438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e1d9      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800644c:	4b9b      	ldr	r3, [pc, #620]	@ (80066bc <HAL_RCC_ClockConfig+0x284>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d910      	bls.n	800647c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645a:	4b98      	ldr	r3, [pc, #608]	@ (80066bc <HAL_RCC_ClockConfig+0x284>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 020f 	bic.w	r2, r3, #15
 8006462:	4996      	ldr	r1, [pc, #600]	@ (80066bc <HAL_RCC_ClockConfig+0x284>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b94      	ldr	r3, [pc, #592]	@ (80066bc <HAL_RCC_ClockConfig+0x284>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e1c1      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	4b8c      	ldr	r3, [pc, #560]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006494:	429a      	cmp	r2, r3
 8006496:	d908      	bls.n	80064aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006498:	4b89      	ldr	r3, [pc, #548]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	4986      	ldr	r1, [pc, #536]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	4b81      	ldr	r3, [pc, #516]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d909      	bls.n	80064dc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80064c8:	4b7d      	ldr	r3, [pc, #500]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	497a      	ldr	r1, [pc, #488]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	4b74      	ldr	r3, [pc, #464]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d908      	bls.n	800650a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80064f8:	4b71      	ldr	r3, [pc, #452]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	496e      	ldr	r1, [pc, #440]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006506:	4313      	orrs	r3, r2
 8006508:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	4b69      	ldr	r3, [pc, #420]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	429a      	cmp	r2, r3
 8006524:	d908      	bls.n	8006538 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006526:	4b66      	ldr	r3, [pc, #408]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 020f 	bic.w	r2, r3, #15
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	4963      	ldr	r1, [pc, #396]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006534:	4313      	orrs	r3, r2
 8006536:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80d2 	beq.w	80066ea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b03      	cmp	r3, #3
 8006550:	d143      	bne.n	80065da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b5b      	ldr	r3, [pc, #364]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006560:	4b57      	ldr	r3, [pc, #348]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006566:	4a56      	ldr	r2, [pc, #344]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006568:	f043 0304 	orr.w	r3, r3, #4
 800656c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006570:	4b53      	ldr	r3, [pc, #332]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800657e:	2301      	movs	r3, #1
 8006580:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006582:	f7fa ffe3 	bl	800154c <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006588:	4b4e      	ldr	r3, [pc, #312]	@ (80066c4 <HAL_RCC_ClockConfig+0x28c>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00f      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006596:	f7fa ffd9 	bl	800154c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e12b      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80065a8:	4b46      	ldr	r3, [pc, #280]	@ (80066c4 <HAL_RCC_ClockConfig+0x28c>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d107      	bne.n	80065ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80065ba:	4b41      	ldr	r3, [pc, #260]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c0:	4a3f      	ldr	r2, [pc, #252]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80065c2:	f023 0304 	bic.w	r3, r3, #4
 80065c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80065ca:	4b3d      	ldr	r3, [pc, #244]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d121      	bne.n	800661a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e112      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d107      	bne.n	80065f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065e2:	4b37      	ldr	r3, [pc, #220]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d115      	bne.n	800661a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e106      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80065fa:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0fa      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800660a:	4b2d      	ldr	r3, [pc, #180]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0f2      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800661a:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f023 0203 	bic.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4926      	ldr	r1, [pc, #152]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006628:	4313      	orrs	r3, r2
 800662a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800662c:	f7fa ff8e 	bl	800154c <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d112      	bne.n	8006660 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800663a:	e00a      	b.n	8006652 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663c:	f7fa ff86 	bl	800154c <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e0d6      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006652:	4b1b      	ldr	r3, [pc, #108]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f003 030c 	and.w	r3, r3, #12
 800665a:	2b0c      	cmp	r3, #12
 800665c:	d1ee      	bne.n	800663c <HAL_RCC_ClockConfig+0x204>
 800665e:	e044      	b.n	80066ea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d112      	bne.n	800668e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666a:	f7fa ff6f 	bl	800154c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bf      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006680:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b08      	cmp	r3, #8
 800668a:	d1ee      	bne.n	800666a <HAL_RCC_ClockConfig+0x232>
 800668c:	e02d      	b.n	80066ea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d123      	bne.n	80066de <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006696:	e00a      	b.n	80066ae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006698:	f7fa ff58 	bl	800154c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e0a8      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80066ae:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <HAL_RCC_ClockConfig+0x288>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ee      	bne.n	8006698 <HAL_RCC_ClockConfig+0x260>
 80066ba:	e016      	b.n	80066ea <HAL_RCC_ClockConfig+0x2b2>
 80066bc:	40022000 	.word	0x40022000
 80066c0:	46020c00 	.word	0x46020c00
 80066c4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c8:	f7fa ff40 	bl	800154c <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e090      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066de:	4b4a      	ldr	r3, [pc, #296]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d1ee      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	4b43      	ldr	r3, [pc, #268]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006706:	4b40      	ldr	r3, [pc, #256]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 020f 	bic.w	r2, r3, #15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	493d      	ldr	r1, [pc, #244]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006718:	4b3c      	ldr	r3, [pc, #240]	@ (800680c <HAL_RCC_ClockConfig+0x3d4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d210      	bcs.n	8006748 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006726:	4b39      	ldr	r3, [pc, #228]	@ (800680c <HAL_RCC_ClockConfig+0x3d4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f023 020f 	bic.w	r2, r3, #15
 800672e:	4937      	ldr	r1, [pc, #220]	@ (800680c <HAL_RCC_ClockConfig+0x3d4>)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b35      	ldr	r3, [pc, #212]	@ (800680c <HAL_RCC_ClockConfig+0x3d4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e05b      	b.n	8006800 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	4b2b      	ldr	r3, [pc, #172]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006760:	429a      	cmp	r2, r3
 8006762:	d208      	bcs.n	8006776 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006764:	4b28      	ldr	r3, [pc, #160]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4925      	ldr	r1, [pc, #148]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006772:	4313      	orrs	r3, r2
 8006774:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	4b20      	ldr	r3, [pc, #128]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006790:	429a      	cmp	r2, r3
 8006792:	d209      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006794:	4b1c      	ldr	r3, [pc, #112]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4919      	ldr	r1, [pc, #100]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	4b13      	ldr	r3, [pc, #76]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d208      	bcs.n	80067d6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80067c4:	4b10      	ldr	r3, [pc, #64]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	490d      	ldr	r1, [pc, #52]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80067d6:	f000 f821 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80067da:	4602      	mov	r2, r0
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <HAL_RCC_ClockConfig+0x3d0>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	490a      	ldr	r1, [pc, #40]	@ (8006810 <HAL_RCC_ClockConfig+0x3d8>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	4a09      	ldr	r2, [pc, #36]	@ (8006814 <HAL_RCC_ClockConfig+0x3dc>)
 80067ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067f0:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <HAL_RCC_ClockConfig+0x3e0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fa fe1f 	bl	8001438 <HAL_InitTick>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	46020c00 	.word	0x46020c00
 800680c:	40022000 	.word	0x40022000
 8006810:	0800e940 	.word	0x0800e940
 8006814:	20000000 	.word	0x20000000
 8006818:	20000004 	.word	0x20000004

0800681c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800681c:	b480      	push	{r7}
 800681e:	b08b      	sub	sp, #44	@ 0x2c
 8006820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800682a:	4b78      	ldr	r3, [pc, #480]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006834:	4b75      	ldr	r3, [pc, #468]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x34>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d121      	bne.n	800688e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d11e      	bne.n	800688e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006850:	4b6e      	ldr	r3, [pc, #440]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d107      	bne.n	800686c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800685c:	4b6b      	ldr	r3, [pc, #428]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800685e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006862:	0b1b      	lsrs	r3, r3, #12
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
 800686a:	e005      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800686c:	4b67      	ldr	r3, [pc, #412]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	0f1b      	lsrs	r3, r3, #28
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006878:	4a65      	ldr	r2, [pc, #404]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800688c:	e00d      	b.n	80068aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800688e:	4b5f      	ldr	r3, [pc, #380]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b04      	cmp	r3, #4
 8006898:	d102      	bne.n	80068a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800689a:	4b5e      	ldr	r3, [pc, #376]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	e004      	b.n	80068aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80068a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	f040 80a5 	bne.w	80069fc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068b2:	4b56      	ldr	r3, [pc, #344]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80068b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80068bc:	4b53      	ldr	r3, [pc, #332]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80068ca:	4b50      	ldr	r3, [pc, #320]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80068d6:	4b4d      	ldr	r3, [pc, #308]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80068d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d003      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0xe4>
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d022      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x128>
 80068fe:	e043      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006a18 <HAL_RCC_GetSysClockFreq+0x1fc>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b3e      	ldr	r3, [pc, #248]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006922:	ed97 6a01 	vldr	s12, [r7, #4]
 8006926:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006a1c <HAL_RCC_GetSysClockFreq+0x200>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006942:	e046      	b.n	80069d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006a18 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b2d      	ldr	r3, [pc, #180]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006966:	ed97 6a01 	vldr	s12, [r7, #4]
 800696a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006a1c <HAL_RCC_GetSysClockFreq+0x200>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006986:	e024      	b.n	80069d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80069a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80069b0:	ed97 6a01 	vldr	s12, [r7, #4]
 80069b4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006a1c <HAL_RCC_GetSysClockFreq+0x200>
 80069b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80069c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80069d2:	4b0e      	ldr	r3, [pc, #56]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d6:	0e1b      	lsrs	r3, r3, #24
 80069d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069dc:	3301      	adds	r3, #1
 80069de:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f6:	ee17 3a90 	vmov	r3, s15
 80069fa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	372c      	adds	r7, #44	@ 0x2c
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	46020c00 	.word	0x46020c00
 8006a10:	0800e958 	.word	0x0800e958
 8006a14:	00f42400 	.word	0x00f42400
 8006a18:	4b742400 	.word	0x4b742400
 8006a1c:	46000000 	.word	0x46000000

08006a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006a24:	f7ff fefa 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	4b07      	ldr	r3, [pc, #28]	@ (8006a48 <HAL_RCC_GetHCLKFreq+0x28>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	4906      	ldr	r1, [pc, #24]	@ (8006a4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	4a05      	ldr	r2, [pc, #20]	@ (8006a50 <HAL_RCC_GetHCLKFreq+0x30>)
 8006a3c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006a3e:	4b04      	ldr	r3, [pc, #16]	@ (8006a50 <HAL_RCC_GetHCLKFreq+0x30>)
 8006a40:	681b      	ldr	r3, [r3, #0]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	46020c00 	.word	0x46020c00
 8006a4c:	0800e940 	.word	0x0800e940
 8006a50:	20000000 	.word	0x20000000

08006a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006a58:	f7ff ffe2 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4903      	ldr	r1, [pc, #12]	@ (8006a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	46020c00 	.word	0x46020c00
 8006a78:	0800e950 	.word	0x0800e950

08006a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006a80:	f7ff ffce 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4903      	ldr	r1, [pc, #12]	@ (8006aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	46020c00 	.word	0x46020c00
 8006aa0:	0800e950 	.word	0x0800e950

08006aa4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006aa8:	f7ff ffba 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	@ (8006ac8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	46020c00 	.word	0x46020c00
 8006ac8:	0800e950 	.word	0x0800e950

08006acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ae2:	f7fe fd31 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 8006ae6:	6178      	str	r0, [r7, #20]
 8006ae8:	e019      	b.n	8006b1e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aea:	4b39      	ldr	r3, [pc, #228]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af0:	4a37      	ldr	r2, [pc, #220]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006afa:	4b35      	ldr	r3, [pc, #212]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b08:	f7fe fd1e 	bl	8005548 <HAL_PWREx_GetVoltageRange>
 8006b0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b0e:	4b30      	ldr	r3, [pc, #192]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b14:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006b16:	f023 0304 	bic.w	r3, r3, #4
 8006b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b24:	d003      	beq.n	8006b2e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b2c:	d109      	bne.n	8006b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b34:	d202      	bcs.n	8006b3c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006b36:	2301      	movs	r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006b3a:	e033      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006b40:	e030      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b48:	d208      	bcs.n	8006b5c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b50:	d102      	bne.n	8006b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006b52:	2303      	movs	r3, #3
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	e025      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e035      	b.n	8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b62:	d90f      	bls.n	8006b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b70:	d902      	bls.n	8006b78 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	e015      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006b78:	2301      	movs	r3, #1
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	e012      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e00f      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b8a:	d109      	bne.n	8006ba0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b92:	d102      	bne.n	8006b9a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006b94:	2301      	movs	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	e004      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	e001      	b.n	8006ba4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 020f 	bic.w	r2, r3, #15
 8006bac:	4909      	ldr	r1, [pc, #36]	@ (8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d001      	beq.n	8006bc6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	46020c00 	.word	0x46020c00
 8006bd4:	40022000 	.word	0x40022000

08006bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b0c8      	sub	sp, #288	@ 0x120
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 0401 	and.w	r4, r2, #1
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8006c02:	d00b      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006c04:	4bd5      	ldr	r3, [pc, #852]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c0a:	f023 0103 	bic.w	r1, r3, #3
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c14:	4ad1      	ldr	r2, [pc, #836]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c16:	430b      	orrs	r3, r1
 8006c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f002 0802 	and.w	r8, r2, #2
 8006c28:	f04f 0900 	mov.w	r9, #0
 8006c2c:	ea58 0309 	orrs.w	r3, r8, r9
 8006c30:	d00b      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006c32:	4bca      	ldr	r3, [pc, #808]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c38:	f023 010c 	bic.w	r1, r3, #12
 8006c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	4ac6      	ldr	r2, [pc, #792]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f002 0a04 	and.w	sl, r2, #4
 8006c56:	f04f 0b00 	mov.w	fp, #0
 8006c5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c5e:	d00b      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006c60:	4bbe      	ldr	r3, [pc, #760]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c66:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c70:	4aba      	ldr	r2, [pc, #744]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c72:	430b      	orrs	r3, r1
 8006c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f002 0308 	and.w	r3, r2, #8
 8006c84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c8e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006c98:	4bb0      	ldr	r3, [pc, #704]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca8:	4aac      	ldr	r2, [pc, #688]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f002 0310 	and.w	r3, r2, #16
 8006cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006cc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006cd0:	4ba2      	ldr	r3, [pc, #648]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	4a9e      	ldr	r2, [pc, #632]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006d08:	4b94      	ldr	r3, [pc, #592]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d18:	4a90      	ldr	r2, [pc, #576]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f002 0320 	and.w	r3, r2, #32
 8006d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d36:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006d40:	4b86      	ldr	r3, [pc, #536]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d46:	f023 0107 	bic.w	r1, r3, #7
 8006d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d50:	4a82      	ldr	r2, [pc, #520]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006d78:	4b78      	ldr	r3, [pc, #480]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d7e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d88:	4a74      	ldr	r2, [pc, #464]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006db0:	4b6a      	ldr	r3, [pc, #424]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc0:	4a66      	ldr	r2, [pc, #408]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006dde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d00b      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006de8:	4b5c      	ldr	r3, [pc, #368]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df8:	4a58      	ldr	r2, [pc, #352]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e10:	2300      	movs	r3, #0
 8006e12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006e20:	4b4e      	ldr	r3, [pc, #312]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e26:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e30:	4a4a      	ldr	r2, [pc, #296]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e32:	430b      	orrs	r3, r1
 8006e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d00b      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8006e58:	4b40      	ldr	r3, [pc, #256]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e5e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e68:	4a3c      	ldr	r2, [pc, #240]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8006e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	d00c      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8006e90:	4b32      	ldr	r3, [pc, #200]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d00c      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006eca:	4b24      	ldr	r3, [pc, #144]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ed0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006edc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006efa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d00c      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006f04:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f0a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	4a11      	ldr	r2, [pc, #68]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d010      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f50:	4a02      	ldr	r2, [pc, #8]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f52:	430b      	orrs	r3, r1
 8006f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f58:	e002      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006f5a:	bf00      	nop
 8006f5c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d04c      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f88:	2b80      	cmp	r3, #128	@ 0x80
 8006f8a:	d02d      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006f8c:	2b80      	cmp	r3, #128	@ 0x80
 8006f8e:	d827      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006f90:	2b60      	cmp	r3, #96	@ 0x60
 8006f92:	d02b      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006f94:	2b60      	cmp	r3, #96	@ 0x60
 8006f96:	d823      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006f98:	2b40      	cmp	r3, #64	@ 0x40
 8006f9a:	d006      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006f9c:	2b40      	cmp	r3, #64	@ 0x40
 8006f9e:	d81f      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d011      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006fa8:	e01a      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006faa:	4bc0      	ldr	r3, [pc, #768]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	4abf      	ldr	r2, [pc, #764]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fb6:	e01a      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 fcd6 	bl	8009970 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fca:	e010      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd0:	332c      	adds	r3, #44	@ 0x2c
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f002 fd64 	bl	8009aa0 <RCCEx_PLL3_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fde:	e006      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8006fe6:	e002      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10d      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006ff6:	4bad      	ldr	r3, [pc, #692]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ffc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007008:	4aa8      	ldr	r2, [pc, #672]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800700a:	430b      	orrs	r3, r1
 800700c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007016:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800701a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800702a:	2300      	movs	r3, #0
 800702c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007030:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d053      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800703a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800703e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007046:	d033      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704c:	d82c      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800704e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007052:	d02f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8007054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007058:	d826      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800705a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705e:	d008      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8007060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007064:	d820      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800706a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706e:	d011      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007070:	e01a      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007072:	4b8e      	ldr	r3, [pc, #568]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	4a8d      	ldr	r2, [pc, #564]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800707c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800707e:	e01a      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007084:	3308      	adds	r3, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f002 fc72 	bl	8009970 <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007092:	e010      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007098:	332c      	adds	r3, #44	@ 0x2c
 800709a:	4618      	mov	r0, r3
 800709c:	f002 fd00 	bl	8009aa0 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80070a6:	e006      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80070b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80070be:	4b7b      	ldr	r3, [pc, #492]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80070c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80070c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070d0:	4a76      	ldr	r2, [pc, #472]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80070d2:	430b      	orrs	r3, r1
 80070d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80070d8:	e003      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070da:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80070de:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f2:	2300      	movs	r3, #0
 80070f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070fc:	460b      	mov	r3, r1
 80070fe:	4313      	orrs	r3, r2
 8007100:	d046      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800710a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800710e:	d028      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8007110:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007114:	d821      	bhi.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711a:	d022      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007120:	d81b      	bhi.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007126:	d01c      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8007128:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800712c:	d815      	bhi.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007132:	d008      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8007134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007138:	d80f      	bhi.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d011      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007142:	d00e      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8007144:	e009      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800714a:	3308      	adds	r3, #8
 800714c:	4618      	mov	r0, r3
 800714e:	f002 fc0f 	bl	8009970 <RCCEx_PLL2_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007158:	e004      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8007162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007164:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800716c:	4b4f      	ldr	r3, [pc, #316]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800716e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007172:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800717a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800717e:	4a4b      	ldr	r2, [pc, #300]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007180:	430b      	orrs	r3, r1
 8007182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007186:	e003      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007188:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800718c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800719c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80071aa:	460b      	mov	r3, r1
 80071ac:	4313      	orrs	r3, r2
 80071ae:	d03f      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80071b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d81e      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x622>
 80071bc:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071e7 	.word	0x080071e7
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007203 	.word	0x08007203
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071d8:	4b34      	ldr	r3, [pc, #208]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	4a33      	ldr	r2, [pc, #204]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80071de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071e2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80071e4:	e00e      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ea:	332c      	adds	r3, #44	@ 0x2c
 80071ec:	4618      	mov	r0, r3
 80071ee:	f002 fc57 	bl	8009aa0 <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80071f8:	e004      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007200:	e000      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8007202:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007204:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10d      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800720c:	4b27      	ldr	r3, [pc, #156]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800720e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007212:	f023 0107 	bic.w	r1, r3, #7
 8007216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800721a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800721e:	4a23      	ldr	r2, [pc, #140]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007220:	430b      	orrs	r3, r1
 8007222:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007226:	e003      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800722c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800723c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800723e:	2300      	movs	r3, #0
 8007240:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007242:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	d04c      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800724c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007254:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007258:	d02a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800725a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800725e:	d821      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8007260:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007264:	d026      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8007266:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800726a:	d81b      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800726c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007270:	d00e      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8007272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007276:	d815      	bhi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01d      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007280:	d110      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800728c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800728e:	e014      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007294:	332c      	adds	r3, #44	@ 0x2c
 8007296:	4618      	mov	r0, r3
 8007298:	f002 fc02 	bl	8009aa0 <RCCEx_PLL3_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80072a2:	e00a      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80072aa:	e006      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80072ac:	46020c00 	.word	0x46020c00
        break;
 80072b0:	bf00      	nop
 80072b2:	e002      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80072b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80072ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10d      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80072c2:	4baf      	ldr	r3, [pc, #700]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80072c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072d4:	4aaa      	ldr	r2, [pc, #680]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80072d6:	430b      	orrs	r3, r1
 80072d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80072e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80072f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80072f4:	2300      	movs	r3, #0
 80072f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80072f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80072fc:	460b      	mov	r3, r1
 80072fe:	4313      	orrs	r3, r2
 8007300:	f000 80b5 	beq.w	800746e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730a:	4b9d      	ldr	r3, [pc, #628]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800730c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007318:	4b99      	ldr	r3, [pc, #612]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800731a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731e:	4a98      	ldr	r2, [pc, #608]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007328:	4b95      	ldr	r3, [pc, #596]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800732a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007336:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800733a:	2301      	movs	r3, #1
 800733c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007340:	4b90      	ldr	r3, [pc, #576]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	4a8f      	ldr	r2, [pc, #572]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800734c:	f7fa f8fe 	bl	800154c <HAL_GetTick>
 8007350:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007354:	e00b      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007356:	f7fa f8f9 	bl	800154c <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d903      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800736c:	e005      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800736e:	4b85      	ldr	r3, [pc, #532]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ed      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800737a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800737e:	2b00      	cmp	r3, #0
 8007380:	d165      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007382:	4b7f      	ldr	r3, [pc, #508]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800738c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d023      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8007398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80073a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d01b      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073a8:	4b75      	ldr	r3, [pc, #468]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073b6:	4b72      	ldr	r3, [pc, #456]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073bc:	4a70      	ldr	r2, [pc, #448]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073c6:	4b6e      	ldr	r3, [pc, #440]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073cc:	4a6c      	ldr	r2, [pc, #432]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073d6:	4a6a      	ldr	r2, [pc, #424]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80073d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d019      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fa f8ae 	bl	800154c <HAL_GetTick>
 80073f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073f4:	e00d      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fa f8a9 	bl	800154c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007412:	4b5b      	ldr	r3, [pc, #364]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ea      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8007420:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007428:	4b55      	ldr	r3, [pc, #340]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800742a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800742e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007436:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800743a:	4a51      	ldr	r2, [pc, #324]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800743c:	430b      	orrs	r3, r1
 800743e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007444:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007448:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800744c:	e003      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007452:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007456:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800745a:	2b01      	cmp	r3, #1
 800745c:	d107      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745e:	4b48      	ldr	r3, [pc, #288]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007464:	4a46      	ldr	r2, [pc, #280]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007466:	f023 0304 	bic.w	r3, r3, #4
 800746a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800746e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800747a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800747c:	2300      	movs	r3, #0
 800747e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007480:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007484:	460b      	mov	r3, r1
 8007486:	4313      	orrs	r3, r2
 8007488:	d042      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800748a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800748e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007492:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007496:	d022      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x906>
 8007498:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800749c:	d81b      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800749e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a2:	d011      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80074a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a8:	d815      	bhi.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d019      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80074ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074b2:	d110      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b8:	3308      	adds	r3, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 fa58 	bl	8009970 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80074c6:	e00d      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80074d4:	e006      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80074dc:	e002      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80074e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80074e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10d      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80074ec:	4b24      	ldr	r3, [pc, #144]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80074ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80074f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074fe:	4a20      	ldr	r2, [pc, #128]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007500:	430b      	orrs	r3, r1
 8007502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800750c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800751c:	663b      	str	r3, [r7, #96]	@ 0x60
 800751e:	2300      	movs	r3, #0
 8007520:	667b      	str	r3, [r7, #100]	@ 0x64
 8007522:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d031      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800752c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007538:	d00b      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800753a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800753e:	d804      	bhi.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	d007      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007550:	e004      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800755a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800755c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007560:	2b00      	cmp	r3, #0
 8007562:	d111      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007566:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800756a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800756e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007576:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007578:	430b      	orrs	r3, r1
 800757a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800757e:	e007      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8007580:	46020c00 	.word	0x46020c00
 8007584:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800758c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800759c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800759e:	2300      	movs	r3, #0
 80075a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80075a6:	460b      	mov	r3, r1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	d00c      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80075ac:	4bb2      	ldr	r3, [pc, #712]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075b2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80075b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075be:	4aae      	ldr	r2, [pc, #696]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80075c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80075d4:	2300      	movs	r3, #0
 80075d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80075d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80075dc:	460b      	mov	r3, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	d019      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80075e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075ee:	d105      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075f0:	4ba1      	ldr	r3, [pc, #644]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	4aa0      	ldr	r2, [pc, #640]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80075fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007602:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800760a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800760e:	4a9a      	ldr	r2, [pc, #616]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007610:	430b      	orrs	r3, r1
 8007612:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007624:	2300      	movs	r3, #0
 8007626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007628:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d00c      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007632:	4b91      	ldr	r3, [pc, #580]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007638:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800763c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007640:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007644:	4a8c      	ldr	r2, [pc, #560]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007646:	430b      	orrs	r3, r1
 8007648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800764c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007658:	643b      	str	r3, [r7, #64]	@ 0x40
 800765a:	2300      	movs	r3, #0
 800765c:	647b      	str	r3, [r7, #68]	@ 0x44
 800765e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007662:	460b      	mov	r3, r1
 8007664:	4313      	orrs	r3, r2
 8007666:	d00c      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007668:	4b83      	ldr	r3, [pc, #524]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800766a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800766e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800767a:	4a7f      	ldr	r2, [pc, #508]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800767c:	430b      	orrs	r3, r1
 800767e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800768e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007694:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007698:	460b      	mov	r3, r1
 800769a:	4313      	orrs	r3, r2
 800769c:	d00c      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800769e:	4b76      	ldr	r3, [pc, #472]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076a4:	f023 0118 	bic.w	r1, r3, #24
 80076a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80076b0:	4a71      	ldr	r2, [pc, #452]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076b2:	430b      	orrs	r3, r1
 80076b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80076c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80076ce:	460b      	mov	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d032      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80076d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80076dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076e0:	d105      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e2:	4b65      	ldr	r3, [pc, #404]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	4a64      	ldr	r2, [pc, #400]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ec:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80076ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80076f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076fa:	d108      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007700:	3308      	adds	r3, #8
 8007702:	4618      	mov	r0, r3
 8007704:	f002 f934 	bl	8009970 <RCCEx_PLL2_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800770e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10d      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007716:	4b58      	ldr	r3, [pc, #352]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800771c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007724:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007728:	4a53      	ldr	r2, [pc, #332]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800772a:	430b      	orrs	r3, r1
 800772c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007736:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800773a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	2100      	movs	r1, #0
 8007744:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800774c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d04a      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8007756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800775a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800775e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007762:	d01e      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8007764:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007768:	d825      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800776a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800776e:	d00e      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8007770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007774:	d81f      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d021      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800777a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800777e:	d11a      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007780:	4b3d      	ldr	r3, [pc, #244]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	4a3c      	ldr	r2, [pc, #240]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800778a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800778c:	e018      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800778e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007792:	3308      	adds	r3, #8
 8007794:	4618      	mov	r0, r3
 8007796:	f002 f8eb 	bl	8009970 <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80077a0:	e00e      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a6:	332c      	adds	r3, #44	@ 0x2c
 80077a8:	4618      	mov	r0, r3
 80077aa:	f002 f979 	bl	8009aa0 <RCCEx_PLL3_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80077b4:	e004      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80077bc:	e000      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80077be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10d      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80077c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80077d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80077da:	4927      	ldr	r1, [pc, #156]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80077e8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80077ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80077f8:	623b      	str	r3, [r7, #32]
 80077fa:	2300      	movs	r3, #0
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	d03d      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007814:	d00e      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781a:	d815      	bhi.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007824:	d110      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007826:	4b14      	ldr	r3, [pc, #80]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	4a13      	ldr	r2, [pc, #76]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800782c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007830:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007832:	e00e      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007838:	3308      	adds	r3, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f002 f898 	bl	8009970 <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007846:	e004      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800784e:	e000      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007850:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007852:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007856:	2b00      	cmp	r3, #0
 8007858:	d110      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800785a:	4b07      	ldr	r3, [pc, #28]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800785c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007860:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786c:	4902      	ldr	r1, [pc, #8]	@ (8007878 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007876:	bf00      	nop
 8007878:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007880:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	d00c      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80078a0:	4b68      	ldr	r3, [pc, #416]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80078a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80078b2:	4964      	ldr	r1, [pc, #400]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	2100      	movs	r1, #0
 80078c4:	6139      	str	r1, [r7, #16]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078d0:	460b      	mov	r3, r1
 80078d2:	4313      	orrs	r3, r2
 80078d4:	d036      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 80078d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00c      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80078e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078e6:	d113      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ec:	3308      	adds	r3, #8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 f83e 	bl	8009970 <RCCEx_PLL2_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80078fa:	e00d      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007900:	332c      	adds	r3, #44	@ 0x2c
 8007902:	4618      	mov	r0, r3
 8007904:	f002 f8cc 	bl	8009aa0 <RCCEx_PLL3_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800790e:	e003      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007918:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8007920:	4b48      	ldr	r3, [pc, #288]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007926:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800792a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800792e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007932:	4944      	ldr	r1, [pc, #272]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007940:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8007944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	2100      	movs	r1, #0
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d024      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8007960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d108      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800796c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007970:	332c      	adds	r3, #44	@ 0x2c
 8007972:	4618      	mov	r0, r3
 8007974:	f002 f894 	bl	8009aa0 <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800797e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8007986:	4b2f      	ldr	r3, [pc, #188]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800798c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007998:	492a      	ldr	r1, [pc, #168]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80079a0:	e003      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80079a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80079aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	2100      	movs	r1, #0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	607b      	str	r3, [r7, #4]
 80079bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d036      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80079c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079ce:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80079d2:	d00d      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80079d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80079d8:	d811      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80079da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079de:	d012      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80079e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e4:	d80b      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80079ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ee:	d106      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079f0:	4b14      	ldr	r3, [pc, #80]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80079f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f4:	4a13      	ldr	r2, [pc, #76]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80079f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80079fc:	e004      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8007a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a08:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8007a10:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007a12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a22:	4908      	ldr	r1, [pc, #32]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8007a30:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007a34:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a44:	46020c00 	.word	0x46020c00

08007a48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	@ 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007a50:	4ba6      	ldr	r3, [pc, #664]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a58:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007a64:	4ba1      	ldr	r3, [pc, #644]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	3301      	adds	r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007a72:	4b9e      	ldr	r3, [pc, #632]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a7e:	4b9b      	ldr	r3, [pc, #620]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d062      	beq.n	8007b66 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f200 8081 	bhi.w	8007baa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d024      	beq.n	8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d17a      	bne.n	8007baa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b89      	ldr	r3, [pc, #548]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ada:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007af6:	e08f      	b.n	8007c18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007af8:	4b7c      	ldr	r3, [pc, #496]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007b04:	4b79      	ldr	r3, [pc, #484]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	0f1b      	lsrs	r3, r3, #28
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	e006      	b.n	8007b1e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007b10:	4b76      	ldr	r3, [pc, #472]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b16:	041b      	lsls	r3, r3, #16
 8007b18:	0f1b      	lsrs	r3, r3, #28
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	4a76      	ldr	r2, [pc, #472]	@ (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	ee07 3a90 	vmov	s15, r3
 8007b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b48:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b64:	e058      	b.n	8007c18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b70:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	4b5c      	ldr	r3, [pc, #368]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b8c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ba8:	e036      	b.n	8007c18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007baa:	4b50      	ldr	r3, [pc, #320]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	0f1b      	lsrs	r3, r3, #28
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	0f1b      	lsrs	r3, r3, #28
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	4a49      	ldr	r2, [pc, #292]	@ (8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	ee07 3a90 	vmov	s15, r3
 8007be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c16:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007c18:	4b34      	ldr	r3, [pc, #208]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007c24:	4b31      	ldr	r3, [pc, #196]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c28:	0a5b      	lsrs	r3, r3, #9
 8007c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c4a:	ee17 2a90 	vmov	r2, s15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007c5a:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d017      	beq.n	8007c96 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007c66:	4b21      	ldr	r3, [pc, #132]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6a:	0c1b      	lsrs	r3, r3, #16
 8007c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c8c:	ee17 2a90 	vmov	r2, s15
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	605a      	str	r2, [r3, #4]
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007c9c:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d017      	beq.n	8007cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007ca8:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cac:	0e1b      	lsrs	r3, r3, #24
 8007cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cce:	ee17 2a90 	vmov	r2, s15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007cd6:	e002      	b.n	8007cde <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
}
 8007cde:	bf00      	nop
 8007ce0:	3724      	adds	r7, #36	@ 0x24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	46020c00 	.word	0x46020c00
 8007cf0:	4b742400 	.word	0x4b742400
 8007cf4:	46000000 	.word	0x46000000
 8007cf8:	0800e958 	.word	0x0800e958

08007cfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b089      	sub	sp, #36	@ 0x24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007d04:	4ba6      	ldr	r3, [pc, #664]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007d18:	4ba1      	ldr	r3, [pc, #644]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	3301      	adds	r3, #1
 8007d24:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007d26:	4b9e      	ldr	r3, [pc, #632]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2a:	091b      	lsrs	r3, r3, #4
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007d32:	4b9b      	ldr	r3, [pc, #620]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	08db      	lsrs	r3, r3, #3
 8007d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d062      	beq.n	8007e1a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	f200 8081 	bhi.w	8007e5e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d024      	beq.n	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d17a      	bne.n	8007e5e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b89      	ldr	r3, [pc, #548]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d8e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007daa:	e08f      	b.n	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007dac:	4b7c      	ldr	r3, [pc, #496]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007db8:	4b79      	ldr	r3, [pc, #484]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	0f1b      	lsrs	r3, r3, #28
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	e006      	b.n	8007dd2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007dc4:	4b76      	ldr	r3, [pc, #472]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	0f1b      	lsrs	r3, r3, #28
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	4a76      	ldr	r2, [pc, #472]	@ (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dfc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e18:	e058      	b.n	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e24:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e5c:	e036      	b.n	8007ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007e5e:	4b50      	ldr	r3, [pc, #320]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8007e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	0f1b      	lsrs	r3, r3, #28
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	e006      	b.n	8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007e76:	4b4a      	ldr	r3, [pc, #296]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	0f1b      	lsrs	r3, r3, #28
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	4a49      	ldr	r2, [pc, #292]	@ (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eca:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007ecc:	4b34      	ldr	r3, [pc, #208]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d017      	beq.n	8007f08 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ed8:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007edc:	0a5b      	lsrs	r3, r3, #9
 8007ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efe:	ee17 2a90 	vmov	r2, s15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007f0e:	4b24      	ldr	r3, [pc, #144]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d017      	beq.n	8007f4a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007f1a:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f40:	ee17 2a90 	vmov	r2, s15
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	e002      	b.n	8007f50 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007f50:	4b13      	ldr	r3, [pc, #76]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007f5c:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f60:	0e1b      	lsrs	r3, r3, #24
 8007f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f82:	ee17 2a90 	vmov	r2, s15
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f8a:	e002      	b.n	8007f92 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	609a      	str	r2, [r3, #8]
}
 8007f92:	bf00      	nop
 8007f94:	3724      	adds	r7, #36	@ 0x24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	46020c00 	.word	0x46020c00
 8007fa4:	4b742400 	.word	0x4b742400
 8007fa8:	46000000 	.word	0x46000000
 8007fac:	0800e958 	.word	0x0800e958

08007fb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b089      	sub	sp, #36	@ 0x24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007fb8:	4ba6      	ldr	r3, [pc, #664]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007fc2:	4ba4      	ldr	r3, [pc, #656]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007fda:	4b9e      	ldr	r3, [pc, #632]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007fe6:	4b9b      	ldr	r3, [pc, #620]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fea:	08db      	lsrs	r3, r3, #3
 8007fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d062      	beq.n	80080ce <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b03      	cmp	r3, #3
 800800c:	f200 8081 	bhi.w	8008112 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d024      	beq.n	8008060 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d17a      	bne.n	8008112 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800802a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802e:	4b89      	ldr	r3, [pc, #548]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800803e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008042:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800825c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008046:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800804a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800804e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800805e:	e08f      	b.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008060:	4b7c      	ldr	r3, [pc, #496]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800806c:	4b79      	ldr	r3, [pc, #484]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	0f1b      	lsrs	r3, r3, #28
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	e006      	b.n	8008086 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008078:	4b76      	ldr	r3, [pc, #472]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800807a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	0f1b      	lsrs	r3, r3, #28
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	4a76      	ldr	r2, [pc, #472]	@ (8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80080b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800825c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80080b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080cc:	e058      	b.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80080dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80080e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80080f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80080f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800825c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80080f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80080fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008110:	e036      	b.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008112:	4b50      	ldr	r3, [pc, #320]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800811e:	4b4d      	ldr	r3, [pc, #308]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	0f1b      	lsrs	r3, r3, #28
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800812a:	4b4a      	ldr	r3, [pc, #296]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800812c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	0f1b      	lsrs	r3, r3, #28
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	4a49      	ldr	r2, [pc, #292]	@ (8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008162:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800825c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800817e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008180:	4b34      	ldr	r3, [pc, #208]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d017      	beq.n	80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800818c:	4b31      	ldr	r3, [pc, #196]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800818e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008190:	0a5b      	lsrs	r3, r3, #9
 8008192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800819e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80081a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b2:	ee17 2a90 	vmov	r2, s15
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80081c2:	4b24      	ldr	r3, [pc, #144]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80081c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d017      	beq.n	80081fe <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80081ce:	4b21      	ldr	r3, [pc, #132]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	0c1b      	lsrs	r3, r3, #16
 80081d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d8:	ee07 3a90 	vmov	s15, r3
 80081dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80081e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80081e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f4:	ee17 2a90 	vmov	r2, s15
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	605a      	str	r2, [r3, #4]
 80081fc:	e002      	b.n	8008204 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008204:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008210:	4b10      	ldr	r3, [pc, #64]	@ (8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008214:	0e1b      	lsrs	r3, r3, #24
 8008216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008226:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800822a:	edd7 6a07 	vldr	s13, [r7, #28]
 800822e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008236:	ee17 2a90 	vmov	r2, s15
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800823e:	e002      	b.n	8008246 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	609a      	str	r2, [r3, #8]
}
 8008246:	bf00      	nop
 8008248:	3724      	adds	r7, #36	@ 0x24
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	46020c00 	.word	0x46020c00
 8008258:	4b742400 	.word	0x4b742400
 800825c:	46000000 	.word	0x46000000
 8008260:	0800e958 	.word	0x0800e958

08008264 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08e      	sub	sp, #56	@ 0x38
 8008268:	af00      	add	r7, sp, #0
 800826a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800826e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008272:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008276:	430b      	orrs	r3, r1
 8008278:	d145      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800827a:	4ba7      	ldr	r3, [pc, #668]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800827c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008284:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008286:	4ba4      	ldr	r3, [pc, #656]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d108      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800829a:	d104      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800829c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a2:	f001 bb5a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80082a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80082a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b4:	d114      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082bc:	d110      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082be:	4b96      	ldr	r3, [pc, #600]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80082c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082cc:	d103      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80082ce:	23fa      	movs	r3, #250	@ 0xfa
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082d2:	f001 bb42 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80082d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082dc:	f001 bb3d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80082e0:	4b8d      	ldr	r3, [pc, #564]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f4:	d103      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80082f6:	4b89      	ldr	r3, [pc, #548]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80082f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082fa:	f001 bb2e 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
 8008302:	f001 bb2a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800830e:	430b      	orrs	r3, r1
 8008310:	d151      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008312:	4b81      	ldr	r3, [pc, #516]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008314:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008318:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	2b80      	cmp	r3, #128	@ 0x80
 8008322:	d035      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	2b80      	cmp	r3, #128	@ 0x80
 8008328:	d841      	bhi.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	2b60      	cmp	r3, #96	@ 0x60
 800832e:	d02a      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	2b60      	cmp	r3, #96	@ 0x60
 8008334:	d83b      	bhi.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b40      	cmp	r3, #64	@ 0x40
 800833a:	d009      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	2b40      	cmp	r3, #64	@ 0x40
 8008340:	d835      	bhi.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	2b20      	cmp	r3, #32
 800834c:	d012      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800834e:	e02e      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fb77 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800835e:	f001 bafc 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008362:	f107 0318 	add.w	r3, r7, #24
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fcc8 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008370:	f001 baf3 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fe19 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008382:	f001 baea 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008386:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800838c:	f001 bae5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008390:	4b61      	ldr	r3, [pc, #388]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800839c:	d103      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800839e:	4b60      	ldr	r3, [pc, #384]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80083a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083a2:	f001 bada 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083aa:	f001 bad6 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083b2:	f001 bad2 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80083b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ba:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80083be:	430b      	orrs	r3, r1
 80083c0:	d158      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80083c2:	4b55      	ldr	r3, [pc, #340]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083d4:	d03b      	beq.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083dc:	d846      	bhi.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083e4:	d02e      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ec:	d83e      	bhi.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f4:	d00b      	beq.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083fc:	d836      	bhi.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00d      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840a:	d012      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800840c:	e02e      	b.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800840e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fb18 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841c:	f001 ba9d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008420:	f107 0318 	add.w	r3, r7, #24
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fc69 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800842e:	f001 ba94 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fdba 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008440:	f001 ba8b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008444:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800844a:	f001 ba86 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800844e:	4b32      	ldr	r3, [pc, #200]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845a:	d103      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800845c:	4b30      	ldr	r3, [pc, #192]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008460:	f001 ba7b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008468:	f001 ba77 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008470:	f001 ba73 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008478:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800847c:	430b      	orrs	r3, r1
 800847e:	d126      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008480:	4b25      	ldr	r3, [pc, #148]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800848a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800848c:	4b22      	ldr	r3, [pc, #136]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008498:	d106      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80084a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a4:	f001 ba59 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80084a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b4:	d107      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084bc:	d103      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80084be:	4b19      	ldr	r3, [pc, #100]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c2:	f001 ba4a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ca:	f001 ba46 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80084ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80084d6:	430b      	orrs	r3, r1
 80084d8:	d16e      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80084da:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084e0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80084e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80084ec:	d03d      	beq.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80084f4:	d85c      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fc:	d014      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008504:	d854      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01f      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008512:	d012      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008514:	e04c      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008516:	bf00      	nop
 8008518:	46020c00 	.word	0x46020c00
 800851c:	0007a120 	.word	0x0007a120
 8008520:	00f42400 	.word	0x00f42400
 8008524:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fa8b 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008536:	f001 ba10 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853a:	f107 0318 	add.w	r3, r7, #24
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fbdc 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008548:	f001 ba07 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800854c:	4ba7      	ldr	r3, [pc, #668]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008558:	d103      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800855a:	4ba5      	ldr	r3, [pc, #660]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800855e:	f001 b9fc 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008566:	f001 b9f8 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800856a:	4ba0      	ldr	r3, [pc, #640]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b20      	cmp	r3, #32
 8008574:	d118      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008576:	4b9d      	ldr	r3, [pc, #628]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008582:	4b9a      	ldr	r3, [pc, #616]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	e006      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800858e:	4b97      	ldr	r3, [pc, #604]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	0e1b      	lsrs	r3, r3, #24
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	4a95      	ldr	r2, [pc, #596]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085a4:	f001 b9d9 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ac:	f001 b9d5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085b4:	f001 b9d1 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80085b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085bc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80085c0:	430b      	orrs	r3, r1
 80085c2:	d17f      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80085c4:	4b89      	ldr	r3, [pc, #548]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80085c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d165      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80085d6:	4b85      	ldr	r3, [pc, #532]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80085d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085dc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80085e8:	d034      	beq.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80085f0:	d853      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085f8:	d00b      	beq.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008600:	d84b      	bhi.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	2b00      	cmp	r3, #0
 8008606:	d016      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800860e:	d009      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008610:	e043      	b.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fa16 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008620:	f001 b99b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008624:	f107 0318 	add.w	r3, r7, #24
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fb67 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008632:	f001 b992 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008636:	4b6d      	ldr	r3, [pc, #436]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008642:	d103      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008644:	4b6a      	ldr	r3, [pc, #424]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008648:	f001 b987 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008650:	f001 b983 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008654:	4b65      	ldr	r3, [pc, #404]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d118      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008660:	4b62      	ldr	r3, [pc, #392]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800866c:	4b5f      	ldr	r3, [pc, #380]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	e006      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008678:	4b5c      	ldr	r3, [pc, #368]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800867a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	4a5b      	ldr	r2, [pc, #364]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800868e:	f001 b964 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008696:	f001 b960 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800869e:	f001 b95c 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086a8:	d108      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff f9ca 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b8:	f001 b94f 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c0:	f001 b94b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80086c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c8:	1e51      	subs	r1, r2, #1
 80086ca:	430b      	orrs	r3, r1
 80086cc:	d136      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80086ce:	4b47      	ldr	r3, [pc, #284]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80086e0:	f7fe f9cc 	bl	8006a7c <HAL_RCC_GetPCLK2Freq>
 80086e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80086e6:	f001 b938 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d104      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80086f0:	f7fe f894 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80086f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80086f6:	f001 b930 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80086fa:	4b3c      	ldr	r3, [pc, #240]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008706:	d106      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	2b02      	cmp	r3, #2
 800870c:	d103      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800870e:	4b3a      	ldr	r3, [pc, #232]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	f001 b922 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008716:	4b35      	ldr	r3, [pc, #212]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	d107      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	2b03      	cmp	r3, #3
 8008728:	d104      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800872a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008730:	f001 b913 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	637b      	str	r3, [r7, #52]	@ 0x34
 8008738:	f001 b90f 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800873c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008740:	1e91      	subs	r1, r2, #2
 8008742:	430b      	orrs	r3, r1
 8008744:	d136      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008746:	4b29      	ldr	r3, [pc, #164]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800874c:	f003 030c 	and.w	r3, r3, #12
 8008750:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	2b00      	cmp	r3, #0
 8008756:	d104      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008758:	f7fe f97c 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 800875c:	6378      	str	r0, [r7, #52]	@ 0x34
 800875e:	f001 b8fc 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	2b04      	cmp	r3, #4
 8008766:	d104      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008768:	f7fe f858 	bl	800681c <HAL_RCC_GetSysClockFreq>
 800876c:	6378      	str	r0, [r7, #52]	@ 0x34
 800876e:	f001 b8f4 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008772:	4b1e      	ldr	r3, [pc, #120]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800877a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800877e:	d106      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b08      	cmp	r3, #8
 8008784:	d103      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008786:	4b1c      	ldr	r3, [pc, #112]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008788:	637b      	str	r3, [r7, #52]	@ 0x34
 800878a:	f001 b8e6 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800878e:	4b17      	ldr	r3, [pc, #92]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	d107      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	2b0c      	cmp	r3, #12
 80087a0:	d104      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a8:	f001 b8d7 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b0:	f001 b8d3 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80087b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087b8:	1f11      	subs	r1, r2, #4
 80087ba:	430b      	orrs	r3, r1
 80087bc:	d13f      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80087be:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80087d0:	f7fe f940 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 80087d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80087d6:	f001 b8c0 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	2b10      	cmp	r3, #16
 80087de:	d10d      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80087e0:	f7fe f81c 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80087e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80087e6:	f001 b8b8 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 80087ea:	bf00      	nop
 80087ec:	46020c00 	.word	0x46020c00
 80087f0:	02dc6c00 	.word	0x02dc6c00
 80087f4:	0800e958 	.word	0x0800e958
 80087f8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80087fc:	4ba8      	ldr	r3, [pc, #672]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008808:	d106      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	2b20      	cmp	r3, #32
 800880e:	d103      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008810:	4ba4      	ldr	r3, [pc, #656]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34
 8008814:	f001 b8a1 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008818:	4ba1      	ldr	r3, [pc, #644]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800881a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b02      	cmp	r3, #2
 8008824:	d107      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	2b30      	cmp	r3, #48	@ 0x30
 800882a:	d104      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800882c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008830:	637b      	str	r3, [r7, #52]	@ 0x34
 8008832:	f001 b892 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
 800883a:	f001 b88e 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800883e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008842:	f1a2 0108 	sub.w	r1, r2, #8
 8008846:	430b      	orrs	r3, r1
 8008848:	d136      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800884a:	4b95      	ldr	r3, [pc, #596]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800884c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008850:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008854:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	d104      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800885c:	f7fe f8fa 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8008860:	6378      	str	r0, [r7, #52]	@ 0x34
 8008862:	f001 b87a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	2b40      	cmp	r3, #64	@ 0x40
 800886a:	d104      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800886c:	f7fd ffd6 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008870:	6378      	str	r0, [r7, #52]	@ 0x34
 8008872:	f001 b872 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008876:	4b8a      	ldr	r3, [pc, #552]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800887e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008882:	d106      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2b80      	cmp	r3, #128	@ 0x80
 8008888:	d103      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800888a:	4b86      	ldr	r3, [pc, #536]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800888c:	637b      	str	r3, [r7, #52]	@ 0x34
 800888e:	f001 b864 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008892:	4b83      	ldr	r3, [pc, #524]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b02      	cmp	r3, #2
 800889e:	d107      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80088a4:	d104      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80088a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ac:	f001 b855 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b4:	f001 b851 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80088b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088bc:	f1a2 0110 	sub.w	r1, r2, #16
 80088c0:	430b      	orrs	r3, r1
 80088c2:	d139      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80088c4:	4b76      	ldr	r3, [pc, #472]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80088c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80088d6:	f7fe f8bd 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 80088da:	6378      	str	r0, [r7, #52]	@ 0x34
 80088dc:	f001 b83d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e6:	d104      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80088e8:	f7fd ff98 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80088ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80088ee:	f001 b834 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80088f2:	4b6b      	ldr	r3, [pc, #428]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fe:	d107      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008906:	d103      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008908:	4b66      	ldr	r3, [pc, #408]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
 800890c:	f001 b825 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008910:	4b63      	ldr	r3, [pc, #396]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b02      	cmp	r3, #2
 800891c:	d108      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008924:	d104      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
 800892c:	f001 b815 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34
 8008934:	f001 b811 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008940:	430b      	orrs	r3, r1
 8008942:	d139      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008944:	4b56      	ldr	r3, [pc, #344]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800894a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800894e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008956:	f7fe f87d 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 800895a:	6378      	str	r0, [r7, #52]	@ 0x34
 800895c:	f000 bffd 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008966:	d104      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008968:	f7fd ff58 	bl	800681c <HAL_RCC_GetSysClockFreq>
 800896c:	6378      	str	r0, [r7, #52]	@ 0x34
 800896e:	f000 bff4 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008972:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897e:	d107      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008986:	d103      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008988:	4b46      	ldr	r3, [pc, #280]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
 800898c:	f000 bfe5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008990:	4b43      	ldr	r3, [pc, #268]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b02      	cmp	r3, #2
 800899c:	d108      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800899e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089a4:	d104      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80089a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ac:	f000 bfd5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b4:	f000 bfd1 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	f1a2 0120 	sub.w	r1, r2, #32
 80089c0:	430b      	orrs	r3, r1
 80089c2:	d158      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80089c4:	4b36      	ldr	r3, [pc, #216]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80089c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80089d6:	f7fe f865 	bl	8006aa4 <HAL_RCC_GetPCLK3Freq>
 80089da:	6378      	str	r0, [r7, #52]	@ 0x34
 80089dc:	f000 bfbd 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d104      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80089e6:	f7fd ff19 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80089ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80089ec:	f000 bfb5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80089f0:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089fc:	d106      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d103      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8008a04:	4b27      	ldr	r3, [pc, #156]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a08:	f000 bfa7 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008a0c:	4b24      	ldr	r3, [pc, #144]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d107      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d104      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8008a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a26:	f000 bf98 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d11b      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d118      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a3c:	4b18      	ldr	r3, [pc, #96]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8008a48:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	0e1b      	lsrs	r3, r3, #24
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	e006      	b.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008a54:	4b12      	ldr	r3, [pc, #72]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	0e1b      	lsrs	r3, r3, #24
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	4a11      	ldr	r2, [pc, #68]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6a:	f000 bf76 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a72:	f000 bf72 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	d172      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008a82:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a88:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a94:	d10a      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a96:	f7fd fec1 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a9c:	f000 bf5d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008aa0:	46020c00 	.word	0x46020c00
 8008aa4:	00f42400 	.word	0x00f42400
 8008aa8:	0800e958 	.word	0x0800e958
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ab2:	d108      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab4:	f107 0318 	add.w	r3, r7, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff f91f 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac2:	f000 bf4a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008acc:	f7fd ffa8 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8008ad0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ad2:	f000 bf42 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008adc:	d122      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ade:	4bb0      	ldr	r3, [pc, #704]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d118      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008aea:	4bad      	ldr	r3, [pc, #692]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008af6:	4baa      	ldr	r3, [pc, #680]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	e006      	b.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008b02:	4ba7      	ldr	r3, [pc, #668]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b08:	041b      	lsls	r3, r3, #16
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	4aa4      	ldr	r2, [pc, #656]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b18:	f000 bf1f 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b20:	f000 bf1b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008b24:	4b9e      	ldr	r3, [pc, #632]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b30:	d107      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b38:	d103      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8008b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b3e:	f000 bf0c 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008b42:	4b97      	ldr	r3, [pc, #604]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b56:	d103      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8008b58:	4b93      	ldr	r3, [pc, #588]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5c:	f000 befd 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b64:	f000 bef9 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b70:	430b      	orrs	r3, r1
 8008b72:	d158      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008b74:	4b8a      	ldr	r3, [pc, #552]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008b76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d84b      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008b86:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008bc5 	.word	0x08008bc5
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008bb3 	.word	0x08008bb3
 8008b98:	08008bcf 	.word	0x08008bcf
 8008b9c:	08008bd9 	.word	0x08008bd9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe ff4f 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bae:	f000 bed4 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb2:	f107 030c 	add.w	r3, r7, #12
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff f9fa 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bc0:	f000 becb 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008bc4:	f7fd ff2c 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8008bc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008bca:	f000 bec6 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008bce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd4:	f000 bec1 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008bd8:	4b71      	ldr	r3, [pc, #452]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d118      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008be4:	4b6e      	ldr	r3, [pc, #440]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	0e1b      	lsrs	r3, r3, #24
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	e006      	b.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008bfc:	4b68      	ldr	r3, [pc, #416]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	0e1b      	lsrs	r3, r3, #24
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	4a66      	ldr	r2, [pc, #408]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c12:	f000 bea2 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c1a:	f000 be9e 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c22:	f000 be9a 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	d167      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008c32:	4b5b      	ldr	r3, [pc, #364]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c44:	d036      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c4c:	d855      	bhi.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c54:	d029      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c5c:	d84d      	bhi.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c64:	d013      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c6c:	d845      	bhi.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d015      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c7a:	d13e      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fee1 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c8a:	f000 be66 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff f98c 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c9c:	f000 be5d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008ca0:	f7fd febe 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8008ca4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ca6:	f000 be58 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008caa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cb0:	f000 be53 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d118      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cc0:	4b37      	ldr	r3, [pc, #220]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d005      	beq.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008ccc:	4b34      	ldr	r3, [pc, #208]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	0e1b      	lsrs	r3, r3, #24
 8008cd2:	f003 030f 	and.w	r3, r3, #15
 8008cd6:	e006      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008cd8:	4b31      	ldr	r3, [pc, #196]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cde:	041b      	lsls	r3, r3, #16
 8008ce0:	0e1b      	lsrs	r3, r3, #24
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cee:	f000 be34 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cf6:	f000 be30 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cfe:	f000 be2c 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d06:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	d152      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d0e:	4b24      	ldr	r3, [pc, #144]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d20:	f7fd fe98 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8008d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d26:	f000 be18 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d30:	d104      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d32:	f7fd fd73 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008d36:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d38:	f000 be0f 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008d3c:	4b18      	ldr	r3, [pc, #96]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d48:	d107      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d50:	d103      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8008d52:	4b15      	ldr	r3, [pc, #84]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d56:	f000 be00 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008d5a:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0320 	and.w	r3, r3, #32
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	d122      	bne.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d6c:	d11e      	bne.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	0e1b      	lsrs	r3, r3, #24
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	e006      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8008d86:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	0e1b      	lsrs	r3, r3, #24
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	4a03      	ldr	r2, [pc, #12]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d9c:	f000 bddd 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8008da0:	46020c00 	.word	0x46020c00
 8008da4:	0800e958 	.word	0x0800e958
 8008da8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db0:	f000 bdd3 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	d14c      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008dc0:	4ba8      	ldr	r3, [pc, #672]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008dca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d104      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fd fe3f 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8008dd8:	f000 bdbf 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de2:	d104      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008de4:	f7fd fd1a 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008de8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008dea:	f000 bdb6 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008dee:	4b9d      	ldr	r3, [pc, #628]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dfa:	d107      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e02:	d103      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8008e04:	4b98      	ldr	r3, [pc, #608]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e08:	f000 bda7 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008e0c:	4b95      	ldr	r3, [pc, #596]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d11c      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e1e:	d118      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e20:	4b90      	ldr	r3, [pc, #576]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008e2c:	4b8d      	ldr	r3, [pc, #564]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0e1b      	lsrs	r3, r3, #24
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	e006      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8008e38:	4b8a      	ldr	r3, [pc, #552]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e3e:	041b      	lsls	r3, r3, #16
 8008e40:	0e1b      	lsrs	r3, r3, #24
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	4a89      	ldr	r2, [pc, #548]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4e:	f000 bd84 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e56:	f000 bd80 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008e62:	430b      	orrs	r3, r1
 8008e64:	d158      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008e66:	4b7f      	ldr	r3, [pc, #508]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e6c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e76:	d028      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e7c:	d848      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	2b80      	cmp	r3, #128	@ 0x80
 8008e82:	d00e      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	2b80      	cmp	r3, #128	@ 0x80
 8008e88:	d842      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d014      	beq.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008e96:	e03b      	b.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008e98:	f7fd fe04 	bl	8006aa4 <HAL_RCC_GetPCLK3Freq>
 8008e9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008e9e:	f000 bd5c 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ea2:	4b70      	ldr	r3, [pc, #448]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eae:	d103      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8008eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008eb4:	f000 bd51 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ebc:	f000 bd4d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008ec0:	f7fd fcac 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008ec4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ec6:	f000 bd48 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008eca:	4b66      	ldr	r3, [pc, #408]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d118      	bne.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ed6:	4b63      	ldr	r3, [pc, #396]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8008ee2:	4b60      	ldr	r3, [pc, #384]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	0e1b      	lsrs	r3, r3, #24
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	e006      	b.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8008eee:	4b5d      	ldr	r3, [pc, #372]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008ef4:	041b      	lsls	r3, r3, #16
 8008ef6:	0e1b      	lsrs	r3, r3, #24
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	4a5b      	ldr	r2, [pc, #364]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f04:	f000 bd29 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f0c:	f000 bd25 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f14:	f000 bd21 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8008f20:	430b      	orrs	r3, r1
 8008f22:	d14c      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008f24:	4b4f      	ldr	r3, [pc, #316]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d104      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f36:	f7fd fd8d 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8008f3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f3c:	f000 bd0d 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f46:	d104      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f48:	f7fd fc68 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008f4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f4e:	f000 bd04 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008f52:	4b44      	ldr	r3, [pc, #272]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5e:	d107      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f66:	d103      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8008f68:	4b3f      	ldr	r3, [pc, #252]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	f000 bcf5 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008f70:	4b3c      	ldr	r3, [pc, #240]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d11c      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f82:	d118      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f84:	4b37      	ldr	r3, [pc, #220]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8008f90:	4b34      	ldr	r3, [pc, #208]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	0e1b      	lsrs	r3, r3, #24
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	e006      	b.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008f9c:	4b31      	ldr	r3, [pc, #196]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	0e1b      	lsrs	r3, r3, #24
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	4a30      	ldr	r2, [pc, #192]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb2:	f000 bcd2 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fba:	f000 bcce 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8008fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc2:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	d152      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8008fca:	4b26      	ldr	r3, [pc, #152]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008fcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fd0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008fd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008fdc:	f7fd fd3a 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8008fe0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fe2:	f000 bcba 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fec:	d104      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fee:	f7fd fc15 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8008ff2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ff4:	f000 bcb1 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8008ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009004:	d107      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800900c:	d103      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800900e:	4b16      	ldr	r3, [pc, #88]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
 8009012:	f000 bca2 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8009016:	4b13      	ldr	r3, [pc, #76]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b20      	cmp	r3, #32
 8009020:	d11c      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009028:	d118      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800902a:	4b0e      	ldr	r3, [pc, #56]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8009036:	4b0b      	ldr	r3, [pc, #44]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	e006      	b.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8009042:	4b08      	ldr	r3, [pc, #32]	@ (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8009044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	0e1b      	lsrs	r3, r3, #24
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	4a06      	ldr	r2, [pc, #24]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
 8009058:	f000 bc7f 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009060:	f000 bc7b 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009064:	46020c00 	.word	0x46020c00
 8009068:	00f42400 	.word	0x00f42400
 800906c:	0800e958 	.word	0x0800e958
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8009078:	430b      	orrs	r3, r1
 800907a:	d14c      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800907c:	4ba6      	ldr	r3, [pc, #664]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800907e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009082:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009086:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800908e:	f7fd fce1 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 8009092:	6378      	str	r0, [r7, #52]	@ 0x34
 8009094:	f000 bc61 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8009098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800909e:	d104      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090a0:	f7fd fbbc 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80090a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80090a6:	f000 bc58 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80090aa:	4b9b      	ldr	r3, [pc, #620]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b6:	d107      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090be:	d103      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80090c0:	4b96      	ldr	r3, [pc, #600]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c4:	f000 bc49 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80090c8:	4b93      	ldr	r3, [pc, #588]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d11c      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80090da:	d118      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090dc:	4b8e      	ldr	r3, [pc, #568]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80090e8:	4b8b      	ldr	r3, [pc, #556]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	0e1b      	lsrs	r3, r3, #24
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	e006      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80090f4:	4b88      	ldr	r3, [pc, #544]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80090f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	0e1b      	lsrs	r3, r3, #24
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	4a87      	ldr	r2, [pc, #540]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
 800910a:	f000 bc26 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
 8009112:	f000 bc22 	b.w	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800911e:	430b      	orrs	r3, r1
 8009120:	d164      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009122:	4b7d      	ldr	r3, [pc, #500]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800912c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	2b00      	cmp	r3, #0
 8009132:	d120      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009134:	4b78      	ldr	r3, [pc, #480]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b20      	cmp	r3, #32
 800913e:	d117      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009140:	4b75      	ldr	r3, [pc, #468]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800914c:	4b72      	ldr	r3, [pc, #456]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	0e1b      	lsrs	r3, r3, #24
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	e006      	b.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8009158:	4b6f      	ldr	r3, [pc, #444]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800915a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	0e1b      	lsrs	r3, r3, #24
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	4a6e      	ldr	r2, [pc, #440]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
 800916e:	e3f4      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
 8009174:	e3f1      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009176:	4b68      	ldr	r3, [pc, #416]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800917c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009184:	d112      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918c:	d10e      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800918e:	4b62      	ldr	r3, [pc, #392]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800919c:	d102      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800919e:	23fa      	movs	r3, #250	@ 0xfa
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80091a2:	e3da      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80091a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80091aa:	e3d6      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80091ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b8:	d106      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c0:	d102      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80091c2:	4b56      	ldr	r3, [pc, #344]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c6:	e3c8      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80091c8:	4b53      	ldr	r3, [pc, #332]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d107      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091dc:	d103      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 80091de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e4:	e3b9      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ea:	e3b6      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80091ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091f0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80091f4:	430b      	orrs	r3, r1
 80091f6:	d164      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80091f8:	4b47      	ldr	r3, [pc, #284]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009202:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	2b00      	cmp	r3, #0
 8009208:	d120      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800920a:	4b43      	ldr	r3, [pc, #268]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b20      	cmp	r3, #32
 8009214:	d117      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009216:	4b40      	ldr	r3, [pc, #256]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8009222:	4b3d      	ldr	r3, [pc, #244]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	0e1b      	lsrs	r3, r3, #24
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	e006      	b.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800922e:	4b3a      	ldr	r3, [pc, #232]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009234:	041b      	lsls	r3, r3, #16
 8009236:	0e1b      	lsrs	r3, r3, #24
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	4a38      	ldr	r2, [pc, #224]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800923e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009242:	637b      	str	r3, [r7, #52]	@ 0x34
 8009244:	e389      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	637b      	str	r3, [r7, #52]	@ 0x34
 800924a:	e386      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800924c:	4b32      	ldr	r3, [pc, #200]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800924e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800925a:	d112      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800925c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009262:	d10e      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009264:	4b2c      	ldr	r3, [pc, #176]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800926a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009272:	d102      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8009274:	23fa      	movs	r3, #250	@ 0xfa
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009278:	e36f      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800927a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009280:	e36b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009282:	4b25      	ldr	r3, [pc, #148]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800928a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800928e:	d106      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8009290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009296:	d102      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8009298:	4b20      	ldr	r3, [pc, #128]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
 800929c:	e35d      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800929e:	4b1e      	ldr	r3, [pc, #120]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d107      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092b2:	d103      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 80092b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ba:	e34e      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c0:	e34b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80092c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80092ca:	430b      	orrs	r3, r1
 80092cc:	d14e      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80092ce:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80092d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d103      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092e0:	f7fd fbb8 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 80092e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80092e6:	e338      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80092e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092f6:	d119      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092fe:	d115      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009300:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800930a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800930e:	d109      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8009310:	23fa      	movs	r3, #250	@ 0xfa
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009314:	e321      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009316:	bf00      	nop
 8009318:	46020c00 	.word	0x46020c00
 800931c:	00f42400 	.word	0x00f42400
 8009320:	0800e958 	.word	0x0800e958
      }
      else
      {
        frequency = LSI_VALUE;
 8009324:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800932a:	e316      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800932c:	4ba8      	ldr	r3, [pc, #672]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009338:	d106      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009340:	d102      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8009342:	4ba4      	ldr	r3, [pc, #656]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
 8009346:	e308      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009348:	4ba1      	ldr	r3, [pc, #644]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800934a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b02      	cmp	r3, #2
 8009354:	d107      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800935c:	d103      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800935e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
 8009364:	e2f9      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
 800936a:	e2f6      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800936c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009370:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009374:	430b      	orrs	r3, r1
 8009376:	d12d      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009378:	4b95      	ldr	r3, [pc, #596]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800937a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800937e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009382:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009384:	4b92      	ldr	r3, [pc, #584]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800938c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009390:	d105      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8009398:	4b8e      	ldr	r3, [pc, #568]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
 800939c:	e2dd      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093a4:	d107      	bne.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fb4c 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b4:	e2d1      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093bc:	d107      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093be:	f107 0318 	add.w	r3, r7, #24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fc9a 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80093cc:	e2c5      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d2:	e2c2      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80093d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80093dc:	430b      	orrs	r3, r1
 80093de:	d156      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80093e0:	4b7b      	ldr	r3, [pc, #492]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80093e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80093ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093f2:	d028      	beq.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093fa:	d845      	bhi.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80093fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009402:	d013      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800940a:	d83d      	bhi.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009418:	d004      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800941a:	e035      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800941c:	f7fd fb2e 	bl	8006a7c <HAL_RCC_GetPCLK2Freq>
 8009420:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009422:	e29a      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009424:	f7fd f9fa 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8009428:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800942a:	e296      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800942c:	4b68      	ldr	r3, [pc, #416]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009438:	d102      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800943a:	4b66      	ldr	r3, [pc, #408]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800943e:	e28c      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009444:	e289      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009446:	4b62      	ldr	r3, [pc, #392]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b20      	cmp	r3, #32
 8009450:	d117      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009452:	4b5f      	ldr	r3, [pc, #380]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800945e:	4b5c      	ldr	r3, [pc, #368]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	0e1b      	lsrs	r3, r3, #24
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	e006      	b.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800946a:	4b59      	ldr	r3, [pc, #356]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800946c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	0e1b      	lsrs	r3, r3, #24
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	4a57      	ldr	r2, [pc, #348]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800947a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009480:	e26b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009486:	e268      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800948c:	e265      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800948e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009492:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009496:	430b      	orrs	r3, r1
 8009498:	d156      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800949a:	4b4d      	ldr	r3, [pc, #308]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800949c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80094a4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094ac:	d028      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094b4:	d845      	bhi.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094bc:	d013      	beq.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094c4:	d83d      	bhi.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094d2:	d004      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 80094d4:	e035      	b.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80094d6:	f7fd fabd 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 80094da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094dc:	e23d      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80094de:	f7fd f99d 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80094e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094e4:	e239      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094e6:	4b3a      	ldr	r3, [pc, #232]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094f2:	d102      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80094f4:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80094f8:	e22f      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094fe:	e22c      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009500:	4b33      	ldr	r3, [pc, #204]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b20      	cmp	r3, #32
 800950a:	d117      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800950c:	4b30      	ldr	r3, [pc, #192]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8009518:	4b2d      	ldr	r3, [pc, #180]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	0e1b      	lsrs	r3, r3, #24
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	e006      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009524:	4b2a      	ldr	r3, [pc, #168]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800952a:	041b      	lsls	r3, r3, #16
 800952c:	0e1b      	lsrs	r3, r3, #24
 800952e:	f003 030f 	and.w	r3, r3, #15
 8009532:	4a29      	ldr	r2, [pc, #164]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8009534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009538:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800953a:	e20e      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009540:	e20b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009546:	e208      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009550:	430b      	orrs	r3, r1
 8009552:	d17c      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009554:	4b1e      	ldr	r3, [pc, #120]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800955a:	f003 0318 	and.w	r3, r3, #24
 800955e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	2b18      	cmp	r3, #24
 8009564:	d870      	bhi.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 8009566:	a201      	add	r2, pc, #4	@ (adr r2, 800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	080095dd 	.word	0x080095dd
 8009570:	08009649 	.word	0x08009649
 8009574:	08009649 	.word	0x08009649
 8009578:	08009649 	.word	0x08009649
 800957c:	08009649 	.word	0x08009649
 8009580:	08009649 	.word	0x08009649
 8009584:	08009649 	.word	0x08009649
 8009588:	08009649 	.word	0x08009649
 800958c:	080095e5 	.word	0x080095e5
 8009590:	08009649 	.word	0x08009649
 8009594:	08009649 	.word	0x08009649
 8009598:	08009649 	.word	0x08009649
 800959c:	08009649 	.word	0x08009649
 80095a0:	08009649 	.word	0x08009649
 80095a4:	08009649 	.word	0x08009649
 80095a8:	08009649 	.word	0x08009649
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	08009649 	.word	0x08009649
 80095b4:	08009649 	.word	0x08009649
 80095b8:	08009649 	.word	0x08009649
 80095bc:	08009649 	.word	0x08009649
 80095c0:	08009649 	.word	0x08009649
 80095c4:	08009649 	.word	0x08009649
 80095c8:	08009649 	.word	0x08009649
 80095cc:	08009607 	.word	0x08009607
 80095d0:	46020c00 	.word	0x46020c00
 80095d4:	00f42400 	.word	0x00f42400
 80095d8:	0800e958 	.word	0x0800e958
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80095dc:	f7fd fa62 	bl	8006aa4 <HAL_RCC_GetPCLK3Freq>
 80095e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095e2:	e1ba      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80095e4:	f7fd f91a 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80095e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095ea:	e1b6      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095ec:	4b9f      	ldr	r3, [pc, #636]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095f8:	d102      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 80095fa:	4b9d      	ldr	r3, [pc, #628]	@ (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80095fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095fe:	e1ac      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009604:	e1a9      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009606:	4b99      	ldr	r3, [pc, #612]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b20      	cmp	r3, #32
 8009610:	d117      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009612:	4b96      	ldr	r3, [pc, #600]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d005      	beq.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800961e:	4b93      	ldr	r3, [pc, #588]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	e006      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800962a:	4b90      	ldr	r3, [pc, #576]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800962c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	0e1b      	lsrs	r3, r3, #24
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	4a8e      	ldr	r2, [pc, #568]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800963a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009640:	e18b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009646:	e188      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800964c:	e185      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800964e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009652:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009656:	430b      	orrs	r3, r1
 8009658:	d155      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800965a:	4b84      	ldr	r3, [pc, #528]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800965c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009660:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800966c:	d013      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009674:	d844      	bhi.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8009676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009678:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800967c:	d013      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009684:	d83c      	bhi.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	2b00      	cmp	r3, #0
 800968a:	d014      	beq.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009692:	d014      	beq.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 8009694:	e034      	b.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009696:	f107 0318 	add.w	r3, r7, #24
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fb2e 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096a4:	e159      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe f9cc 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096b4:	e151      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80096b6:	f7fd f8b1 	bl	800681c <HAL_RCC_GetSysClockFreq>
 80096ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096bc:	e14d      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096be:	4b6b      	ldr	r3, [pc, #428]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d117      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096ca:	4b68      	ldr	r3, [pc, #416]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 80096d6:	4b65      	ldr	r3, [pc, #404]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	e006      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 80096e2:	4b62      	ldr	r3, [pc, #392]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80096e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	0e1b      	lsrs	r3, r3, #24
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	4a60      	ldr	r2, [pc, #384]	@ (8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096f8:	e12f      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096fe:	e12c      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009704:	e129      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8009706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970a:	1e59      	subs	r1, r3, #1
 800970c:	ea52 0301 	orrs.w	r3, r2, r1
 8009710:	d13c      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8009712:	4b56      	ldr	r3, [pc, #344]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009718:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800971c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009724:	d027      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800972c:	d82b      	bhi.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009734:	d017      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 8009736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800973c:	d823      	bhi.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800974a:	d004      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800974c:	e01b      	b.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800974e:	f7fd f865 	bl	800681c <HAL_RCC_GetSysClockFreq>
 8009752:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009754:	e101      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe f974 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009764:	e0f9      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fac6 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009774:	e0f1      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009776:	f107 030c 	add.w	r3, r7, #12
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fc18 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009784:	e0e9      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800978a:	e0e6      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800978c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009790:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009794:	430b      	orrs	r3, r1
 8009796:	d131      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009798:	4b34      	ldr	r3, [pc, #208]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800979a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800979e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80097a4:	4b31      	ldr	r3, [pc, #196]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80097a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d106      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 80097b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097be:	e0cc      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80097c0:	4b2a      	ldr	r3, [pc, #168]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80097c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ce:	d112      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d6:	d10e      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097d8:	4b24      	ldr	r3, [pc, #144]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80097da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e6:	d102      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 80097e8:	23fa      	movs	r3, #250	@ 0xfa
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097ec:	e0b5      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80097ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097f4:	e0b1      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fa:	e0ae      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80097fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009800:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009804:	430b      	orrs	r3, r1
 8009806:	d13b      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009808:	4b18      	ldr	r3, [pc, #96]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800980a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800980e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009812:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009814:	4b15      	ldr	r3, [pc, #84]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800981c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009820:	d105      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 8009828:	4b13      	ldr	r3, [pc, #76]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
 800982c:	e095      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800982e:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800983a:	d106      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009842:	d102      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009844:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
 8009848:	e087      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800984a:	4b08      	ldr	r3, [pc, #32]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009856:	d106      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985e:	d102      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8009860:	4b03      	ldr	r3, [pc, #12]	@ (8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
 8009864:	e079      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
 800986a:	e076      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800986c:	46020c00 	.word	0x46020c00
 8009870:	00f42400 	.word	0x00f42400
 8009874:	0800e958 	.word	0x0800e958
 8009878:	02dc6c00 	.word	0x02dc6c00
 800987c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8009880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009884:	1e99      	subs	r1, r3, #2
 8009886:	ea52 0301 	orrs.w	r3, r2, r1
 800988a:	d120      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800988c:	4b35      	ldr	r3, [pc, #212]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800988e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009896:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098a4:	d008      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 80098a6:	e00f      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fb7f 	bl	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098b6:	e050      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b8:	f107 0318 	add.w	r3, r7, #24
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fa1d 	bl	8007cfc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098c6:	e048      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098cc:	e045      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80098ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d2:	f1a3 0108 	sub.w	r1, r3, #8
 80098d6:	ea52 0301 	orrs.w	r3, r2, r1
 80098da:	d13c      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80098dc:	4b21      	ldr	r3, [pc, #132]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 80098de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098e2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80098e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80098e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098f4:	d105      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 80098fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009900:	e02b      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8009902:	4b18      	ldr	r3, [pc, #96]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990e:	d106      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009916:	d102      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 8009918:	4b14      	ldr	r3, [pc, #80]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
 800991c:	e01d      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009924:	d107      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe f88c 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
 8009934:	e011      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800993c:	d108      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800993e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe f880 	bl	8007a48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	e004      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
 8009954:	e001      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800995a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800995c:	4618      	mov	r0, r3
 800995e:	3738      	adds	r7, #56	@ 0x38
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	46020c00 	.word	0x46020c00
 8009968:	00f42400 	.word	0x00f42400
 800996c:	007a1200 	.word	0x007a1200

08009970 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009978:	4b47      	ldr	r3, [pc, #284]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a46      	ldr	r2, [pc, #280]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 800997e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009982:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009984:	f7f7 fde2 	bl	800154c <HAL_GetTick>
 8009988:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800998a:	e008      	b.n	800999e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800998c:	f7f7 fdde 	bl	800154c <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b02      	cmp	r3, #2
 8009998:	d901      	bls.n	800999e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e077      	b.n	8009a8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800999e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1f0      	bne.n	800998c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099aa:	4b3b      	ldr	r3, [pc, #236]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 80099ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6811      	ldr	r1, [r2, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6852      	ldr	r2, [r2, #4]
 80099be:	3a01      	subs	r2, #1
 80099c0:	0212      	lsls	r2, r2, #8
 80099c2:	430a      	orrs	r2, r1
 80099c4:	4934      	ldr	r1, [pc, #208]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80099ca:	4b33      	ldr	r3, [pc, #204]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 80099cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ce:	4b33      	ldr	r3, [pc, #204]	@ (8009a9c <RCCEx_PLL2_Config+0x12c>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	6892      	ldr	r2, [r2, #8]
 80099d6:	3a01      	subs	r2, #1
 80099d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68d2      	ldr	r2, [r2, #12]
 80099e0:	3a01      	subs	r2, #1
 80099e2:	0252      	lsls	r2, r2, #9
 80099e4:	b292      	uxth	r2, r2
 80099e6:	4311      	orrs	r1, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6912      	ldr	r2, [r2, #16]
 80099ec:	3a01      	subs	r2, #1
 80099ee:	0412      	lsls	r2, r2, #16
 80099f0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80099f4:	4311      	orrs	r1, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6952      	ldr	r2, [r2, #20]
 80099fa:	3a01      	subs	r2, #1
 80099fc:	0612      	lsls	r2, r2, #24
 80099fe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009a02:	430a      	orrs	r2, r1
 8009a04:	4924      	ldr	r1, [pc, #144]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a0a:	4b23      	ldr	r3, [pc, #140]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	f023 020c 	bic.w	r2, r3, #12
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	4920      	ldr	r1, [pc, #128]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	491c      	ldr	r1, [pc, #112]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a30:	f023 0310 	bic.w	r3, r3, #16
 8009a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a36:	4b18      	ldr	r3, [pc, #96]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	69d2      	ldr	r2, [r2, #28]
 8009a46:	00d2      	lsls	r2, r2, #3
 8009a48:	4913      	ldr	r1, [pc, #76]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009a4e:	4b12      	ldr	r3, [pc, #72]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a11      	ldr	r2, [pc, #68]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a54:	f043 0310 	orr.w	r3, r3, #16
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a66:	f7f7 fd71 	bl	800154c <HAL_GetTick>
 8009a6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a6c:	e008      	b.n	8009a80 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a6e:	f7f7 fd6d 	bl	800154c <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e006      	b.n	8009a8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <RCCEx_PLL2_Config+0x128>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0f0      	beq.n	8009a6e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0

}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	46020c00 	.word	0x46020c00
 8009a9c:	80800000 	.word	0x80800000

08009aa0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009aa8:	4b47      	ldr	r3, [pc, #284]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a46      	ldr	r2, [pc, #280]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ab2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ab4:	f7f7 fd4a 	bl	800154c <HAL_GetTick>
 8009ab8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009aba:	e008      	b.n	8009ace <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009abc:	f7f7 fd46 	bl	800154c <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d901      	bls.n	8009ace <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e077      	b.n	8009bbe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ace:	4b3e      	ldr	r3, [pc, #248]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f0      	bne.n	8009abc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009ada:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ade:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6811      	ldr	r1, [r2, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6852      	ldr	r2, [r2, #4]
 8009aee:	3a01      	subs	r2, #1
 8009af0:	0212      	lsls	r2, r2, #8
 8009af2:	430a      	orrs	r2, r1
 8009af4:	4934      	ldr	r1, [pc, #208]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	630b      	str	r3, [r1, #48]	@ 0x30
 8009afa:	4b33      	ldr	r3, [pc, #204]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009afe:	4b33      	ldr	r3, [pc, #204]	@ (8009bcc <RCCEx_PLL3_Config+0x12c>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6892      	ldr	r2, [r2, #8]
 8009b06:	3a01      	subs	r2, #1
 8009b08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	68d2      	ldr	r2, [r2, #12]
 8009b10:	3a01      	subs	r2, #1
 8009b12:	0252      	lsls	r2, r2, #9
 8009b14:	b292      	uxth	r2, r2
 8009b16:	4311      	orrs	r1, r2
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	6912      	ldr	r2, [r2, #16]
 8009b1c:	3a01      	subs	r2, #1
 8009b1e:	0412      	lsls	r2, r2, #16
 8009b20:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009b24:	4311      	orrs	r1, r2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6952      	ldr	r2, [r2, #20]
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	0612      	lsls	r2, r2, #24
 8009b2e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009b32:	430a      	orrs	r2, r1
 8009b34:	4924      	ldr	r1, [pc, #144]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009b3a:	4b23      	ldr	r3, [pc, #140]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3e:	f023 020c 	bic.w	r2, r3, #12
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	4920      	ldr	r1, [pc, #128]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	491c      	ldr	r1, [pc, #112]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b60:	f023 0310 	bic.w	r3, r3, #16
 8009b64:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b66:	4b18      	ldr	r3, [pc, #96]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	69d2      	ldr	r2, [r2, #28]
 8009b76:	00d2      	lsls	r2, r2, #3
 8009b78:	4913      	ldr	r1, [pc, #76]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009b7e:	4b12      	ldr	r3, [pc, #72]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b82:	4a11      	ldr	r2, [pc, #68]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b84:	f043 0310 	orr.w	r3, r3, #16
 8009b88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b96:	f7f7 fcd9 	bl	800154c <HAL_GetTick>
 8009b9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b9c:	e008      	b.n	8009bb0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b9e:	f7f7 fcd5 	bl	800154c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d901      	bls.n	8009bb0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e006      	b.n	8009bbe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb0:	4b05      	ldr	r3, [pc, #20]	@ (8009bc8 <RCCEx_PLL3_Config+0x128>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0f0      	beq.n	8009b9e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	46020c00 	.word	0x46020c00
 8009bcc:	80800000 	.word	0x80800000

08009bd0 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009bdc:	f7f7 fcb6 	bl	800154c <HAL_GetTick>
 8009be0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e137      	b.n	8009e5e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a76      	ldr	r2, [pc, #472]	@ (8009dcc <HAL_XSPI_Init+0x1fc>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d008      	beq.n	8009c0a <HAL_XSPI_Init+0x3a>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a74      	ldr	r2, [pc, #464]	@ (8009dd0 <HAL_XSPI_Init+0x200>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <HAL_XSPI_Init+0x3a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a73      	ldr	r2, [pc, #460]	@ (8009dd4 <HAL_XSPI_Init+0x204>)
 8009c08:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a72      	ldr	r2, [pc, #456]	@ (8009dd8 <HAL_XSPI_Init+0x208>)
 8009c10:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a6d      	ldr	r2, [pc, #436]	@ (8009dcc <HAL_XSPI_Init+0x1fc>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d008      	beq.n	8009c2e <HAL_XSPI_Init+0x5e>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a6b      	ldr	r2, [pc, #428]	@ (8009dd0 <HAL_XSPI_Init+0x200>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d003      	beq.n	8009c2e <HAL_XSPI_Init+0x5e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a6a      	ldr	r2, [pc, #424]	@ (8009dd4 <HAL_XSPI_Init+0x204>)
 8009c2c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a66      	ldr	r2, [pc, #408]	@ (8009dcc <HAL_XSPI_Init+0x1fc>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d008      	beq.n	8009c4a <HAL_XSPI_Init+0x7a>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a64      	ldr	r2, [pc, #400]	@ (8009dd0 <HAL_XSPI_Init+0x200>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d003      	beq.n	8009c4a <HAL_XSPI_Init+0x7a>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a63      	ldr	r2, [pc, #396]	@ (8009dd4 <HAL_XSPI_Init+0x204>)
 8009c48:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 8102 	bne.w	8009e5e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f6 fe90 	bl	8000980 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8009c60:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8ff 	bl	8009e68 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	4b5a      	ldr	r3, [pc, #360]	@ (8009ddc <HAL_XSPI_Init+0x20c>)
 8009c72:	4013      	ands	r3, r2
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68d1      	ldr	r1, [r2, #12]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6912      	ldr	r2, [r2, #16]
 8009c7c:	0412      	lsls	r2, r2, #16
 8009c7e:	4311      	orrs	r1, r2
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	6952      	ldr	r2, [r2, #20]
 8009c84:	3a01      	subs	r2, #1
 8009c86:	0212      	lsls	r2, r2, #8
 8009c88:	4311      	orrs	r1, r2
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	69d2      	ldr	r2, [r2, #28]
 8009c8e:	4311      	orrs	r1, r2
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6812      	ldr	r2, [r2, #0]
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8009dcc <HAL_XSPI_Init+0x1fc>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00e      	beq.n	8009cc0 <HAL_XSPI_Init+0xf0>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8009dd0 <HAL_XSPI_Init+0x200>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d009      	beq.n	8009cc0 <HAL_XSPI_Init+0xf0>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a48      	ldr	r2, [pc, #288]	@ (8009dd4 <HAL_XSPI_Init+0x204>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <HAL_XSPI_Init+0xf0>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a49      	ldr	r2, [pc, #292]	@ (8009de0 <HAL_XSPI_Init+0x210>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10a      	bne.n	8009cd6 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f023 0108 	bic.w	r1, r3, #8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfa:	041a      	lsls	r2, r3, #16
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a30      	ldr	r2, [pc, #192]	@ (8009dcc <HAL_XSPI_Init+0x1fc>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00e      	beq.n	8009d2c <HAL_XSPI_Init+0x15c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a2f      	ldr	r2, [pc, #188]	@ (8009dd0 <HAL_XSPI_Init+0x200>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d009      	beq.n	8009d2c <HAL_XSPI_Init+0x15c>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd4 <HAL_XSPI_Init+0x204>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d004      	beq.n	8009d2c <HAL_XSPI_Init+0x15c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a2e      	ldr	r2, [pc, #184]	@ (8009de0 <HAL_XSPI_Init+0x210>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d10a      	bne.n	8009d42 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009d4a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	021a      	lsls	r2, r3, #8
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2120      	movs	r1, #32
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f887 	bl	8009e86 <XSPI_WaitFlagStateUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d16d      	bne.n	8009e5e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd8 <HAL_XSPI_Init+0x208>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <HAL_XSPI_Init+0x1dc>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a0f      	ldr	r2, [pc, #60]	@ (8009de4 <HAL_XSPI_Init+0x214>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d11d      	bne.n	8009de8 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2200      	movs	r2, #0
 8009db6:	2120      	movs	r1, #32
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f864 	bl	8009e86 <XSPI_WaitFlagStateUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00f      	beq.n	8009de8 <HAL_XSPI_Init+0x218>
          {
            return status;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	e049      	b.n	8009e60 <HAL_XSPI_Init+0x290>
 8009dcc:	420d1400 	.word	0x420d1400
 8009dd0:	520d1400 	.word	0x520d1400
 8009dd4:	420d2400 	.word	0x420d2400
 8009dd8:	420d3400 	.word	0x420d3400
 8009ddc:	f8e0c0fc 	.word	0xf8e0c0fc
 8009de0:	520d2400 	.word	0x520d2400
 8009de4:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009e06:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f042 0201 	orr.w	r2, r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d107      	bne.n	8009e46 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0202 	orr.w	r2, r2, #2
 8009e44:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e4e:	d103      	bne.n	8009e58 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	655a      	str	r2, [r3, #84]	@ 0x54
 8009e56:	e002      	b.n	8009e5e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	603b      	str	r3, [r7, #0]
 8009e92:	4613      	mov	r3, r2
 8009e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8009e96:	e019      	b.n	8009ecc <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9e:	d015      	beq.n	8009ecc <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea0:	f7f7 fb54 	bl	800154c <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d302      	bcc.n	8009eb6 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec0:	f043 0201 	orr.w	r2, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e00e      	b.n	8009eea <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6a1a      	ldr	r2, [r3, #32]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bf14      	ite	ne
 8009eda:	2301      	movne	r3, #1
 8009edc:	2300      	moveq	r3, #0
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d1d7      	bne.n	8009e98 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f043 0202 	orr.w	r2, r3, #2
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f023 0202 	bic.w	r2, r3, #2
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009f30:	b084      	sub	sp, #16
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	f107 001c 	add.w	r0, r7, #28
 8009f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009f46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009f48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009f4a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009f4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009f52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009f56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <SDMMC_Init+0x50>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	b004      	add	sp, #16
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	ffc02c00 	.word	0xffc02c00

08009f84 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f043 0203 	orr.w	r2, r3, #3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0303 	and.w	r3, r3, #3
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009ffa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a000:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a006:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <SDMMC_SendCommand+0x50>)
 800a014:	4013      	ands	r3, r2
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	fffee0c0 	.word	0xfffee0c0

0800a030 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	b2db      	uxtb	r3, r3
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3314      	adds	r3, #20
 800a058:	461a      	mov	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	4413      	add	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a096:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a09c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a0a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0

}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0ea:	f107 0308 	add.w	r3, r7, #8
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff ff73 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a0f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0fa:	2110      	movs	r1, #16
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f935 	bl	800a36c <SDMMC_GetCmdResp1>
 800a102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a104:	69fb      	ldr	r3, [r7, #28]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a11c:	2307      	movs	r3, #7
 800a11e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a126:	2300      	movs	r3, #0
 800a128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a12a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a12e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff ff50 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a13c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a140:	2107      	movs	r1, #7
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f912 	bl	800a36c <SDMMC_GetCmdResp1>
 800a148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a14a:	69fb      	ldr	r3, [r7, #28]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a160:	2300      	movs	r3, #0
 800a162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a16c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff ff2f 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa70 	bl	800a664 <SDMMC_GetCmdError>
 800a184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a19c:	2302      	movs	r3, #2
 800a19e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a1a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff ff10 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f9c7 	bl	800a550 <SDMMC_GetCmdResp2>
 800a1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b088      	sub	sp, #32
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1dc:	2309      	movs	r3, #9
 800a1de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a1e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff fef0 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f9a7 	bl	800a550 <SDMMC_GetCmdResp2>
 800a202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800a21a:	887b      	ldrh	r3, [r7, #2]
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a220:	2303      	movs	r3, #3
 800a222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a22e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a232:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fece 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800a240:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a244:	2103      	movs	r1, #3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f890 	bl	800a36c <SDMMC_GetCmdResp1>
 800a24c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a24e:	69fb      	ldr	r3, [r7, #28]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3720      	adds	r7, #32
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a266:	230d      	movs	r3, #13
 800a268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a26a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a270:	2300      	movs	r3, #0
 800a272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff feab 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a28a:	210d      	movs	r1, #13
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f86d 	bl	800a36c <SDMMC_GetCmdResp1>
 800a292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3720      	adds	r7, #32
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b088      	sub	sp, #32
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff fe88 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f989 	bl	800a5e4 <SDMMC_GetCmdResp3>
 800a2d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d4:	69fb      	ldr	r3, [r7, #28]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3720      	adds	r7, #32
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b088      	sub	sp, #32
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800a2ec:	2306      	movs	r3, #6
 800a2ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a300:	f107 0308 	add.w	r3, r7, #8
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7ff fe68 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800a30c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a310:	2106      	movs	r1, #6
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f82a 	bl	800a36c <SDMMC_GetCmdResp1>
 800a318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a31a:	69fb      	ldr	r3, [r7, #28]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a332:	2308      	movs	r3, #8
 800a334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a33a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a346:	f107 0308 	add.w	r3, r7, #8
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff fe45 	bl	8009fdc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800a352:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a356:	2108      	movs	r1, #8
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f807 	bl	800a36c <SDMMC_GetCmdResp1>
 800a35e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a360:	69fb      	ldr	r3, [r7, #28]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	460b      	mov	r3, r1
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a37a:	4b70      	ldr	r3, [pc, #448]	@ (800a53c <SDMMC_GetCmdResp1+0x1d0>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a70      	ldr	r2, [pc, #448]	@ (800a540 <SDMMC_GetCmdResp1+0x1d4>)
 800a380:	fba2 2303 	umull	r2, r3, r2, r3
 800a384:	0a5a      	lsrs	r2, r3, #9
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	1e5a      	subs	r2, r3, #1
 800a392:	61fa      	str	r2, [r7, #28]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a398:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a39c:	e0c9      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4b67      	ldr	r3, [pc, #412]	@ (800a544 <SDMMC_GetCmdResp1+0x1d8>)
 800a3a8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0ef      	beq.n	800a38e <SDMMC_GetCmdResp1+0x22>
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1ea      	bne.n	800a38e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	e0b1      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d004      	beq.n	800a3e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0a6      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4a58      	ldr	r2, [pc, #352]	@ (800a548 <SDMMC_GetCmdResp1+0x1dc>)
 800a3e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff fe20 	bl	800a030 <SDMMC_GetCommandResponse>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d001      	beq.n	800a3fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e099      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3fe:	2100      	movs	r1, #0
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fe22 	bl	800a04a <SDMMC_GetResponse>
 800a406:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	4b50      	ldr	r3, [pc, #320]	@ (800a54c <SDMMC_GetCmdResp1+0x1e0>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a412:	2300      	movs	r3, #0
 800a414:	e08d      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da02      	bge.n	800a422 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a41c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a420:	e087      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a42c:	2340      	movs	r3, #64	@ 0x40
 800a42e:	e080      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a43a:	2380      	movs	r3, #128	@ 0x80
 800a43c:	e079      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a44c:	e071      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a45c:	e069      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a46c:	e061      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a478:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a47c:	e059      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a48c:	e051      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a49c:	e049      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a4ac:	e041      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4bc:	e039      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a4cc:	e031      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a4dc:	e029      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a4ec:	e021      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a4fc:	e019      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a508:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a50c:	e011      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a518:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a51c:	e009      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 0308 	and.w	r3, r3, #8
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a528:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a52c:	e001      	b.n	800a532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a52e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20000000 	.word	0x20000000
 800a540:	10624dd3 	.word	0x10624dd3
 800a544:	00200045 	.word	0x00200045
 800a548:	002000c5 	.word	0x002000c5
 800a54c:	fdffe008 	.word	0xfdffe008

0800a550 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a558:	4b1f      	ldr	r3, [pc, #124]	@ (800a5d8 <SDMMC_GetCmdResp2+0x88>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5dc <SDMMC_GetCmdResp2+0x8c>)
 800a55e:	fba2 2303 	umull	r2, r3, r2, r3
 800a562:	0a5b      	lsrs	r3, r3, #9
 800a564:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a568:	fb02 f303 	mul.w	r3, r2, r3
 800a56c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1e5a      	subs	r2, r3, #1
 800a572:	60fa      	str	r2, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d102      	bne.n	800a57e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a578:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a57c:	e026      	b.n	800a5cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a582:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0ef      	beq.n	800a56e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ea      	bne.n	800a56e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2204      	movs	r2, #4
 800a5a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	e00e      	b.n	800a5cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e003      	b.n	800a5cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a06      	ldr	r2, [pc, #24]	@ (800a5e0 <SDMMC_GetCmdResp2+0x90>)
 800a5c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	20000000 	.word	0x20000000
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	002000c5 	.word	0x002000c5

0800a5e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a658 <SDMMC_GetCmdResp3+0x74>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a65c <SDMMC_GetCmdResp3+0x78>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	0a5b      	lsrs	r3, r3, #9
 800a5f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5fc:	fb02 f303 	mul.w	r3, r2, r3
 800a600:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	60fa      	str	r2, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a60c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a610:	e01b      	b.n	800a64a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a616:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0ef      	beq.n	800a602 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ea      	bne.n	800a602 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2204      	movs	r2, #4
 800a63c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a63e:	2304      	movs	r3, #4
 800a640:	e003      	b.n	800a64a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a06      	ldr	r2, [pc, #24]	@ (800a660 <SDMMC_GetCmdResp3+0x7c>)
 800a646:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	20000000 	.word	0x20000000
 800a65c:	10624dd3 	.word	0x10624dd3
 800a660:	002000c5 	.word	0x002000c5

0800a664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a66c:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <SDMMC_GetCmdError+0x50>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a11      	ldr	r2, [pc, #68]	@ (800a6b8 <SDMMC_GetCmdError+0x54>)
 800a672:	fba2 2303 	umull	r2, r3, r2, r3
 800a676:	0a5b      	lsrs	r3, r3, #9
 800a678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a67c:	fb02 f303 	mul.w	r3, r2, r3
 800a680:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	60fa      	str	r2, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a68c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a690:	e009      	b.n	800a6a6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0f1      	beq.n	800a682 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a06      	ldr	r2, [pc, #24]	@ (800a6bc <SDMMC_GetCmdError+0x58>)
 800a6a2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20000000 	.word	0x20000000
 800a6b8:	10624dd3 	.word	0x10624dd3
 800a6bc:	002000c5 	.word	0x002000c5

0800a6c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	f107 001c 	add.w	r0, r7, #28
 800a6ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a6d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d105      	bne.n	800a6e6 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fad8 	bl	800bc9c <USB_CoreReset>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800a6f0:	7fbb      	ldrb	r3, [r7, #30]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d10b      	bne.n	800a70e <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f043 0208 	orr.w	r2, r3, #8
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f043 0220 	orr.w	r2, r3, #32
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a71a:	b004      	add	sp, #16
 800a71c:	4770      	bx	lr
	...

0800a720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d165      	bne.n	800a800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4a41      	ldr	r2, [pc, #260]	@ (800a83c <USB_SetTurnaroundTime+0x11c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d906      	bls.n	800a74a <USB_SetTurnaroundTime+0x2a>
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4a40      	ldr	r2, [pc, #256]	@ (800a840 <USB_SetTurnaroundTime+0x120>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d202      	bcs.n	800a74a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a744:	230f      	movs	r3, #15
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	e062      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4a3c      	ldr	r2, [pc, #240]	@ (800a840 <USB_SetTurnaroundTime+0x120>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d306      	bcc.n	800a760 <USB_SetTurnaroundTime+0x40>
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	4a3b      	ldr	r2, [pc, #236]	@ (800a844 <USB_SetTurnaroundTime+0x124>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d202      	bcs.n	800a760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a75a:	230e      	movs	r3, #14
 800a75c:	617b      	str	r3, [r7, #20]
 800a75e:	e057      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	4a38      	ldr	r2, [pc, #224]	@ (800a844 <USB_SetTurnaroundTime+0x124>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d306      	bcc.n	800a776 <USB_SetTurnaroundTime+0x56>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4a37      	ldr	r2, [pc, #220]	@ (800a848 <USB_SetTurnaroundTime+0x128>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d202      	bcs.n	800a776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a770:	230d      	movs	r3, #13
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e04c      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4a33      	ldr	r2, [pc, #204]	@ (800a848 <USB_SetTurnaroundTime+0x128>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d306      	bcc.n	800a78c <USB_SetTurnaroundTime+0x6c>
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4a32      	ldr	r2, [pc, #200]	@ (800a84c <USB_SetTurnaroundTime+0x12c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d802      	bhi.n	800a78c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a786:	230c      	movs	r3, #12
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	e041      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4a2f      	ldr	r2, [pc, #188]	@ (800a84c <USB_SetTurnaroundTime+0x12c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d906      	bls.n	800a7a2 <USB_SetTurnaroundTime+0x82>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4a2e      	ldr	r2, [pc, #184]	@ (800a850 <USB_SetTurnaroundTime+0x130>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d802      	bhi.n	800a7a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a79c:	230b      	movs	r3, #11
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	e036      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	4a2a      	ldr	r2, [pc, #168]	@ (800a850 <USB_SetTurnaroundTime+0x130>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d906      	bls.n	800a7b8 <USB_SetTurnaroundTime+0x98>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4a29      	ldr	r2, [pc, #164]	@ (800a854 <USB_SetTurnaroundTime+0x134>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d802      	bhi.n	800a7b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	e02b      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4a26      	ldr	r2, [pc, #152]	@ (800a854 <USB_SetTurnaroundTime+0x134>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d906      	bls.n	800a7ce <USB_SetTurnaroundTime+0xae>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4a25      	ldr	r2, [pc, #148]	@ (800a858 <USB_SetTurnaroundTime+0x138>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d202      	bcs.n	800a7ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a7c8:	2309      	movs	r3, #9
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	e020      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	4a21      	ldr	r2, [pc, #132]	@ (800a858 <USB_SetTurnaroundTime+0x138>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d306      	bcc.n	800a7e4 <USB_SetTurnaroundTime+0xc4>
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4a20      	ldr	r2, [pc, #128]	@ (800a85c <USB_SetTurnaroundTime+0x13c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d802      	bhi.n	800a7e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7de:	2308      	movs	r3, #8
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e015      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <USB_SetTurnaroundTime+0x13c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d906      	bls.n	800a7fa <USB_SetTurnaroundTime+0xda>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4a1c      	ldr	r2, [pc, #112]	@ (800a860 <USB_SetTurnaroundTime+0x140>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d202      	bcs.n	800a7fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e00a      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7fa:	2306      	movs	r3, #6
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	e007      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a806:	2309      	movs	r3, #9
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e001      	b.n	800a810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a80c:	2309      	movs	r3, #9
 800a80e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	029b      	lsls	r3, r3, #10
 800a824:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a828:	431a      	orrs	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	00d8acbf 	.word	0x00d8acbf
 800a840:	00e4e1c0 	.word	0x00e4e1c0
 800a844:	00f42400 	.word	0x00f42400
 800a848:	01067380 	.word	0x01067380
 800a84c:	011a499f 	.word	0x011a499f
 800a850:	01312cff 	.word	0x01312cff
 800a854:	014ca43f 	.word	0x014ca43f
 800a858:	016e3600 	.word	0x016e3600
 800a85c:	01a6ab1f 	.word	0x01a6ab1f
 800a860:	01e84800 	.word	0x01e84800

0800a864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f043 0201 	orr.w	r2, r3, #1
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f023 0201 	bic.w	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d115      	bne.n	800a8f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a8d6:	200a      	movs	r0, #10
 800a8d8:	f7f6 fe44 	bl	8001564 <HAL_Delay>
      ms += 10U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	330a      	adds	r3, #10
 800a8e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 f94b 	bl	800bb7e <USB_GetMode>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d01e      	beq.n	800a92c <USB_SetCurrentMode+0x84>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2bc7      	cmp	r3, #199	@ 0xc7
 800a8f2:	d9f0      	bls.n	800a8d6 <USB_SetCurrentMode+0x2e>
 800a8f4:	e01a      	b.n	800a92c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d115      	bne.n	800a928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a908:	200a      	movs	r0, #10
 800a90a:	f7f6 fe2b 	bl	8001564 <HAL_Delay>
      ms += 10U;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	330a      	adds	r3, #10
 800a912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 f932 	bl	800bb7e <USB_GetMode>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d005      	beq.n	800a92c <USB_SetCurrentMode+0x84>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2bc7      	cmp	r3, #199	@ 0xc7
 800a924:	d9f0      	bls.n	800a908 <USB_SetCurrentMode+0x60>
 800a926:	e001      	b.n	800a92c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e005      	b.n	800a938 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a930:	d101      	bne.n	800a936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a940:	b084      	sub	sp, #16
 800a942:	b580      	push	{r7, lr}
 800a944:	b086      	sub	sp, #24
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	613b      	str	r3, [r7, #16]
 800a95e:	e009      	b.n	800a974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	3340      	adds	r3, #64	@ 0x40
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3301      	adds	r3, #1
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b0e      	cmp	r3, #14
 800a978:	d9f2      	bls.n	800a960 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a986:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d11c      	bne.n	800a9c8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a99c:	f043 0302 	orr.w	r3, r3, #2
 800a9a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	639a      	str	r2, [r3, #56]	@ 0x38
 800a9c6:	e011      	b.n	800a9ec <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a9f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	d10d      	bne.n	800aa1c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa08:	2100      	movs	r1, #0
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f968 	bl	800ace0 <USB_SetDevSpeed>
 800aa10:	e008      	b.n	800aa24 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa12:	2101      	movs	r1, #1
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f963 	bl	800ace0 <USB_SetDevSpeed>
 800aa1a:	e003      	b.n	800aa24 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa1c:	2103      	movs	r1, #3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f95e 	bl	800ace0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa24:	2110      	movs	r1, #16
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f8fa 	bl	800ac20 <USB_FlushTxFifo>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f924 	bl	800ac84 <USB_FlushRxFifo>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa58:	461a      	mov	r2, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa64:	461a      	mov	r2, r3
 800aa66:	2300      	movs	r3, #0
 800aa68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	613b      	str	r3, [r7, #16]
 800aa6e:	e043      	b.n	800aaf8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa86:	d118      	bne.n	800aaba <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	e013      	b.n	800aacc <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	461a      	mov	r2, r3
 800aab2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	e008      	b.n	800aacc <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac6:	461a      	mov	r2, r3
 800aac8:	2300      	movs	r3, #0
 800aaca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad8:	461a      	mov	r2, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaea:	461a      	mov	r2, r3
 800aaec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aaf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aafc:	461a      	mov	r2, r3
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d3b5      	bcc.n	800aa70 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	e043      	b.n	800ab92 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab20:	d118      	bne.n	800ab54 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab34:	461a      	mov	r2, r3
 800ab36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	e013      	b.n	800ab66 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e008      	b.n	800ab66 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab72:	461a      	mov	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab84:	461a      	mov	r2, r3
 800ab86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ab8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab96:	461a      	mov	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d3b5      	bcc.n	800ab0a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800abbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f043 0210 	orr.w	r2, r3, #16
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	4b10      	ldr	r3, [pc, #64]	@ (800ac1c <USB_DevInit+0x2dc>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abe0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	f043 0208 	orr.w	r2, r3, #8
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abf4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d107      	bne.n	800ac0c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac04:	f043 0304 	orr.w	r3, r3, #4
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac18:	b004      	add	sp, #16
 800ac1a:	4770      	bx	lr
 800ac1c:	803c3800 	.word	0x803c3800

0800ac20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac3a:	d901      	bls.n	800ac40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e01b      	b.n	800ac78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	daf2      	bge.n	800ac2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	019b      	lsls	r3, r3, #6
 800ac50:	f043 0220 	orr.w	r2, r3, #32
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac64:	d901      	bls.n	800ac6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e006      	b.n	800ac78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d0f0      	beq.n	800ac58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac9c:	d901      	bls.n	800aca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e018      	b.n	800acd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	daf2      	bge.n	800ac90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2210      	movs	r2, #16
 800acb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acc0:	d901      	bls.n	800acc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e006      	b.n	800acd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0310 	and.w	r3, r3, #16
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d0f0      	beq.n	800acb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad00:	4313      	orrs	r3, r2
 800ad02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0306 	and.w	r3, r3, #6
 800ad2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75fb      	strb	r3, [r7, #23]
 800ad36:	e00a      	b.n	800ad4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d002      	beq.n	800ad44 <USB_GetDevSpeed+0x32>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b06      	cmp	r3, #6
 800ad42:	d102      	bne.n	800ad4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad44:	2302      	movs	r3, #2
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	e001      	b.n	800ad4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad4a:	230f      	movs	r3, #15
 800ad4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d13a      	bne.n	800adee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7e:	69da      	ldr	r2, [r3, #28]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	2101      	movs	r1, #1
 800ad8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad96:	4313      	orrs	r3, r2
 800ad98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d155      	bne.n	800ae5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800adcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	059b      	lsls	r3, r3, #22
 800add2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800add4:	4313      	orrs	r3, r2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ade2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ade6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	e036      	b.n	800ae5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf4:	69da      	ldr	r2, [r3, #28]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	2101      	movs	r1, #1
 800ae00:	fa01 f303 	lsl.w	r3, r1, r3
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d11a      	bne.n	800ae5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	791b      	ldrb	r3, [r3, #4]
 800ae40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae42:	430b      	orrs	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
	...

0800ae6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d161      	bne.n	800af4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae9e:	d11f      	bne.n	800aee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	2101      	movs	r1, #1
 800aef2:	fa01 f303 	lsl.w	r3, r1, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	43db      	mvns	r3, r3
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af00:	4013      	ands	r3, r2
 800af02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af0a:	69da      	ldr	r2, [r3, #28]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	2101      	movs	r1, #1
 800af16:	fa01 f303 	lsl.w	r3, r1, r3
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	43db      	mvns	r3, r3
 800af1e:	68f9      	ldr	r1, [r7, #12]
 800af20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af24:	4013      	ands	r3, r2
 800af26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	0159      	lsls	r1, r3, #5
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	440b      	add	r3, r1
 800af3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af42:	4619      	mov	r1, r3
 800af44:	4b35      	ldr	r3, [pc, #212]	@ (800b01c <USB_DeactivateEndpoint+0x1b0>)
 800af46:	4013      	ands	r3, r2
 800af48:	600b      	str	r3, [r1, #0]
 800af4a:	e060      	b.n	800b00e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af62:	d11f      	bne.n	800afa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	015a      	lsls	r2, r3, #5
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4413      	add	r3, r2
 800af6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	0151      	lsls	r1, r2, #5
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	440a      	add	r2, r1
 800af7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	2101      	movs	r1, #1
 800afb6:	fa01 f303 	lsl.w	r3, r1, r3
 800afba:	041b      	lsls	r3, r3, #16
 800afbc:	43db      	mvns	r3, r3
 800afbe:	68f9      	ldr	r1, [r7, #12]
 800afc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afc4:	4013      	ands	r3, r2
 800afc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	f003 030f 	and.w	r3, r3, #15
 800afd8:	2101      	movs	r1, #1
 800afda:	fa01 f303 	lsl.w	r3, r1, r3
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	43db      	mvns	r3, r3
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afe8:	4013      	ands	r3, r2
 800afea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	0159      	lsls	r1, r3, #5
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	440b      	add	r3, r1
 800b002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b006:	4619      	mov	r1, r3
 800b008:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <USB_DeactivateEndpoint+0x1b4>)
 800b00a:	4013      	ands	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	ec337800 	.word	0xec337800
 800b020:	eff37800 	.word	0xeff37800

0800b024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08a      	sub	sp, #40	@ 0x28
 800b028:	af02      	add	r7, sp, #8
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	785b      	ldrb	r3, [r3, #1]
 800b040:	2b01      	cmp	r3, #1
 800b042:	f040 817f 	bne.w	800b344 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d132      	bne.n	800b0b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	69ba      	ldr	r2, [r7, #24]
 800b05e:	0151      	lsls	r1, r2, #5
 800b060:	69fa      	ldr	r2, [r7, #28]
 800b062:	440a      	add	r2, r1
 800b064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b068:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b06c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	0151      	lsls	r1, r2, #5
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	440a      	add	r2, r1
 800b088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b08c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ac:	0cdb      	lsrs	r3, r3, #19
 800b0ae:	04db      	lsls	r3, r3, #19
 800b0b0:	6113      	str	r3, [r2, #16]
 800b0b2:	e097      	b.n	800b1e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ce:	0cdb      	lsrs	r3, r3, #19
 800b0d0:	04db      	lsls	r3, r3, #19
 800b0d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b0f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b0f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d11a      	bne.n	800b134 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	015a      	lsls	r2, r3, #5
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	4413      	add	r3, r2
 800b11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	69ba      	ldr	r2, [r7, #24]
 800b122:	0151      	lsls	r1, r2, #5
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	440a      	add	r2, r1
 800b128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b130:	6113      	str	r3, [r2, #16]
 800b132:	e044      	b.n	800b1be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	4413      	add	r3, r2
 800b13e:	1e5a      	subs	r2, r3, #1
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	8afb      	ldrh	r3, [r7, #22]
 800b15a:	04d9      	lsls	r1, r3, #19
 800b15c:	4ba4      	ldr	r3, [pc, #656]	@ (800b3f0 <USB_EPStartXfer+0x3cc>)
 800b15e:	400b      	ands	r3, r1
 800b160:	69b9      	ldr	r1, [r7, #24]
 800b162:	0148      	lsls	r0, r1, #5
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	4401      	add	r1, r0
 800b168:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b16c:	4313      	orrs	r3, r2
 800b16e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	791b      	ldrb	r3, [r3, #4]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d122      	bne.n	800b1be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	0151      	lsls	r1, r2, #5
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	440a      	add	r2, r1
 800b18e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b192:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b196:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a4:	691a      	ldr	r2, [r3, #16]
 800b1a6:	8afb      	ldrh	r3, [r7, #22]
 800b1a8:	075b      	lsls	r3, r3, #29
 800b1aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b1ae:	69b9      	ldr	r1, [r7, #24]
 800b1b0:	0148      	lsls	r0, r1, #5
 800b1b2:	69f9      	ldr	r1, [r7, #28]
 800b1b4:	4401      	add	r1, r0
 800b1b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1d4:	69b9      	ldr	r1, [r7, #24]
 800b1d6:	0148      	lsls	r0, r1, #5
 800b1d8:	69f9      	ldr	r1, [r7, #28]
 800b1da:	4401      	add	r1, r0
 800b1dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d14b      	bne.n	800b282 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d009      	beq.n	800b206 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	791b      	ldrb	r3, [r3, #4]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d128      	bne.n	800b260 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d110      	bne.n	800b240 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b238:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	e00f      	b.n	800b260 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	0151      	lsls	r1, r2, #5
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	440a      	add	r2, r1
 800b256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b25a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b25e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69ba      	ldr	r2, [r7, #24]
 800b270:	0151      	lsls	r1, r2, #5
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	440a      	add	r2, r1
 800b276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b27a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	e166      	b.n	800b550 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b2a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d015      	beq.n	800b2d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 814e 	beq.w	800b550 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	f003 030f 	and.w	r3, r3, #15
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ca:	69f9      	ldr	r1, [r7, #28]
 800b2cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	634b      	str	r3, [r1, #52]	@ 0x34
 800b2d4:	e13c      	b.n	800b550 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d110      	bne.n	800b308 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	69fa      	ldr	r2, [r7, #28]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	e00f      	b.n	800b328 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	0151      	lsls	r1, r2, #5
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	440a      	add	r2, r1
 800b31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b326:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	68d9      	ldr	r1, [r3, #12]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	b298      	uxth	r0, r3
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	4603      	mov	r3, r0
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f9b9 	bl	800b6b4 <USB_WritePacket>
 800b342:	e105      	b.n	800b550 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35e:	0cdb      	lsrs	r3, r3, #19
 800b360:	04db      	lsls	r3, r3, #19
 800b362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	0151      	lsls	r1, r2, #5
 800b376:	69fa      	ldr	r2, [r7, #28]
 800b378:	440a      	add	r2, r1
 800b37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b37e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b382:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b386:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d132      	bne.n	800b3f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	689a      	ldr	r2, [r3, #8]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3bc:	69b9      	ldr	r1, [r7, #24]
 800b3be:	0148      	lsls	r0, r1, #5
 800b3c0:	69f9      	ldr	r1, [r7, #28]
 800b3c2:	4401      	add	r1, r0
 800b3c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	0151      	lsls	r1, r2, #5
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	440a      	add	r2, r1
 800b3e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3ea:	6113      	str	r3, [r2, #16]
 800b3ec:	e062      	b.n	800b4b4 <USB_EPStartXfer+0x490>
 800b3ee:	bf00      	nop
 800b3f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d123      	bne.n	800b444 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b412:	69b9      	ldr	r1, [r7, #24]
 800b414:	0148      	lsls	r0, r1, #5
 800b416:	69f9      	ldr	r1, [r7, #28]
 800b418:	4401      	add	r1, r0
 800b41a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b41e:	4313      	orrs	r3, r2
 800b420:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	0151      	lsls	r1, r2, #5
 800b434:	69fa      	ldr	r2, [r7, #28]
 800b436:	440a      	add	r2, r1
 800b438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b43c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b440:	6113      	str	r3, [r2, #16]
 800b442:	e037      	b.n	800b4b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	4413      	add	r3, r2
 800b44e:	1e5a      	subs	r2, r3, #1
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	fbb2 f3f3 	udiv	r3, r2, r3
 800b458:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	8afa      	ldrh	r2, [r7, #22]
 800b460:	fb03 f202 	mul.w	r2, r3, r2
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	8afb      	ldrh	r3, [r7, #22]
 800b478:	04d9      	lsls	r1, r3, #19
 800b47a:	4b38      	ldr	r3, [pc, #224]	@ (800b55c <USB_EPStartXfer+0x538>)
 800b47c:	400b      	ands	r3, r1
 800b47e:	69b9      	ldr	r1, [r7, #24]
 800b480:	0148      	lsls	r0, r1, #5
 800b482:	69f9      	ldr	r1, [r7, #28]
 800b484:	4401      	add	r1, r0
 800b486:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b48a:	4313      	orrs	r3, r2
 800b48c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b49a:	691a      	ldr	r2, [r3, #16]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6a1b      	ldr	r3, [r3, #32]
 800b4a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4a4:	69b9      	ldr	r1, [r7, #24]
 800b4a6:	0148      	lsls	r0, r1, #5
 800b4a8:	69f9      	ldr	r1, [r7, #28]
 800b4aa:	4401      	add	r1, r0
 800b4ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b4b4:	79fb      	ldrb	r3, [r7, #7]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d10d      	bne.n	800b4d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	68d9      	ldr	r1, [r3, #12]
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d2:	460a      	mov	r2, r1
 800b4d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d128      	bne.n	800b530 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d110      	bne.n	800b510 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	e00f      	b.n	800b530 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b52e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b54a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b54e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	1ff80000 	.word	0x1ff80000

0800b560 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d14a      	bne.n	800b614 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b596:	f040 8086 	bne.w	800b6a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	0151      	lsls	r1, r2, #5
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	440a      	add	r2, r1
 800b5b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	7812      	ldrb	r2, [r2, #0]
 800b5d2:	0151      	lsls	r1, r2, #5
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	440a      	add	r2, r1
 800b5d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d902      	bls.n	800b5f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5f6:	e056      	b.n	800b6a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b60c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b610:	d0e7      	beq.n	800b5e2 <USB_EPStopXfer+0x82>
 800b612:	e048      	b.n	800b6a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b62c:	d13b      	bne.n	800b6a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	7812      	ldrb	r2, [r2, #0]
 800b642:	0151      	lsls	r1, r2, #5
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	440a      	add	r2, r1
 800b648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b650:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
 800b67a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b682:	4293      	cmp	r3, r2
 800b684:	d902      	bls.n	800b68c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
          break;
 800b68a:	e00c      	b.n	800b6a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6a4:	d0e7      	beq.n	800b676 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	371c      	adds	r7, #28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b089      	sub	sp, #36	@ 0x24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	71fb      	strb	r3, [r7, #7]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b6d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d123      	bne.n	800b722 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b6da:	88bb      	ldrh	r3, [r7, #4]
 800b6dc:	3303      	adds	r3, #3
 800b6de:	089b      	lsrs	r3, r3, #2
 800b6e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	e018      	b.n	800b71a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	031a      	lsls	r2, r3, #12
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	3301      	adds	r3, #1
 800b700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3301      	adds	r3, #1
 800b706:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	3301      	adds	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	3301      	adds	r3, #1
 800b712:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	3301      	adds	r3, #1
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d3e2      	bcc.n	800b6e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3724      	adds	r7, #36	@ 0x24
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b730:	b480      	push	{r7}
 800b732:	b08b      	sub	sp, #44	@ 0x2c
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	089b      	lsrs	r3, r3, #2
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b74e:	88fb      	ldrh	r3, [r7, #6]
 800b750:	f003 0303 	and.w	r3, r3, #3
 800b754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b756:	2300      	movs	r3, #0
 800b758:	623b      	str	r3, [r7, #32]
 800b75a:	e014      	b.n	800b786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	601a      	str	r2, [r3, #0]
    pDest++;
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	3301      	adds	r3, #1
 800b76c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	3301      	adds	r3, #1
 800b772:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	3301      	adds	r3, #1
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	3301      	adds	r3, #1
 800b77e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	3301      	adds	r3, #1
 800b784:	623b      	str	r3, [r7, #32]
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d3e6      	bcc.n	800b75c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b78e:	8bfb      	ldrh	r3, [r7, #30]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d01e      	beq.n	800b7d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f107 0310 	add.w	r3, r7, #16
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	701a      	strb	r2, [r3, #0]
      i++;
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	623b      	str	r3, [r7, #32]
      pDest++;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b7c6:	8bfb      	ldrh	r3, [r7, #30]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1ea      	bne.n	800b7a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	372c      	adds	r7, #44	@ 0x2c
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d12c      	bne.n	800b856 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db12      	blt.n	800b834 <USB_EPSetStall+0x54>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00f      	beq.n	800b834 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	0151      	lsls	r1, r2, #5
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	440a      	add	r2, r1
 800b82a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b82e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b832:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	0151      	lsls	r1, r2, #5
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	440a      	add	r2, r1
 800b84a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b84e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b852:	6013      	str	r3, [r2, #0]
 800b854:	e02b      	b.n	800b8ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	db12      	blt.n	800b88e <USB_EPSetStall+0xae>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4413      	add	r3, r2
 800b876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	0151      	lsls	r1, r2, #5
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	440a      	add	r2, r1
 800b884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b88c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	0151      	lsls	r1, r2, #5
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	440a      	add	r2, r1
 800b8a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d128      	bne.n	800b92a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	015a      	lsls	r2, r3, #5
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	0151      	lsls	r1, r2, #5
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	440a      	add	r2, r1
 800b8ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	791b      	ldrb	r3, [r3, #4]
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d003      	beq.n	800b908 <USB_EPClearStall+0x4c>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	791b      	ldrb	r3, [r3, #4]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d138      	bne.n	800b97a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e027      	b.n	800b97a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b944:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b948:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d003      	beq.n	800b95a <USB_EPClearStall+0x9e>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	791b      	ldrb	r3, [r3, #4]
 800b956:	2b02      	cmp	r3, #2
 800b958:	d10f      	bne.n	800b97a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	0151      	lsls	r1, r2, #5
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	440a      	add	r2, r1
 800b970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b978:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b9aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b9bc:	68f9      	ldr	r1, [r7, #12]
 800b9be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba02:	f023 0302 	bic.w	r3, r3, #2
 800ba06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba70:	68fb      	ldr	r3, [r7, #12]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	0c1b      	lsrs	r3, r3, #16
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	4013      	ands	r3, r2
 800bad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	b29b      	uxth	r3, r3
}
 800bada:	4618      	mov	r0, r3
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	4013      	ands	r3, r2
 800bb12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb14:	68bb      	ldr	r3, [r7, #8]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b087      	sub	sp, #28
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb52:	01db      	lsls	r3, r3, #7
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb70:	68bb      	ldr	r3, [r7, #8]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b083      	sub	sp, #12
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b085      	sub	sp, #20
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bbb8:	f023 0307 	bic.w	r3, r3, #7
 800bbbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	333c      	adds	r3, #60	@ 0x3c
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	4a26      	ldr	r2, [pc, #152]	@ (800bc98 <USB_EP0_OutStart+0xb8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d90a      	bls.n	800bc1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc14:	d101      	bne.n	800bc1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	e037      	b.n	800bc8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc20:	461a      	mov	r2, r3
 800bc22:	2300      	movs	r3, #0
 800bc24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc48:	f043 0318 	orr.w	r3, r3, #24
 800bc4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bc60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d10f      	bne.n	800bc88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bc86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	4f54300a 	.word	0x4f54300a

0800bc9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bcb4:	d901      	bls.n	800bcba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e01b      	b.n	800bcf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	daf2      	bge.n	800bca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	f043 0201 	orr.w	r2, r3, #1
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bcde:	d901      	bls.n	800bce4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e006      	b.n	800bcf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d0f0      	beq.n	800bcd2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
	...

0800bd00 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bd08:	4b1b      	ldr	r3, [pc, #108]	@ (800bd78 <_ux_device_stack_alternate_setting_get+0x78>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3324      	adds	r3, #36	@ 0x24
 800bd0e:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d129      	bne.n	800bd6c <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd1e:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800bd20:	e021      	b.n	800bd66 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	7b9b      	ldrb	r3, [r3, #14]
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d118      	bne.n	800bd60 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	3318      	adds	r3, #24
 800bd32:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	3320      	adds	r3, #32
 800bd38:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800bd3e:	69fa      	ldr	r2, [r7, #28]
 800bd40:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800bd42:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2201      	movs	r2, #1
 800bd48:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2203      	movs	r2, #3
 800bd4e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800bd50:	2201      	movs	r2, #1
 800bd52:	2101      	movs	r1, #1
 800bd54:	6938      	ldr	r0, [r7, #16]
 800bd56:	f001 faa6 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800bd5a:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	e006      	b.n	800bd6e <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1da      	bne.n	800bd22 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800bd6c:	23ff      	movs	r3, #255	@ 0xff
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	2000091c 	.word	0x2000091c

0800bd7c <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b0a4      	sub	sp, #144	@ 0x90
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bd86:	4bb5      	ldr	r3, [pc, #724]	@ (800c05c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3324      	adds	r3, #36	@ 0x24
 800bd8c:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800bd8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b03      	cmp	r3, #3
 800bd94:	d001      	beq.n	800bd9a <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800bd96:	2354      	movs	r3, #84	@ 0x54
 800bd98:	e1ed      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800bd9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bda0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800bda4:	e00b      	b.n	800bdbe <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800bda6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdaa:	7b9b      	ldrb	r3, [r3, #14]
 800bdac:	461a      	mov	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d009      	beq.n	800bdc8 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800bdb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 800bdbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1ef      	bne.n	800bda6 <_ux_device_stack_alternate_setting_set+0x2a>
 800bdc6:	e000      	b.n	800bdca <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 800bdc8:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800bdca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800bdd2:	2252      	movs	r2, #82	@ 0x52
 800bdd4:	2107      	movs	r1, #7
 800bdd6:	2002      	movs	r0, #2
 800bdd8:	f001 fb2e 	bl	800d438 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800bddc:	2352      	movs	r3, #82	@ 0x52
 800bdde:	e1ca      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800bde0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bde4:	7bdb      	ldrb	r3, [r3, #15]
 800bde6:	461a      	mov	r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d101      	bne.n	800bdf2 <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e1c1      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800bdf2:	4b9a      	ldr	r3, [pc, #616]	@ (800c05c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800bdf8:	4b98      	ldr	r3, [pc, #608]	@ (800c05c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800be00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800be04:	4b95      	ldr	r3, [pc, #596]	@ (800c05c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800be0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800be10:	e1ab      	b.n	800c16a <_ux_device_stack_alternate_setting_set+0x3ee>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800be12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800be1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800be24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be28:	2b02      	cmp	r3, #2
 800be2a:	f040 8192 	bne.w	800c152 <_ux_device_stack_alternate_setting_set+0x3d6>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800be2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800be32:	2208      	movs	r2, #8
 800be34:	498a      	ldr	r1, [pc, #552]	@ (800c060 <_ux_device_stack_alternate_setting_set+0x2e4>)
 800be36:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800be3a:	f001 fbcf 	bl	800d5dc <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800be3e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800be42:	461a      	mov	r2, r3
 800be44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be4a:	429a      	cmp	r2, r3
 800be4c:	f040 8181 	bne.w	800c152 <_ux_device_stack_alternate_setting_set+0x3d6>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800be50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800be58:	e175      	b.n	800c146 <_ux_device_stack_alternate_setting_set+0x3ca>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800be5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800be62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be66:	785b      	ldrb	r3, [r3, #1]
 800be68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800be6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be70:	2b04      	cmp	r3, #4
 800be72:	f040 815c 	bne.w	800c12e <_ux_device_stack_alternate_setting_set+0x3b2>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800be76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800be7a:	2209      	movs	r2, #9
 800be7c:	4979      	ldr	r1, [pc, #484]	@ (800c064 <_ux_device_stack_alternate_setting_set+0x2e8>)
 800be7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800be82:	f001 fbab 	bl	800d5dc <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800be86:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be8a:	461a      	mov	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4293      	cmp	r3, r2
 800be90:	f040 814d 	bne.w	800c12e <_ux_device_stack_alternate_setting_set+0x3b2>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800be94:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800be98:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	f040 8146 	bne.w	800c12e <_ux_device_stack_alternate_setting_set+0x3b2>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800bea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800beac:	e026      	b.n	800befc <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800beae:	2126      	movs	r1, #38	@ 0x26
 800beb0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800beb4:	f001 f9e6 	bl	800d284 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800beb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bec0:	210f      	movs	r1, #15
 800bec2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bec4:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800bec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800bece:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800bed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800beda:	2200      	movs	r2, #0
 800bedc:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800bede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bee2:	2200      	movs	r2, #0
 800bee4:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800bee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800beea:	2200      	movs	r2, #0
 800beec:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800beee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bef2:	2200      	movs	r2, #0
 800bef4:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800bef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800befc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1d4      	bne.n	800beae <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800bf04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf08:	2200      	movs	r2, #0
 800bf0a:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800bf0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 800bf1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800bf30:	e0c9      	b.n	800c0c6 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800bf32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800bf3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf3e:	785b      	ldrb	r3, [r3, #1]
 800bf40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800bf44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf48:	2b05      	cmp	r3, #5
 800bf4a:	d009      	beq.n	800bf60 <_ux_device_stack_alternate_setting_set+0x1e4>
 800bf4c:	2b05      	cmp	r3, #5
 800bf4e:	f300 80ad 	bgt.w	800c0ac <_ux_device_stack_alternate_setting_set+0x330>
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	f000 80a6 	beq.w	800c0a4 <_ux_device_stack_alternate_setting_set+0x328>
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	f000 80a3 	beq.w	800c0a4 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800bf5e:	e0a5      	b.n	800c0ac <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800bf60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800bf6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bf70:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800bf72:	e011      	b.n	800bf98 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800bf74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d104      	bne.n	800bf88 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800bf7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf82:	2201      	movs	r2, #1
 800bf84:	601a      	str	r2, [r3, #0]
                                            break;
 800bf86:	e00a      	b.n	800bf9e <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 800bf88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bf8c:	3368      	adds	r3, #104	@ 0x68
 800bf8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 800bf92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf94:	3b01      	subs	r3, #1
 800bf96:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800bf98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1ea      	bne.n	800bf74 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 800bf9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800bfa4:	2312      	movs	r3, #18
 800bfa6:	e0e6      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800bfa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfac:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800bfae:	2206      	movs	r2, #6
 800bfb0:	492d      	ldr	r1, [pc, #180]	@ (800c068 <_ux_device_stack_alternate_setting_set+0x2ec>)
 800bfb2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800bfb6:	f001 fb11 	bl	800d5dc <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800bfba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfbe:	3320      	adds	r3, #32
 800bfc0:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800bfc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfc6:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 800bfc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfcc:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800bfce:	4b23      	ldr	r3, [pc, #140]	@ (800c05c <_ux_device_stack_alternate_setting_set+0x2e0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d11a      	bne.n	800c010 <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800bfda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfde:	7bdb      	ldrb	r3, [r3, #15]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d013      	beq.n	800c010 <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800bfe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bfec:	8a1b      	ldrh	r3, [r3, #16]
 800bfee:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800bff2:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 800bff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800bffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bffc:	0adb      	lsrs	r3, r3, #11
 800bffe:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 800c000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c002:	3301      	adds	r3, #1
 800c004:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 800c006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c008:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c00a:	fb02 f303 	mul.w	r3, r2, r3
 800c00e:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800c010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c012:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c014:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800c016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c018:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c01c:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800c01e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	635a      	str	r2, [r3, #52]	@ 0x34
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800c026:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c02a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c02e:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800c030:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c034:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c036:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800c038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c040:	210e      	movs	r1, #14
 800c042:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c044:	4798      	blx	r3
 800c046:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 800c048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00e      	beq.n	800c06c <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800c04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
                                        return(status);
 800c056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c058:	e08d      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>
 800c05a:	bf00      	nop
 800c05c:	2000091c 	.word	0x2000091c
 800c060:	20000024 	.word	0x20000024
 800c064:	2000002c 	.word	0x2000002c
 800c068:	2000000c 	.word	0x2000000c
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800c06c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d105      	bne.n	800c082 <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800c076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c07e:	61da      	str	r2, [r3, #28]
                                    break;
 800c080:	e015      	b.n	800c0ae <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c08a:	e002      	b.n	800c092 <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800c08c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c092:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1f8      	bne.n	800c08c <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800c09a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c09c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0a0:	615a      	str	r2, [r3, #20]
                                    break;
 800c0a2:	e004      	b.n	800c0ae <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 800c0a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 800c0aa:	e000      	b.n	800c0ae <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 800c0ac:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800c0ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c0b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800c0ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c0be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 800c0c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f47f af31 	bne.w	800bf32 <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800c0d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0d4:	330c      	adds	r3, #12
 800c0d6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800c0da:	220c      	movs	r2, #12
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 fcc5 	bl	800da6c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800c0e2:	4b27      	ldr	r3, [pc, #156]	@ (800c180 <_ux_device_stack_alternate_setting_set+0x404>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c0ea:	7b92      	ldrb	r2, [r2, #14]
 800c0ec:	3240      	adds	r2, #64	@ 0x40
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800c0f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <_ux_device_stack_alternate_setting_set+0x386>
 800c0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <_ux_device_stack_alternate_setting_set+0x38a>
                            {

                                return (UX_NO_CLASS_MATCH);
 800c102:	2357      	movs	r3, #87	@ 0x57
 800c104:	e037      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800c106:	2306      	movs	r3, #6
 800c108:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800c10a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c10e:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800c110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c112:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800c114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c116:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c11a:	661a      	str	r2, [r3, #96]	@ 0x60
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800c11c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c11e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c120:	f107 020c 	add.w	r2, r7, #12
 800c124:	4610      	mov	r0, r2
 800c126:	4798      	blx	r3
 800c128:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800c12a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c12c:	e023      	b.n	800c176 <_ux_device_stack_alternate_setting_set+0x3fa>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800c12e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c132:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800c13a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c13e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c140:	4413      	add	r3, r2
 800c142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 800c146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f47f ae85 	bne.w	800be5a <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800c150:	e010      	b.n	800c174 <_ux_device_stack_alternate_setting_set+0x3f8>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800c152:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800c15e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c164:	4413      	add	r3, r2
 800c166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 800c16a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f47f ae4f 	bne.w	800be12 <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800c174:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 800c176:	4618      	mov	r0, r3
 800c178:	3790      	adds	r7, #144	@ 0x90
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	2000091c 	.word	0x2000091c

0800c184 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08a      	sub	sp, #40	@ 0x28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c190:	4b2b      	ldr	r3, [pc, #172]	@ (800c240 <_ux_device_stack_clear_feature+0xbc>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c196:	4b2a      	ldr	r3, [pc, #168]	@ (800c240 <_ux_device_stack_clear_feature+0xbc>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3324      	adds	r3, #36	@ 0x24
 800c19c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	3318      	adds	r3, #24
 800c1a2:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f003 0303 	and.w	r3, r3, #3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <_ux_device_stack_clear_feature+0x30>
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d011      	beq.n	800c1d6 <_ux_device_stack_clear_feature+0x52>
 800c1b2:	e036      	b.n	800c222 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d13b      	bne.n	800c232 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800c1ba:	4b21      	ldr	r3, [pc, #132]	@ (800c240 <_ux_device_stack_clear_feature+0xbc>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d005      	beq.n	800c1d2 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800c1c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c240 <_ux_device_stack_clear_feature+0xbc>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800c1d0:	e02f      	b.n	800c232 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800c1d2:	2354      	movs	r3, #84	@ 0x54
 800c1d4:	e02f      	b.n	800c236 <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1dc:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800c1de:	e01d      	b.n	800c21c <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800c1e6:	e013      	b.n	800c210 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	7b9b      	ldrb	r3, [r3, #14]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d10a      	bne.n	800c20a <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	6a3a      	ldr	r2, [r7, #32]
 800c1fa:	2110      	movs	r1, #16
 800c1fc:	69f8      	ldr	r0, [r7, #28]
 800c1fe:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	2200      	movs	r2, #0
 800c204:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800c206:	2300      	movs	r3, #0
 800c208:	e015      	b.n	800c236 <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800c210:	6a3b      	ldr	r3, [r7, #32]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e8      	bne.n	800c1e8 <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1de      	bne.n	800c1e0 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	2114      	movs	r1, #20
 800c22a:	69f8      	ldr	r0, [r7, #28]
 800c22c:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800c22e:	2300      	movs	r3, #0
 800c230:	e001      	b.n	800c236 <_ux_device_stack_clear_feature+0xb2>
        break;
 800c232:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3728      	adds	r7, #40	@ 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	2000091c 	.word	0x2000091c

0800c244 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c24a:	4b0f      	ldr	r3, [pc, #60]	@ (800c288 <_ux_device_stack_configuration_get+0x44>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3324      	adds	r3, #36	@ 0x24
 800c250:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3318      	adds	r3, #24
 800c256:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	3320      	adds	r3, #32
 800c25c:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800c268:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c26a:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2203      	movs	r2, #3
 800c270:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800c272:	2201      	movs	r2, #1
 800c274:	2101      	movs	r1, #1
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f001 f815 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800c27c:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800c27e:	683b      	ldr	r3, [r7, #0]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	2000091c 	.word	0x2000091c

0800c28c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b0a0      	sub	sp, #128	@ 0x80
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800c294:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	605a      	str	r2, [r3, #4]
 800c29e:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c2ac:	4b82      	ldr	r3, [pc, #520]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c2b2:	4b81      	ldr	r3, [pc, #516]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3324      	adds	r3, #36	@ 0x24
 800c2b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800c2be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d101      	bne.n	800c2ce <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e132      	b.n	800c534 <_ux_device_stack_configuration_set+0x2a8>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800c2ce:	4b7a      	ldr	r3, [pc, #488]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c2d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c2d8:	4b77      	ldr	r3, [pc, #476]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c2e0:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800c2e2:	e01f      	b.n	800c324 <_ux_device_stack_configuration_set+0x98>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800c2e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800c2ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c2ec:	785b      	ldrb	r3, [r3, #1]
 800c2ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800c2f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d10c      	bne.n	800c314 <_ux_device_stack_configuration_set+0x88>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800c2fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c2fe:	2208      	movs	r2, #8
 800c300:	496e      	ldr	r1, [pc, #440]	@ (800c4bc <_ux_device_stack_configuration_set+0x230>)
 800c302:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c304:	f001 f96a 	bl	800d5dc <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800c308:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800c30c:	461a      	mov	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4293      	cmp	r3, r2
 800c312:	d00b      	beq.n	800c32c <_ux_device_stack_configuration_set+0xa0>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800c314:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800c31c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c31e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c320:	4413      	add	r3, r2
 800c322:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800c324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1dc      	bne.n	800c2e4 <_ux_device_stack_configuration_set+0x58>
 800c32a:	e000      	b.n	800c32e <_ux_device_stack_configuration_set+0xa2>
                break;
 800c32c:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800c32e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <_ux_device_stack_configuration_set+0xb2>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <_ux_device_stack_configuration_set+0xb2>
        return(UX_ERROR);
 800c33a:	23ff      	movs	r3, #255	@ 0xff
 800c33c:	e0fa      	b.n	800c534 <_ux_device_stack_configuration_set+0x2a8>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800c33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c344:	2b00      	cmp	r3, #0
 800c346:	d021      	beq.n	800c38c <_ux_device_stack_configuration_set+0x100>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c34e:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800c350:	e019      	b.n	800c386 <_ux_device_stack_configuration_set+0xfa>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800c352:	2303      	movs	r3, #3
 800c354:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800c356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c358:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800c35a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800c360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c362:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800c364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <_ux_device_stack_configuration_set+0xea>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800c36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c36e:	f107 0208 	add.w	r2, r7, #8
 800c372:	4610      	mov	r0, r2
 800c374:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800c376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800c37c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800c37e:	f000 fd51 	bl	800ce24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800c382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c384:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 800c386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1e2      	bne.n	800c352 <_ux_device_stack_configuration_set+0xc6>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800c38c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800c394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c396:	2201      	movs	r2, #1
 800c398:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800c39a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	2113      	movs	r1, #19
 800c3a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800c3a4:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <_ux_device_stack_configuration_set+0x124>
        return(UX_SUCCESS);
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e0c1      	b.n	800c534 <_ux_device_stack_configuration_set+0x2a8>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800c3b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800c3b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3ba:	3384      	adds	r3, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 800c3bc:	2208      	movs	r2, #8
 800c3be:	493f      	ldr	r1, [pc, #252]	@ (800c4bc <_ux_device_stack_configuration_set+0x230>)
 800c3c0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c3c2:	f001 f90b 	bl	800d5dc <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800c3c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <_ux_device_stack_configuration_set+0x14a>
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	e000      	b.n	800c3d8 <_ux_device_stack_configuration_set+0x14c>
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4b37      	ldr	r3, [pc, #220]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800c3e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3e4:	115b      	asrs	r3, r3, #5
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	4b33      	ldr	r3, [pc, #204]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f002 0201 	and.w	r2, r2, #1
 800c3f0:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800c3f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3f8:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800c3fa:	e08d      	b.n	800c518 <_ux_device_stack_configuration_set+0x28c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800c3fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800c402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c404:	785b      	ldrb	r3, [r3, #1]
 800c406:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800c40a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c40e:	2b0b      	cmp	r3, #11
 800c410:	d109      	bne.n	800c426 <_ux_device_stack_configuration_set+0x19a>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800c412:	2301      	movs	r3, #1
 800c414:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800c416:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c418:	3302      	adds	r3, #2
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800c41e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c420:	3303      	adds	r3, #3
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800c426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c42a:	2b04      	cmp	r3, #4
 800c42c:	d16c      	bne.n	800c508 <_ux_device_stack_configuration_set+0x27c>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800c42e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c432:	2209      	movs	r2, #9
 800c434:	4922      	ldr	r1, [pc, #136]	@ (800c4c0 <_ux_device_stack_configuration_set+0x234>)
 800c436:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c438:	f001 f8d0 	bl	800d5dc <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800c43c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c440:	2b00      	cmp	r3, #0
 800c442:	d161      	bne.n	800c508 <_ux_device_stack_configuration_set+0x27c>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800c444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c446:	2b01      	cmp	r3, #1
 800c448:	d13c      	bne.n	800c4c4 <_ux_device_stack_configuration_set+0x238>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800c44a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c44e:	461a      	mov	r2, r3
 800c450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c452:	4293      	cmp	r3, r2
 800c454:	d11f      	bne.n	800c496 <_ux_device_stack_configuration_set+0x20a>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800c456:	4b18      	ldr	r3, [pc, #96]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c45e:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800c460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c464:	2b01      	cmp	r3, #1
 800c466:	d11e      	bne.n	800c4a6 <_ux_device_stack_configuration_set+0x21a>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800c468:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c46c:	461a      	mov	r2, r3
 800c46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c472:	429a      	cmp	r2, r3
 800c474:	d117      	bne.n	800c4a6 <_ux_device_stack_configuration_set+0x21a>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800c476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d112      	bne.n	800c4a6 <_ux_device_stack_configuration_set+0x21a>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800c480:	4b0d      	ldr	r3, [pc, #52]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c488:	3240      	adds	r2, #64	@ 0x40
 800c48a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c48c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800c490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c492:	673b      	str	r3, [r7, #112]	@ 0x70
 800c494:	e007      	b.n	800c4a6 <_ux_device_stack_configuration_set+0x21a>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800c496:	4b08      	ldr	r3, [pc, #32]	@ (800c4b8 <_ux_device_stack_configuration_set+0x22c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c49e:	3240      	adds	r2, #64	@ 0x40
 800c4a0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c4a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800c4a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800c4ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d125      	bne.n	800c4fe <_ux_device_stack_configuration_set+0x272>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c4b6:	e022      	b.n	800c4fe <_ux_device_stack_configuration_set+0x272>
 800c4b8:	2000091c 	.word	0x2000091c
 800c4bc:	20000024 	.word	0x20000024
 800c4c0:	2000002c 	.word	0x2000002c
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800c4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c53c <_ux_device_stack_configuration_set+0x2b0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c4cc:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800c4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d113      	bne.n	800c4fe <_ux_device_stack_configuration_set+0x272>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800c4d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c4da:	461a      	mov	r2, r3
 800c4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d10c      	bne.n	800c4fe <_ux_device_stack_configuration_set+0x272>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800c4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d107      	bne.n	800c4fe <_ux_device_stack_configuration_set+0x272>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800c4ee:	4b13      	ldr	r3, [pc, #76]	@ (800c53c <_ux_device_stack_configuration_set+0x2b0>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c4f6:	3240      	adds	r2, #64	@ 0x40
 800c4f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800c4fe:	2200      	movs	r2, #0
 800c500:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c502:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800c504:	f000 fcd6 	bl	800ceb4 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800c508:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800c510:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c514:	4413      	add	r3, r2
 800c516:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800c518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f47f af6e 	bne.w	800c3fc <_ux_device_stack_configuration_set+0x170>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800c520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c522:	2203      	movs	r2, #3
 800c524:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800c526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	2203      	movs	r2, #3
 800c52c:	2113      	movs	r1, #19
 800c52e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800c530:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3780      	adds	r7, #128	@ 0x80
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	2000091c 	.word	0x2000091c

0800c540 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800c540:	b590      	push	{r4, r7, lr}
 800c542:	b09d      	sub	sp, #116	@ 0x74
 800c544:	af02      	add	r7, sp, #8
 800c546:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800c548:	23ff      	movs	r3, #255	@ 0xff
 800c54a:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c54c:	4b9b      	ldr	r3, [pc, #620]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c552:	4b9a      	ldr	r3, [pc, #616]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3324      	adds	r3, #36	@ 0x24
 800c558:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 8139 	bne.w	800c7d6 <_ux_device_stack_control_request_process+0x296>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c56a:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c572:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	333c      	adds	r3, #60	@ 0x3c
 800c578:	3302      	adds	r3, #2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f001 faae 	bl	800dadc <_ux_utility_short_get>
 800c580:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	333c      	adds	r3, #60	@ 0x3c
 800c586:	3304      	adds	r3, #4
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 faa7 	bl	800dadc <_ux_utility_short_get>
 800c58e:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	333c      	adds	r3, #60	@ 0x3c
 800c594:	3306      	adds	r3, #6
 800c596:	4618      	mov	r0, r3
 800c598:	f001 faa0 	bl	800dadc <_ux_utility_short_get>
 800c59c:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800c59e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5a0:	2b06      	cmp	r3, #6
 800c5a2:	d002      	beq.n	800c5aa <_ux_device_stack_control_request_process+0x6a>
 800c5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5a6:	2b07      	cmp	r3, #7
 800c5a8:	d10d      	bne.n	800c5c6 <_ux_device_stack_control_request_process+0x86>
 800c5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ac:	0a1b      	lsrs	r3, r3, #8
 800c5ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d007      	beq.n	800c5c6 <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800c5b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5b8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800c5bc:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800c5be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5c0:	f043 0320 	orr.w	r3, r3, #32
 800c5c4:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800c5c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5cc:	2b40      	cmp	r3, #64	@ 0x40
 800c5ce:	d13a      	bne.n	800c646 <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800c5d0:	4b7a      	ldr	r3, [pc, #488]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d034      	beq.n	800c646 <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800c5dc:	4b77      	ldr	r3, [pc, #476]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800c5e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d12d      	bne.n	800c646 <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800c5ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5ee:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800c5f0:	4b72      	ldr	r3, [pc, #456]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f8d3 416c 	ldr.w	r4, [r3, #364]	@ 0x16c
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	f107 020c 	add.w	r2, r7, #12
 800c600:	9201      	str	r2, [sp, #4]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c608:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c60a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c60c:	47a0      	blx	r4
 800c60e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800c610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d110      	bne.n	800c638 <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c618:	3318      	adds	r3, #24
 800c61a:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c61c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61e:	3320      	adds	r3, #32
 800c620:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2203      	movs	r2, #3
 800c626:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fe39 	bl	800d2a6 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800c634:	2300      	movs	r3, #0
 800c636:	e0cf      	b.n	800c7d8 <_ux_device_stack_control_request_process+0x298>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800c638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c63a:	3318      	adds	r3, #24
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fb45 	bl	800cccc <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800c642:	2300      	movs	r3, #0
 800c644:	e0c8      	b.n	800c7d8 <_ux_device_stack_control_request_process+0x298>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800c646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c648:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d004      	beq.n	800c65a <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800c650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800c656:	2b40      	cmp	r3, #64	@ 0x40
 800c658:	d14d      	bne.n	800c6f6 <_ux_device_stack_control_request_process+0x1b6>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800c65a:	2304      	movs	r3, #4
 800c65c:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800c65e:	2300      	movs	r3, #0
 800c660:	663b      	str	r3, [r7, #96]	@ 0x60
 800c662:	e039      	b.n	800c6d8 <_ux_device_stack_control_request_process+0x198>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800c664:	4b55      	ldr	r3, [pc, #340]	@ (800c7bc <_ux_device_stack_control_request_process+0x27c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c66a:	3240      	adds	r2, #64	@ 0x40
 800c66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c670:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800c672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c674:	2b00      	cmp	r3, #0
 800c676:	d029      	beq.n	800c6cc <_ux_device_stack_control_request_process+0x18c>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800c678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c67a:	f003 0303 	and.w	r3, r3, #3
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d117      	bne.n	800c6b2 <_ux_device_stack_control_request_process+0x172>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800c682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c684:	2ba1      	cmp	r3, #161	@ 0xa1
 800c686:	d10f      	bne.n	800c6a8 <_ux_device_stack_control_request_process+0x168>
 800c688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10c      	bne.n	800c6a8 <_ux_device_stack_control_request_process+0x168>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800c68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c692:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800c694:	2b07      	cmp	r3, #7
 800c696:	d107      	bne.n	800c6a8 <_ux_device_stack_control_request_process+0x168>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c69e:	461a      	mov	r2, r3
 800c6a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d005      	beq.n	800c6b2 <_ux_device_stack_control_request_process+0x172>
                            continue;
 800c6a6:	e014      	b.n	800c6d2 <_ux_device_stack_control_request_process+0x192>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 800c6a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d10e      	bne.n	800c6d0 <_ux_device_stack_control_request_process+0x190>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800c6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b4:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800c6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ba:	f107 0210 	add.w	r2, r7, #16
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
 800c6c2:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800c6c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <_ux_device_stack_control_request_process+0x1a0>
 800c6ca:	e002      	b.n	800c6d2 <_ux_device_stack_control_request_process+0x192>
                    continue;
 800c6cc:	bf00      	nop
 800c6ce:	e000      	b.n	800c6d2 <_ux_device_stack_control_request_process+0x192>
                            continue;
 800c6d0:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800c6d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c6d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6da:	2b0f      	cmp	r3, #15
 800c6dc:	d9c2      	bls.n	800c664 <_ux_device_stack_control_request_process+0x124>
 800c6de:	e000      	b.n	800c6e2 <_ux_device_stack_control_request_process+0x1a2>

                    /* We are done, break the loop!  */
                    break;
 800c6e0:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800c6e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d004      	beq.n	800c6f2 <_ux_device_stack_control_request_process+0x1b2>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800c6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ea:	3318      	adds	r3, #24
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 faed 	bl	800cccc <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800c6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6f4:	e070      	b.n	800c7d8 <_ux_device_stack_control_request_process+0x298>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800c6f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6f8:	2b0c      	cmp	r3, #12
 800c6fa:	d861      	bhi.n	800c7c0 <_ux_device_stack_control_request_process+0x280>
 800c6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c704 <_ux_device_stack_control_request_process+0x1c4>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c739 	.word	0x0800c739
 800c708:	0800c747 	.word	0x0800c747
 800c70c:	0800c7c1 	.word	0x0800c7c1
 800c710:	0800c755 	.word	0x0800c755
 800c714:	0800c7c1 	.word	0x0800c7c1
 800c718:	0800c763 	.word	0x0800c763
 800c71c:	0800c779 	.word	0x0800c779
 800c720:	0800c787 	.word	0x0800c787
 800c724:	0800c78d 	.word	0x0800c78d
 800c728:	0800c795 	.word	0x0800c795
 800c72c:	0800c79f 	.word	0x0800c79f
 800c730:	0800c7a9 	.word	0x0800c7a9
 800c734:	0800c7b5 	.word	0x0800c7b5
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800c738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c73a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c73c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c73e:	f000 faf5 	bl	800cd2c <_ux_device_stack_get_status>
 800c742:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c744:	e03f      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800c746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c748:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c74a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c74c:	f7ff fd1a 	bl	800c184 <_ux_device_stack_clear_feature>
 800c750:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c752:	e038      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800c754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c756:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c758:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800c75a:	f000 fd0d 	bl	800d178 <_ux_device_stack_set_feature>
 800c75e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c760:	e031      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800c762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c766:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800c768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c76e:	2111      	movs	r1, #17
 800c770:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c772:	4798      	blx	r3
 800c774:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c776:	e026      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800c778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c77a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c77c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c77e:	f000 f82f 	bl	800c7e0 <_ux_device_stack_descriptor_send>
 800c782:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c784:	e01f      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800c786:	2354      	movs	r3, #84	@ 0x54
 800c788:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800c78a:	e01c      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800c78c:	f7ff fd5a 	bl	800c244 <_ux_device_stack_configuration_get>
 800c790:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c792:	e018      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800c794:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c796:	f7ff fd79 	bl	800c28c <_ux_device_stack_configuration_set>
 800c79a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c79c:	e013      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800c79e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c7a0:	f7ff faae 	bl	800bd00 <_ux_device_stack_alternate_setting_get>
 800c7a4:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c7a6:	e00e      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800c7a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c7aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c7ac:	f7ff fae6 	bl	800bd7c <_ux_device_stack_alternate_setting_set>
 800c7b0:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800c7b2:	e008      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800c7b8:	e005      	b.n	800c7c6 <_ux_device_stack_control_request_process+0x286>
 800c7ba:	bf00      	nop
 800c7bc:	2000091c 	.word	0x2000091c

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800c7c0:	2354      	movs	r3, #84	@ 0x54
 800c7c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800c7c4:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800c7c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <_ux_device_stack_control_request_process+0x296>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800c7cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ce:	3318      	adds	r3, #24
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 fa7b 	bl	800cccc <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800c7d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	376c      	adds	r7, #108	@ 0x6c
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd90      	pop	{r4, r7, pc}

0800c7e0 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b09a      	sub	sp, #104	@ 0x68
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800c7f0:	23ff      	movs	r3, #255	@ 0xff
 800c7f2:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c7f4:	4b98      	ldr	r3, [pc, #608]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c7fa:	4b97      	ldr	r3, [pc, #604]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3324      	adds	r3, #36	@ 0x24
 800c800:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	3318      	adds	r3, #24
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80a:	3320      	adds	r3, #32
 800c80c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	2203      	movs	r2, #3
 800c812:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	0a1b      	lsrs	r3, r3, #8
 800c822:	b2db      	uxtb	r3, r3
 800c824:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	2b0e      	cmp	r3, #14
 800c830:	f200 81e0 	bhi.w	800cbf4 <_ux_device_stack_descriptor_send+0x414>
 800c834:	a201      	add	r2, pc, #4	@ (adr r2, 800c83c <_ux_device_stack_descriptor_send+0x5c>)
 800c836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83a:	bf00      	nop
 800c83c:	0800c879 	.word	0x0800c879
 800c840:	0800c90d 	.word	0x0800c90d
 800c844:	0800ca29 	.word	0x0800ca29
 800c848:	0800cbf5 	.word	0x0800cbf5
 800c84c:	0800cbf5 	.word	0x0800cbf5
 800c850:	0800c883 	.word	0x0800c883
 800c854:	0800c90d 	.word	0x0800c90d
 800c858:	0800cbf5 	.word	0x0800cbf5
 800c85c:	0800c893 	.word	0x0800c893
 800c860:	0800cbf5 	.word	0x0800cbf5
 800c864:	0800cbf5 	.word	0x0800cbf5
 800c868:	0800cbf5 	.word	0x0800cbf5
 800c86c:	0800cbf5 	.word	0x0800cbf5
 800c870:	0800cbf5 	.word	0x0800cbf5
 800c874:	0800c90d 	.word	0x0800c90d
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b12      	cmp	r3, #18
 800c87c:	d901      	bls.n	800c882 <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800c87e:	2312      	movs	r3, #18
 800c880:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b06      	cmp	r3, #6
 800c886:	d104      	bne.n	800c892 <_ux_device_stack_descriptor_send+0xb2>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b0a      	cmp	r3, #10
 800c88c:	d901      	bls.n	800c892 <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800c88e:	230a      	movs	r3, #10
 800c890:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b09      	cmp	r3, #9
 800c896:	d104      	bne.n	800c8a2 <_ux_device_stack_descriptor_send+0xc2>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d901      	bls.n	800c8a2 <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800c89e:	2305      	movs	r3, #5
 800c8a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c8a2:	4b6d      	ldr	r3, [pc, #436]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c8aa:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c8ac:	4b6a      	ldr	r3, [pc, #424]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c8b4:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800c8b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8ba:	4413      	add	r3, r2
 800c8bc:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800c8be:	e020      	b.n	800c902 <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800c8c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800c8c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d10e      	bne.n	800c8f2 <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8da:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f001 f8c5 	bl	800da6c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c8e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8e8:	f000 fcdd 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800c8ec:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800c8ee:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800c8f0:	e18b      	b.n	800cc0a <_ux_device_stack_descriptor_send+0x42a>
            device_framework_length -=  descriptor_length;
 800c8f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800c8fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fe:	4413      	add	r3, r2
 800c900:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800c902:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c906:	429a      	cmp	r2, r3
 800c908:	d3da      	bcc.n	800c8c0 <_ux_device_stack_descriptor_send+0xe0>
        break;
 800c90a:	e17e      	b.n	800cc0a <_ux_device_stack_descriptor_send+0x42a>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b07      	cmp	r3, #7
 800c910:	d10e      	bne.n	800c930 <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800c912:	4b51      	ldr	r3, [pc, #324]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c91a:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800c91c:	4b4e      	ldr	r3, [pc, #312]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c924:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800c926:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c92a:	4413      	add	r3, r2
 800c92c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c92e:	e045      	b.n	800c9bc <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c930:	4b49      	ldr	r3, [pc, #292]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c938:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c93a:	4b47      	ldr	r3, [pc, #284]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c942:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800c944:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c948:	4413      	add	r3, r2
 800c94a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800c94c:	e036      	b.n	800c9bc <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800c94e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b0f      	cmp	r3, #15
 800c958:	d110      	bne.n	800c97c <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800c95a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c95c:	3301      	adds	r3, #1
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b0f      	cmp	r3, #15
 800c962:	d123      	bne.n	800c9ac <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800c964:	f107 0310 	add.w	r3, r7, #16
 800c968:	2204      	movs	r2, #4
 800c96a:	493c      	ldr	r1, [pc, #240]	@ (800ca5c <_ux_device_stack_descriptor_send+0x27c>)
 800c96c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800c96e:	f000 fe35 	bl	800d5dc <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800c972:	8a7b      	ldrh	r3, [r7, #18]
 800c974:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800c976:	2300      	movs	r3, #0
 800c978:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800c97a:	e023      	b.n	800c9c4 <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800c97c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c97e:	3301      	adds	r3, #1
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b02      	cmp	r3, #2
 800c984:	d112      	bne.n	800c9ac <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800c986:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d10b      	bne.n	800c9a6 <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800c98e:	f107 0318 	add.w	r3, r7, #24
 800c992:	2208      	movs	r2, #8
 800c994:	4932      	ldr	r1, [pc, #200]	@ (800ca60 <_ux_device_stack_descriptor_send+0x280>)
 800c996:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800c998:	f000 fe20 	bl	800d5dc <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800c99c:	8b7b      	ldrh	r3, [r7, #26]
 800c99e:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800c9a4:	e00e      	b.n	800c9c4 <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800c9a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800c9ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800c9b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	4413      	add	r3, r2
 800c9ba:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800c9bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c9be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d3c4      	bcc.n	800c94e <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800c9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f040 811c 	bne.w	800cc04 <_ux_device_stack_descriptor_send+0x424>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800c9cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d202      	bcs.n	800c9da <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 800c9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9d8:	e001      	b.n	800c9de <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800c9de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9e4:	d90c      	bls.n	800ca00 <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800c9e6:	2212      	movs	r2, #18
 800c9e8:	2109      	movs	r1, #9
 800c9ea:	2002      	movs	r0, #2
 800c9ec:	f000 fd24 	bl	800d438 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9f6:	2114      	movs	r1, #20
 800c9f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9fa:	4798      	blx	r3
 800c9fc:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800c9fe:	e104      	b.n	800cc0a <_ux_device_stack_descriptor_send+0x42a>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800ca00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f001 f82f 	bl	800da6c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	3301      	adds	r3, #1
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ca1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca20:	f000 fc41 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800ca24:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 800ca26:	e0ed      	b.n	800cc04 <_ux_device_stack_descriptor_send+0x424>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d14f      	bne.n	800cace <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800ca2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca58 <_ux_device_stack_descriptor_send+0x278>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca36:	3302      	adds	r3, #2
 800ca38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca3c:	d912      	bls.n	800ca64 <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800ca3e:	2212      	movs	r2, #18
 800ca40:	2109      	movs	r1, #9
 800ca42:	2002      	movs	r0, #2
 800ca44:	f000 fcf8 	bl	800d438 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ca48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca4e:	2114      	movs	r1, #20
 800ca50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ca52:	4798      	blx	r3
 800ca54:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800ca56:	e0d8      	b.n	800cc0a <_ux_device_stack_descriptor_send+0x42a>
 800ca58:	2000091c 	.word	0x2000091c
 800ca5c:	20000038 	.word	0x20000038
 800ca60:	20000024 	.word	0x20000024
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800ca64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800ca6a:	4b6a      	ldr	r3, [pc, #424]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	3302      	adds	r3, #2
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7a:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7e:	3301      	adds	r3, #1
 800ca80:	2203      	movs	r2, #3
 800ca82:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	1c98      	adds	r0, r3, #2
 800ca88:	4b62      	ldr	r3, [pc, #392]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f8d3 10ec 	ldr.w	r1, [r3, #236]	@ 0xec
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800ca90:	4b60      	ldr	r3, [pc, #384]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800ca92:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800ca94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca98:	461a      	mov	r2, r3
 800ca9a:	f000 ffe7 	bl	800da6c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800ca9e:	4b5d      	ldr	r3, [pc, #372]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800caa6:	3302      	adds	r3, #2
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d906      	bls.n	800cabc <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800caae:	4b59      	ldr	r3, [pc, #356]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cab6:	3302      	adds	r3, #2
 800cab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caba:	e001      	b.n	800cac0 <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cac6:	f000 fbee 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800caca:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800cacc:	e09c      	b.n	800cc08 <_ux_device_stack_descriptor_send+0x428>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800cace:	4b51      	ldr	r3, [pc, #324]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cad6:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800cad8:	4b4e      	ldr	r3, [pc, #312]	@ (800cc14 <_ux_device_stack_descriptor_send+0x434>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cae0:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800cae2:	e079      	b.n	800cbd8 <_ux_device_stack_descriptor_send+0x3f8>
                if (_ux_utility_short_get(string_framework) == request_index)
 800cae4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800cae6:	f000 fff9 	bl	800dadc <_ux_utility_short_get>
 800caea:	4602      	mov	r2, r0
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	4293      	cmp	r3, r2
 800caf0:	d163      	bne.n	800cbba <_ux_device_stack_descriptor_send+0x3da>
                    if (*(string_framework + 2) == descriptor_index)
 800caf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caf4:	3302      	adds	r3, #2
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	461a      	mov	r2, r3
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d15c      	bne.n	800cbba <_ux_device_stack_descriptor_send+0x3da>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800cb00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb02:	3303      	adds	r3, #3
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb0e:	dd0c      	ble.n	800cb2a <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800cb10:	2212      	movs	r2, #18
 800cb12:	2109      	movs	r1, #9
 800cb14:	2002      	movs	r0, #2
 800cb16:	f000 fc8f 	bl	800d438 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cb1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb20:	2114      	movs	r1, #20
 800cb22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb24:	4798      	blx	r3
 800cb26:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 800cb28:	e059      	b.n	800cbde <_ux_device_stack_descriptor_send+0x3fe>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800cb30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb32:	3303      	adds	r3, #3
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	3301      	adds	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb40:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800cb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb44:	3301      	adds	r3, #1
 800cb46:	2203      	movs	r2, #3
 800cb48:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb4e:	e014      	b.n	800cb7a <_ux_device_stack_descriptor_send+0x39a>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800cb50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb52:	3304      	adds	r3, #4
 800cb54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb56:	441a      	add	r2, r3
 800cb58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb60:	440b      	add	r3, r1
 800cb62:	7812      	ldrb	r2, [r2, #0]
 800cb64:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800cb66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	3303      	adds	r3, #3
 800cb6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb6e:	4413      	add	r3, r2
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800cb74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb76:	3301      	adds	r3, #1
 800cb78:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb7c:	3303      	adds	r3, #3
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d3e3      	bcc.n	800cb50 <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800cb88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb8a:	3303      	adds	r3, #3
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	461a      	mov	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d906      	bls.n	800cba8 <_ux_device_stack_descriptor_send+0x3c8>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800cb9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb9c:	3303      	adds	r3, #3
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	3301      	adds	r3, #1
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cba6:	e001      	b.n	800cbac <_ux_device_stack_descriptor_send+0x3cc>
                            length =  host_length;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cbb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbb2:	f000 fb78 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800cbb6:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 800cbb8:	e011      	b.n	800cbde <_ux_device_stack_descriptor_send+0x3fe>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800cbba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbbc:	3303      	adds	r3, #3
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc4:	1a9b      	subs	r3, r3, r2
 800cbc6:	3b04      	subs	r3, #4
 800cbc8:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800cbca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbcc:	3303      	adds	r3, #3
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbd4:	4413      	add	r3, r2
 800cbd6:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800cbd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d182      	bne.n	800cae4 <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 800cbde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d111      	bne.n	800cc08 <_ux_device_stack_descriptor_send+0x428>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbea:	2114      	movs	r1, #20
 800cbec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cbee:	4798      	blx	r3
                return(UX_ERROR);
 800cbf0:	23ff      	movs	r3, #255	@ 0xff
 800cbf2:	e00b      	b.n	800cc0c <_ux_device_stack_descriptor_send+0x42c>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbfa:	2114      	movs	r1, #20
 800cbfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cbfe:	4798      	blx	r3
        return(UX_ERROR);
 800cc00:	23ff      	movs	r3, #255	@ 0xff
 800cc02:	e003      	b.n	800cc0c <_ux_device_stack_descriptor_send+0x42c>
        break;
 800cc04:	bf00      	nop
 800cc06:	e000      	b.n	800cc0a <_ux_device_stack_descriptor_send+0x42a>
        break;
 800cc08:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800cc0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3768      	adds	r7, #104	@ 0x68
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	2000091c 	.word	0x2000091c

0800cc18 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b092      	sub	sp, #72	@ 0x48
 800cc1c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800cc1e:	23ff      	movs	r3, #255	@ 0xff
 800cc20:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cc22:	4b29      	ldr	r3, [pc, #164]	@ (800ccc8 <_ux_device_stack_disconnect+0xb0>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cc28:	4b27      	ldr	r3, [pc, #156]	@ (800ccc8 <_ux_device_stack_disconnect+0xb0>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3324      	adds	r3, #36	@ 0x24
 800cc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800cc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b03      	cmp	r3, #3
 800cc36:	d123      	bne.n	800cc80 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc3e:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800cc40:	e018      	b.n	800cc74 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800cc42:	2303      	movs	r3, #3
 800cc44:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800cc46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc48:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800cc4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800cc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc52:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800cc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d004      	beq.n	800cc64 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800cc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc5e:	1d3a      	adds	r2, r7, #4
 800cc60:	4610      	mov	r0, r2
 800cc62:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800cc64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800cc6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800cc6c:	f000 f8da 	bl	800ce24 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800cc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc72:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800cc74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e3      	bne.n	800cc42 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800cc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d107      	bne.n	800cc98 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800cc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc8a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800cc8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc8e:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800cc90:	210f      	movs	r1, #15
 800cc92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cc94:	4798      	blx	r3
 800cc96:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800cc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800cca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800cca6:	4b08      	ldr	r3, [pc, #32]	@ (800ccc8 <_ux_device_stack_disconnect+0xb0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d005      	beq.n	800ccbe <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800ccb2:	4b05      	ldr	r3, [pc, #20]	@ (800ccc8 <_ux_device_stack_disconnect+0xb0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800ccba:	200a      	movs	r0, #10
 800ccbc:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800ccbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3748      	adds	r7, #72	@ 0x48
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	2000091c 	.word	0x2000091c

0800cccc <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ccd4:	4b14      	ldr	r3, [pc, #80]	@ (800cd28 <_ux_device_stack_endpoint_stall+0x5c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	613b      	str	r3, [r7, #16]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800ccda:	23ff      	movs	r3, #255	@ 0xff
 800ccdc:	617b      	str	r3, [r7, #20]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800ccde:	f001 fdd5 	bl	800e88c <_ux_utility_interrupt_disable>
 800cce2:	60f8      	str	r0, [r7, #12]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800cce4:	4b10      	ldr	r3, [pc, #64]	@ (800cd28 <_ux_device_stack_endpoint_stall+0x5c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d013      	beq.n	800cd16 <_ux_device_stack_endpoint_stall+0x4a>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d00f      	beq.n	800cd16 <_ux_device_stack_endpoint_stall+0x4a>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	2114      	movs	r1, #20
 800ccfe:	6938      	ldr	r0, [r7, #16]
 800cd00:	4798      	blx	r3
 800cd02:	6178      	str	r0, [r7, #20]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7bdb      	ldrb	r3, [r3, #15]
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <_ux_device_stack_endpoint_stall+0x4a>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2202      	movs	r2, #2
 800cd14:	605a      	str	r2, [r3, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f001 fdc9 	bl	800e8ae <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
 800cd1c:	697b      	ldr	r3, [r7, #20]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	2000091c 	.word	0x2000091c

0800cd2c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08a      	sub	sp, #40	@ 0x28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cd38:	4b39      	ldr	r3, [pc, #228]	@ (800ce20 <_ux_device_stack_get_status+0xf4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cd3e:	4b38      	ldr	r3, [pc, #224]	@ (800ce20 <_ux_device_stack_get_status+0xf4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3324      	adds	r3, #36	@ 0x24
 800cd44:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	3318      	adds	r3, #24
 800cd4a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	3320      	adds	r3, #32
 800cd50:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	2200      	movs	r2, #0
 800cd62:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800cd64:	2302      	movs	r3, #2
 800cd66:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f003 0303 	and.w	r3, r3, #3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <_ux_device_stack_get_status+0x4c>
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d021      	beq.n	800cdba <_ux_device_stack_get_status+0x8e>
 800cd76:	e03a      	b.n	800cdee <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800cd7e:	d102      	bne.n	800cd86 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800cd80:	2301      	movs	r3, #1
 800cd82:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800cd84:	e03b      	b.n	800cdfe <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800cd86:	4b26      	ldr	r3, [pc, #152]	@ (800ce20 <_ux_device_stack_get_status+0xf4>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d103      	bne.n	800cd9a <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	2201      	movs	r2, #1
 800cd98:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800cd9a:	4b21      	ldr	r3, [pc, #132]	@ (800ce20 <_ux_device_stack_get_status+0xf4>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d02b      	beq.n	800cdfe <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f042 0202 	orr.w	r2, r2, #2
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
        break;
 800cdb8:	e021      	b.n	800cdfe <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	2115      	movs	r1, #21
 800cdc2:	6a38      	ldr	r0, [r7, #32]
 800cdc4:	4798      	blx	r3
 800cdc6:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	2bff      	cmp	r3, #255	@ 0xff
 800cdcc:	d007      	beq.n	800cdde <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d116      	bne.n	800ce02 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800cddc:	e011      	b.n	800ce02 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	69ba      	ldr	r2, [r7, #24]
 800cde4:	2114      	movs	r1, #20
 800cde6:	6a38      	ldr	r0, [r7, #32]
 800cde8:	4798      	blx	r3
            return(UX_SUCCESS);            
 800cdea:	2300      	movs	r3, #0
 800cdec:	e014      	b.n	800ce18 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	69ba      	ldr	r2, [r7, #24]
 800cdf4:	2114      	movs	r1, #20
 800cdf6:	6a38      	ldr	r0, [r7, #32]
 800cdf8:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e00c      	b.n	800ce18 <_ux_device_stack_get_status+0xec>
        break;
 800cdfe:	bf00      	nop
 800ce00:	e000      	b.n	800ce04 <_ux_device_stack_get_status+0xd8>
        break;
 800ce02:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2203      	movs	r2, #3
 800ce08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800ce0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce0e:	6978      	ldr	r0, [r7, #20]
 800ce10:	f000 fa49 	bl	800d2a6 <_ux_device_stack_transfer_request>
 800ce14:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800ce16:	693b      	ldr	r3, [r7, #16]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3728      	adds	r7, #40	@ 0x28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000091c 	.word	0x2000091c

0800ce24 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ce2c:	4b20      	ldr	r3, [pc, #128]	@ (800ceb0 <_ux_device_stack_interface_delete+0x8c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3324      	adds	r3, #36	@ 0x24
 800ce32:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800ce3a:	e01c      	b.n	800ce76 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800ce46:	4b1a      	ldr	r3, [pc, #104]	@ (800ceb0 <_ux_device_stack_interface_delete+0x8c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	210f      	movs	r1, #15
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1df      	bne.n	800ce3c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	699a      	ldr	r2, [r3, #24]
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	2000091c 	.word	0x2000091c

0800ceb4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b092      	sub	sp, #72	@ 0x48
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cec0:	4b82      	ldr	r3, [pc, #520]	@ (800d0cc <_ux_device_stack_interface_set+0x218>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cec6:	4b81      	ldr	r3, [pc, #516]	@ (800d0cc <_ux_device_stack_interface_set+0x218>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3324      	adds	r3, #36	@ 0x24
 800cecc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800cece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ced4:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800ced6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800cede:	e009      	b.n	800cef4 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800cee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d009      	beq.n	800cefc <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800cee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceea:	3320      	adds	r3, #32
 800ceec:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800ceee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef0:	3b01      	subs	r3, #1
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800cef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1f2      	bne.n	800cee0 <_ux_device_stack_interface_set+0x2c>
 800cefa:	e000      	b.n	800cefe <_ux_device_stack_interface_set+0x4a>
            break;
 800cefc:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800cefe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800cf04:	2312      	movs	r3, #18
 800cf06:	e0dd      	b.n	800d0c4 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800cf08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800cf0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf10:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800cf12:	2209      	movs	r2, #9
 800cf14:	496e      	ldr	r1, [pc, #440]	@ (800d0d0 <_ux_device_stack_interface_set+0x21c>)
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 fb60 	bl	800d5dc <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d104      	bne.n	800cf30 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800cf2e:	e00e      	b.n	800cf4e <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf36:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800cf38:	e002      	b.n	800cf40 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800cf3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800cf40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1f8      	bne.n	800cf3a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800cf48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf4c:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	461a      	mov	r2, r3
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4413      	add	r3, r2
 800cf64:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800cf66:	e0a4      	b.n	800d0b2 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800cf74:	7efb      	ldrb	r3, [r7, #27]
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	d009      	beq.n	800cf8e <_ux_device_stack_interface_set+0xda>
 800cf7a:	2b05      	cmp	r3, #5
 800cf7c:	f300 8090 	bgt.w	800d0a0 <_ux_device_stack_interface_set+0x1ec>
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	f000 8087 	beq.w	800d094 <_ux_device_stack_interface_set+0x1e0>
 800cf86:	2b04      	cmp	r3, #4
 800cf88:	f000 8084 	beq.w	800d094 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800cf8c:	e088      	b.n	800d0a0 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf94:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800cf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cf9c:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800cf9e:	e00d      	b.n	800cfbc <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d103      	bne.n	800cfb0 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfaa:	2201      	movs	r2, #1
 800cfac:	601a      	str	r2, [r3, #0]
                    break;
 800cfae:	e008      	b.n	800cfc2 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	3368      	adds	r3, #104	@ 0x68
 800cfb4:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1ee      	bne.n	800cfa0 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800cfc8:	2312      	movs	r3, #18
 800cfca:	e07b      	b.n	800d0c4 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfce:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800cfd0:	2206      	movs	r2, #6
 800cfd2:	4940      	ldr	r1, [pc, #256]	@ (800d0d4 <_ux_device_stack_interface_set+0x220>)
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 fb01 	bl	800d5dc <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	3320      	adds	r3, #32
 800cfde:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe2:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800cfe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800cfea:	4b38      	ldr	r3, [pc, #224]	@ (800d0cc <_ux_device_stack_interface_set+0x218>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d118      	bne.n	800d028 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800cff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff8:	7bdb      	ldrb	r3, [r3, #15]
 800cffa:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d012      	beq.n	800d028 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800d002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d004:	8a1b      	ldrh	r3, [r3, #16]
 800d006:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800d00a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00a      	beq.n	800d028 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	0adb      	lsrs	r3, r3, #11
 800d016:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	3301      	adds	r3, #1
 800d01c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800d01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	fb02 f303 	mul.w	r3, r2, r3
 800d026:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d02c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d032:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f04f 32ff 	mov.w	r2, #4294967295
 800d03a:	635a      	str	r2, [r3, #52]	@ 0x34
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800d03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d040:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d046:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800d048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d04e:	210e      	movs	r1, #14
 800d050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d052:	4798      	blx	r3
 800d054:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d004      	beq.n	800d066 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800d05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
                return(status);
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	e02e      	b.n	800d0c4 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800d066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d103      	bne.n	800d076 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800d06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d072:	61da      	str	r2, [r3, #28]
            break;
 800d074:	e015      	b.n	800d0a2 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d078:	69db      	ldr	r3, [r3, #28]
 800d07a:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800d07c:	e002      	b.n	800d084 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800d07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800d084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f8      	bne.n	800d07e <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800d08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d090:	615a      	str	r2, [r3, #20]
            break;
 800d092:	e006      	b.n	800d0a2 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800d094:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d096:	f000 f81f 	bl	800d0d8 <_ux_device_stack_interface_start>
 800d09a:	6238      	str	r0, [r7, #32]
            return(status);
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	e011      	b.n	800d0c4 <_ux_device_stack_interface_set+0x210>
            break;
 800d0a0:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	1ad3      	subs	r3, r2, r3
 800d0a8:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f47f af57 	bne.w	800cf68 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800d0ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d0bc:	f000 f80c 	bl	800d0d8 <_ux_device_stack_interface_start>
 800d0c0:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3748      	adds	r7, #72	@ 0x48
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	2000091c 	.word	0x2000091c
 800d0d0:	2000002c 	.word	0x2000002c
 800d0d4:	2000000c 	.word	0x2000000c

0800d0d8 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b090      	sub	sp, #64	@ 0x40
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800d0e0:	4b24      	ldr	r3, [pc, #144]	@ (800d174 <_ux_device_stack_interface_start+0x9c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	7b92      	ldrb	r2, [r2, #14]
 800d0e8:	3240      	adds	r2, #64	@ 0x40
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800d0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800d0f6:	2357      	movs	r3, #87	@ 0x57
 800d0f8:	e037      	b.n	800d16a <_ux_device_stack_interface_start+0x92>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d0fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d174 <_ux_device_stack_interface_start+0x9c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3324      	adds	r3, #36	@ 0x24
 800d100:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800d102:	2301      	movs	r3, #1
 800d104:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	7c5b      	ldrb	r3, [r3, #17]
 800d10e:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7c9b      	ldrb	r3, [r3, #18]
 800d114:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	7cdb      	ldrb	r3, [r3, #19]
 800d11a:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11e:	899b      	ldrh	r3, [r3, #12]
 800d120:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	89db      	ldrh	r3, [r3, #14]
 800d126:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800d128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	661a      	str	r2, [r3, #96]	@ 0x60
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800d12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d132:	f107 0208 	add.w	r2, r7, #8
 800d136:	4610      	mov	r0, r2
 800d138:	4798      	blx	r3
 800d13a:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d112      	bne.n	800d168 <_ux_device_stack_interface_start+0x90>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800d142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d144:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800d146:	2302      	movs	r3, #2
 800d148:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800d14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d14c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d14e:	f107 0208 	add.w	r2, r7, #8
 800d152:	4610      	mov	r0, r2
 800d154:	4798      	blx	r3
 800d156:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800d158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d102      	bne.n	800d164 <_ux_device_stack_interface_start+0x8c>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d162:	605a      	str	r2, [r3, #4]

        return(status); 
 800d164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d166:	e000      	b.n	800d16a <_ux_device_stack_interface_start+0x92>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800d168:	2357      	movs	r3, #87	@ 0x57
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3740      	adds	r7, #64	@ 0x40
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000091c 	.word	0x2000091c

0800d178 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08a      	sub	sp, #40	@ 0x28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d184:	4b29      	ldr	r3, [pc, #164]	@ (800d22c <_ux_device_stack_set_feature+0xb4>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d18a:	4b28      	ldr	r3, [pc, #160]	@ (800d22c <_ux_device_stack_set_feature+0xb4>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3324      	adds	r3, #36	@ 0x24
 800d190:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	3318      	adds	r3, #24
 800d196:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f003 0303 	and.w	r3, r3, #3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <_ux_device_stack_set_feature+0x30>
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d014      	beq.n	800d1d0 <_ux_device_stack_set_feature+0x58>
 800d1a6:	e036      	b.n	800d216 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d10e      	bne.n	800d1cc <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800d1ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d22c <_ux_device_stack_set_feature+0xb4>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d006      	beq.n	800d1c8 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800d1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800d22c <_ux_device_stack_set_feature+0xb4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

                /* OK. */
                return (UX_SUCCESS);
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e02d      	b.n	800d224 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800d1c8:	2354      	movs	r3, #84	@ 0x54
 800d1ca:	e02b      	b.n	800d224 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800d1cc:	2354      	movs	r3, #84	@ 0x54
 800d1ce:	e029      	b.n	800d224 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d6:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800d1d8:	e01a      	b.n	800d210 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800d1e0:	e010      	b.n	800d204 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	7b9b      	ldrb	r3, [r3, #14]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d107      	bne.n	800d1fe <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	6a3a      	ldr	r2, [r7, #32]
 800d1f4:	2114      	movs	r1, #20
 800d1f6:	69f8      	ldr	r0, [r7, #28]
 800d1f8:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e012      	b.n	800d224 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1eb      	bne.n	800d1e2 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800d210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1e1      	bne.n	800d1da <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	2114      	movs	r1, #20
 800d21e:	69f8      	ldr	r0, [r7, #28]
 800d220:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800d222:	2300      	movs	r3, #0
    }
}
 800d224:	4618      	mov	r0, r3
 800d226:	3728      	adds	r7, #40	@ 0x28
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	2000091c 	.word	0x2000091c

0800d230 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d23a:	4b11      	ldr	r3, [pc, #68]	@ (800d280 <_ux_device_stack_transfer_abort+0x50>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60fb      	str	r3, [r7, #12]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800d246:	f001 fb21 	bl	800e88c <_ux_utility_interrupt_disable>
 800d24a:	60b8      	str	r0, [r7, #8]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d10c      	bne.n	800d26e <_ux_device_stack_transfer_abort+0x3e>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	210d      	movs	r1, #13
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f001 fb24 	bl	800e8ae <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2204      	movs	r2, #4
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	e002      	b.n	800d274 <_ux_device_stack_transfer_abort+0x44>
    }
    else
    {

        /* Restore interrupts.  */
        UX_RESTORE
 800d26e:	68b8      	ldr	r0, [r7, #8]
 800d270:	f001 fb1d 	bl	800e8ae <_ux_utility_interrupt_restore>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	2000091c 	.word	0x2000091c

0800d284 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	3320      	adds	r3, #32
 800d292:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7ff ffca 	bl	800d230 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	631a      	str	r2, [r3, #48]	@ 0x30
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 f811 	bl	800d2e4 <_ux_device_stack_transfer_run>
 800d2c2:	6178      	str	r0, [r7, #20]
    if (status == UX_STATE_LOCK)
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b06      	cmp	r3, #6
 800d2c8:	d101      	bne.n	800d2ce <_ux_device_stack_transfer_request+0x28>
        return(UX_BUSY);
 800d2ca:	23fe      	movs	r3, #254	@ 0xfe
 800d2cc:	e006      	b.n	800d2dc <_ux_device_stack_transfer_request+0x36>
    if (status < UX_STATE_NEXT)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b03      	cmp	r3, #3
 800d2d2:	d802      	bhi.n	800d2da <_ux_device_stack_transfer_request+0x34>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d8:	e000      	b.n	800d2dc <_ux_device_stack_transfer_request+0x36>

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 800d2da:	2300      	movs	r3, #0

    /* And return the status.  */
    return(status);

#endif
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08a      	sub	sp, #40	@ 0x28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d107      	bne.n	800d308 <_ux_device_stack_transfer_run+0x24>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2204      	movs	r2, #4
 800d302:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_NEXT);
 800d304:	2304      	movs	r3, #4
 800d306:	e090      	b.n	800d42a <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800d308:	4b4a      	ldr	r3, [pc, #296]	@ (800d434 <_ux_device_stack_transfer_run+0x150>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d30e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	2b01      	cmp	r3, #1
 800d314:	d00d      	beq.n	800d332 <_ux_device_stack_transfer_run+0x4e>
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d00a      	beq.n	800d332 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_ADDRESSED) &&
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d007      	beq.n	800d332 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_CONFIGURED))
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2225      	movs	r2, #37	@ 0x25
 800d326:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800d32e:	2301      	movs	r3, #1
 800d330:	e07b      	b.n	800d42a <_ux_device_stack_transfer_run+0x146>
    }

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d332:	4b40      	ldr	r3, [pc, #256]	@ (800d434 <_ux_device_stack_transfer_run+0x150>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	623b      	str	r3, [r7, #32]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	61fb      	str	r3, [r7, #28]

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d342:	61bb      	str	r3, [r7, #24]
    switch(state)
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	2b21      	cmp	r3, #33	@ 0x21
 800d348:	d05a      	beq.n	800d400 <_ux_device_stack_transfer_run+0x11c>
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b21      	cmp	r3, #33	@ 0x21
 800d34e:	d865      	bhi.n	800d41c <_ux_device_stack_transfer_run+0x138>
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <_ux_device_stack_transfer_run+0x7a>
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b20      	cmp	r3, #32
 800d35a:	d042      	beq.n	800d3e2 <_ux_device_stack_transfer_run+0xfe>
 800d35c:	e05e      	b.n	800d41c <_ux_device_stack_transfer_run+0x138>
    case UX_STATE_RESET:

        /* Prepare transfer parameters.  */

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	7bdb      	ldrb	r3, [r3, #15]
 800d362:	f003 0303 	and.w	r3, r3, #3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00b      	beq.n	800d382 <_ux_device_stack_transfer_run+0x9e>
        {

            /* Isolate the direction from the endpoint address.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	7b9b      	ldrb	r3, [r3, #14]
 800d36e:	b25b      	sxtb	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	da03      	bge.n	800d37c <_ux_device_stack_transfer_run+0x98>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2203      	movs	r2, #3
 800d378:	629a      	str	r2, [r3, #40]	@ 0x28
 800d37a:	e002      	b.n	800d382 <_ux_device_stack_transfer_run+0x9e>
            else
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2202      	movs	r2, #2
 800d380:	629a      	str	r2, [r3, #40]	@ 0x28

        /* See if we need to force a zero length packet at the end of the transfer.
           This happens on a DATA IN and when the host requested length is not met
           and the last packet is on a boundary. If slave_length is zero, then it is
           a explicit ZLP request, no need to force ZLP.  */
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d386:	2b03      	cmp	r3, #3
 800d388:	d115      	bne.n	800d3b6 <_ux_device_stack_transfer_run+0xd2>
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d012      	beq.n	800d3b6 <_ux_device_stack_transfer_run+0xd2>
            (slave_length != 0) && (host_length != slave_length) &&
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	429a      	cmp	r2, r3
 800d396:	d00e      	beq.n	800d3b6 <_ux_device_stack_transfer_run+0xd2>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	8a1b      	ldrh	r3, [r3, #16]
 800d39c:	461a      	mov	r2, r3
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3a4:	fb01 f202 	mul.w	r2, r1, r2
 800d3a8:	1a9b      	subs	r3, r3, r2
            (slave_length != 0) && (host_length != slave_length) &&
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d103      	bne.n	800d3b6 <_ux_device_stack_transfer_run+0xd2>
        {

            /* If so force Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	639a      	str	r2, [r3, #56]	@ 0x38
 800d3b4:	e002      	b.n	800d3bc <_ux_device_stack_transfer_run+0xd8>
        }
        else
        {

            /* Condition is not met, do not force a Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        /* Reset the number of bytes sent/received.  */
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	619a      	str	r2, [r3, #24]

        /* Determine how many bytes to send in this transaction.  We keep track of the original
           length and have a working length.  */
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	61da      	str	r2, [r3, #28]

        /* Save the buffer pointer.  */
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
                                transfer_request -> ux_slave_transfer_request_data_pointer;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	68da      	ldr	r2, [r3, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	611a      	str	r2, [r3, #16]

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	601a      	str	r2, [r3, #0]

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2220      	movs	r2, #32
 800d3e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT:

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	7bdb      	ldrb	r3, [r3, #15]
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <_ux_device_stack_transfer_run+0x116>
        {

            /* Return WAIT until halt cleared.  */
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d101      	bne.n	800d3fa <_ux_device_stack_transfer_run+0x116>
                return(UX_STATE_WAIT);
 800d3f6:	2305      	movs	r3, #5
 800d3f8:	e017      	b.n	800d42a <_ux_device_stack_transfer_run+0x146>

        }

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2221      	movs	r2, #33	@ 0x21
 800d3fe:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT:

        /* Call the DCD driver transfer function.   */
        /* Transfer state is adjusted inside DCD driver.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	210c      	movs	r1, #12
 800d408:	6a38      	ldr	r0, [r7, #32]
 800d40a:	4798      	blx	r3
 800d40c:	6178      	str	r0, [r7, #20]

        /* Any error case or normal end: reset state for next transfer.  */
        if (status < UX_STATE_WAIT)
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b04      	cmp	r3, #4
 800d412:	d808      	bhi.n	800d426 <_ux_device_stack_transfer_run+0x142>
        {
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	631a      	str	r2, [r3, #48]	@ 0x30
        }
        break;
 800d41a:	e004      	b.n	800d426 <_ux_device_stack_transfer_run+0x142>

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800d422:	2301      	movs	r3, #1
 800d424:	e001      	b.n	800d42a <_ux_device_stack_transfer_run+0x146>
        break;
 800d426:	bf00      	nop
    }

    /* And return the status.  */
    return(status);
 800d428:	697b      	ldr	r3, [r7, #20]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3728      	adds	r7, #40	@ 0x28
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	2000091c 	.word	0x2000091c

0800d438 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800d444:	4b0c      	ldr	r3, [pc, #48]	@ (800d478 <_ux_system_error_handler+0x40>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	60da      	str	r2, [r3, #12]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800d44c:	4b0a      	ldr	r3, [pc, #40]	@ (800d478 <_ux_system_error_handler+0x40>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	3201      	adds	r2, #1
 800d454:	611a      	str	r2, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800d456:	4b08      	ldr	r3, [pc, #32]	@ (800d478 <_ux_system_error_handler+0x40>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d006      	beq.n	800d46e <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800d460:	4b05      	ldr	r3, [pc, #20]	@ (800d478 <_ux_system_error_handler+0x40>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	695b      	ldr	r3, [r3, #20]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	68b9      	ldr	r1, [r7, #8]
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	4798      	blx	r3
    }
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000920 	.word	0x20000920

0800d47c <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08a      	sub	sp, #40	@ 0x28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d002      	beq.n	800d496 <_ux_system_initialize+0x1a>
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800d496:	23fa      	movs	r3, #250	@ 0xfa
 800d498:	e07d      	b.n	800d596 <_ux_system_initialize+0x11a>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	2100      	movs	r1, #0
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f000 fb02 	bl	800daa8 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800d4a4:	4a3e      	ldr	r2, [pc, #248]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800d4aa:	2318      	movs	r3, #24
 800d4ac:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	4413      	add	r3, r2
 800d4b4:	4a3b      	ldr	r2, [pc, #236]	@ (800d5a4 <_ux_system_initialize+0x128>)
 800d4b6:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ba:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800d4c0:	4b37      	ldr	r3, [pc, #220]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68f9      	ldr	r1, [r7, #12]
 800d4c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4c8:	440a      	add	r2, r1
 800d4ca:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00c      	beq.n	800d4f2 <_ux_system_initialize+0x76>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d009      	beq.n	800d4f2 <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800d4de:	4b30      	ldr	r3, [pc, #192]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e6:	440a      	add	r2, r1
 800d4e8:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	3314      	adds	r3, #20
 800d4ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4f0:	e005      	b.n	800d4fe <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800d4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b2a      	ldr	r3, [pc, #168]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6812      	ldr	r2, [r2, #0]
 800d4fc:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	4413      	add	r3, r2
 800d504:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	3307      	adds	r3, #7
 800d50a:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	f023 0307 	bic.w	r3, r3, #7
 800d512:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	4413      	add	r3, r2
 800d51a:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	6a3a      	ldr	r2, [r7, #32]
 800d520:	429a      	cmp	r2, r3
 800d522:	d301      	bcc.n	800d528 <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800d524:	2312      	movs	r3, #18
 800d526:	e036      	b.n	800d596 <_ux_system_initialize+0x11a>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800d528:	69fa      	ldr	r2, [r7, #28]
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800d530:	4b1b      	ldr	r3, [pc, #108]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6a39      	ldr	r1, [r7, #32]
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 f9aa 	bl	800d894 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d026      	beq.n	800d594 <_ux_system_initialize+0x118>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d023      	beq.n	800d594 <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	2100      	movs	r1, #0
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 faa9 	bl	800daa8 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	3307      	adds	r3, #7
 800d55e:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	f023 0307 	bic.w	r3, r3, #7
 800d566:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	4413      	add	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	6a3a      	ldr	r2, [r7, #32]
 800d574:	429a      	cmp	r2, r3
 800d576:	d301      	bcc.n	800d57c <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800d578:	2312      	movs	r3, #18
 800d57a:	e00c      	b.n	800d596 <_ux_system_initialize+0x11a>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800d584:	4b06      	ldr	r3, [pc, #24]	@ (800d5a0 <_ux_system_initialize+0x124>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	6a39      	ldr	r1, [r7, #32]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 f980 	bl	800d894 <_ux_utility_memory_byte_pool_create>
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3728      	adds	r7, #40	@ 0x28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20000920 	.word	0x20000920
 800d5a4:	2000091c 	.word	0x2000091c

0800d5a8 <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <_uxe_system_initialize+0x1a>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800d5c2:	23fa      	movs	r3, #250	@ 0xfa
 800d5c4:	e006      	b.n	800d5d4 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f7ff ff55 	bl	800d47c <_ux_system_initialize>
 800d5d2:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800d5ea:	e041      	b.n	800d670 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	60ba      	str	r2, [r7, #8]
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d01e      	beq.n	800d636 <_ux_utility_descriptor_parse+0x5a>
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	d12f      	bne.n	800d65c <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800d5fc:	e004      	b.n	800d608 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	603a      	str	r2, [r7, #0]
 800d604:	2200      	movs	r2, #0
 800d606:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f003 0303 	and.w	r3, r3, #3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1f5      	bne.n	800d5fe <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f000 f835 	bl	800d682 <_ux_utility_long_get>
 800d618:	4602      	mov	r2, r0
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3304      	adds	r3, #4
 800d622:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	3304      	adds	r3, #4
 800d628:	603b      	str	r3, [r7, #0]
            break;
 800d62a:	e021      	b.n	800d670 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	603a      	str	r2, [r7, #0]
 800d632:	2200      	movs	r2, #0
 800d634:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1f5      	bne.n	800d62c <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 fa4b 	bl	800dadc <_ux_utility_short_get>
 800d646:	4603      	mov	r3, r0
 800d648:	b29a      	uxth	r2, r3
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3302      	adds	r3, #2
 800d652:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3302      	adds	r3, #2
 800d658:	603b      	str	r3, [r7, #0]
            break;
 800d65a:	e009      	b.n	800d670 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3301      	adds	r3, #1
 800d668:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	3301      	adds	r3, #1
 800d66e:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	1e5a      	subs	r2, r3, #1
 800d674:	607a      	str	r2, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1b8      	bne.n	800d5ec <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800d67a:	bf00      	nop
}
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800d682:	b480      	push	{r7}
 800d684:	b085      	sub	sp, #20
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	607a      	str	r2, [r7, #4]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	021b      	lsls	r3, r3, #8
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	607a      	str	r2, [r7, #4]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	041b      	lsls	r3, r3, #16
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	061b      	lsls	r3, r3, #24
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08e      	sub	sp, #56	@ 0x38
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d104      	bne.n	800d6ec <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800d6e2:	4b6a      	ldr	r3, [pc, #424]	@ (800d88c <_ux_utility_memory_allocate+0x1bc>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ea:	e009      	b.n	800d700 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d104      	bne.n	800d6fc <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800d6f2:	4b66      	ldr	r3, [pc, #408]	@ (800d88c <_ux_utility_memory_allocate+0x1bc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fa:	e001      	b.n	800d700 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	e0c0      	b.n	800d882 <_ux_utility_memory_allocate+0x1b2>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800d700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800d706:	2300      	movs	r3, #0
 800d708:	e0bb      	b.n	800d882 <_ux_utility_memory_allocate+0x1b2>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800d710:	2300      	movs	r3, #0
 800d712:	e0b6      	b.n	800d882 <_ux_utility_memory_allocate+0x1b2>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d101      	bne.n	800d720 <_ux_utility_memory_allocate+0x50>
        memory_alignment = UX_NO_ALIGN;
 800d71c:	2300      	movs	r3, #0
 800d71e:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b06      	cmp	r3, #6
 800d724:	d801      	bhi.n	800d72a <_ux_utility_memory_allocate+0x5a>
        memory_alignment =  UX_ALIGN_MIN;
 800d726:	2307      	movs	r3, #7
 800d728:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3307      	adds	r3, #7
 800d72e:	f023 0307 	bic.w	r3, r3, #7
 800d732:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b07      	cmp	r3, #7
 800d738:	d805      	bhi.n	800d746 <_ux_utility_memory_allocate+0x76>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d73e:	f000 f8f9 	bl	800d934 <_ux_utility_memory_byte_pool_search>
 800d742:	6338      	str	r0, [r7, #48]	@ 0x30
 800d744:	e007      	b.n	800d756 <_ux_utility_memory_allocate+0x86>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4413      	add	r3, r2
 800d74c:	4619      	mov	r1, r3
 800d74e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d750:	f000 f8f0 	bl	800d934 <_ux_utility_memory_byte_pool_search>
 800d754:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800d756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d106      	bne.n	800d76a <_ux_utility_memory_allocate+0x9a>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800d75c:	2212      	movs	r2, #18
 800d75e:	2108      	movs	r1, #8
 800d760:	2002      	movs	r0, #2
 800d762:	f7ff fe69 	bl	800d438 <_ux_system_error_handler>

        return(UX_NULL);
 800d766:	2300      	movs	r3, #0
 800d768:	e08b      	b.n	800d882 <_ux_utility_memory_allocate+0x1b2>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800d774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77e:	3b08      	subs	r3, #8
 800d780:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	3308      	adds	r3, #8
 800d786:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800d788:	6a3a      	ldr	r2, [r7, #32]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	4013      	ands	r3, r2
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d02f      	beq.n	800d7f2 <_ux_utility_memory_allocate+0x122>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	3308      	adds	r3, #8
 800d796:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800d798:	6a3a      	ldr	r2, [r7, #32]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	4413      	add	r3, r2
 800d79e:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	43db      	mvns	r3, r3
 800d7a4:	6a3a      	ldr	r2, [r7, #32]
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	3b08      	subs	r3, #8
 800d7ae:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b6:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800d7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	4a30      	ldr	r2, [pc, #192]	@ (800d890 <_ux_utility_memory_allocate+0x1c0>)
 800d7ce:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d8:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7de:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800d7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f0:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800d7f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	2b13      	cmp	r3, #19
 800d7fa:	d91e      	bls.n	800d83a <_ux_utility_memory_allocate+0x16a>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3308      	adds	r3, #8
 800d800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d802:	4413      	add	r3, r2
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80c:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800d80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	3304      	adds	r3, #4
 800d81a:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	4a1b      	ldr	r2, [pc, #108]	@ (800d890 <_ux_utility_memory_allocate+0x1c0>)
 800d824:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800d826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82e:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800d830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d834:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	3304      	adds	r3, #4
 800d83e:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800d844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d848:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800d84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	f1a3 0208 	sub.w	r2, r3, #8
 800d856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d858:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800d85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d860:	429a      	cmp	r2, r3
 800d862:	d105      	bne.n	800d870 <_ux_utility_memory_allocate+0x1a0>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800d868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	3308      	adds	r3, #8
 800d874:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800d876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d878:	2100      	movs	r1, #0
 800d87a:	69b8      	ldr	r0, [r7, #24]
 800d87c:	f000 f914 	bl	800daa8 <_ux_utility_memory_set>
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
 800d880:	69bb      	ldr	r3, [r7, #24]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3738      	adds	r7, #56	@ 0x38
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20000920 	.word	0x20000920
 800d890:	ffffeeee 	.word	0xffffeeee

0800d894 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800d8a0:	2214      	movs	r2, #20
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f000 f8ff 	bl	800daa8 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f1a3 0208 	sub.w	r2, r3, #8
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800d8d8:	69fa      	ldr	r2, [r7, #28]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	3b04      	subs	r3, #4
 800d8e4:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	69ba      	ldr	r2, [r7, #24]
 800d8f2:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	3b04      	subs	r3, #4
 800d8f8:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	3304      	adds	r3, #4
 800d91a:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	4a03      	ldr	r2, [pc, #12]	@ (800d930 <_ux_utility_memory_byte_pool_create+0x9c>)
 800d924:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3720      	adds	r7, #32
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	ffffeeee 	.word	0xffffeeee

0800d934 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800d934:	b480      	push	{r7}
 800d936:	b08d      	sub	sp, #52	@ 0x34
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800d93e:	2300      	movs	r3, #0
 800d940:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	3b02      	subs	r3, #2
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	4413      	add	r3, r2
 800d950:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	429a      	cmp	r2, r3
 800d958:	d301      	bcc.n	800d95e <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800d95a:	2300      	movs	r3, #0
 800d95c:	e07d      	b.n	800da5a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	429a      	cmp	r2, r3
 800d968:	d308      	bcc.n	800d97c <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689a      	ldr	r2, [r3, #8]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68d9      	ldr	r1, [r3, #12]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800d978:	429a      	cmp	r2, r3
 800d97a:	d901      	bls.n	800d980 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800d97c:	2300      	movs	r3, #0
 800d97e:	e06c      	b.n	800da5a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	3301      	adds	r3, #1
 800d98c:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800d98e:	2300      	movs	r3, #0
 800d990:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	3304      	adds	r3, #4
 800d996:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a31      	ldr	r2, [pc, #196]	@ (800da68 <_ux_utility_memory_byte_pool_search+0x134>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d143      	bne.n	800da2e <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d104      	bne.n	800d9b6 <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9b0:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b8:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800d9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ca:	3b08      	subs	r3, #8
 800d9cc:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800d9ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d23a      	bcs.n	800da4c <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a1f      	ldr	r2, [pc, #124]	@ (800da68 <_ux_utility_memory_byte_pool_search+0x134>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d113      	bne.n	800da16 <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	1e5a      	subs	r2, r3, #1
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d114      	bne.n	800da38 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da12:	609a      	str	r2, [r3, #8]
 800da14:	e010      	b.n	800da38 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da22:	2b00      	cmp	r3, #0
 800da24:	d008      	beq.n	800da38 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	3b01      	subs	r3, #1
 800da2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800da2c:	e004      	b.n	800da38 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800da2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da30:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800da38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800da3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da40:	3b01      	subs	r3, #1
 800da42:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800da44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1a3      	bne.n	800d992 <_ux_utility_memory_byte_pool_search+0x5e>
 800da4a:	e000      	b.n	800da4e <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800da4c:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800da4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800da54:	2300      	movs	r3, #0
 800da56:	e000      	b.n	800da5a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800da58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3734      	adds	r7, #52	@ 0x34
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	ffffeeee 	.word	0xffffeeee

0800da6c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800da80:	e007      	b.n	800da92 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	1c53      	adds	r3, r2, #1
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	1c59      	adds	r1, r3, #1
 800da8c:	6139      	str	r1, [r7, #16]
 800da8e:	7812      	ldrb	r2, [r2, #0]
 800da90:	701a      	strb	r2, [r3, #0]
    while(length--)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	1e5a      	subs	r2, r3, #1
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1f2      	bne.n	800da82 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800da9c:	bf00      	nop
}
 800da9e:	371c      	adds	r7, #28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	460b      	mov	r3, r1
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800daba:	e004      	b.n	800dac6 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	1c5a      	adds	r2, r3, #1
 800dac0:	617a      	str	r2, [r7, #20]
 800dac2:	7afa      	ldrb	r2, [r7, #11]
 800dac4:	701a      	strb	r2, [r3, #0]
    while(length--)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	1e5a      	subs	r2, r3, #1
 800daca:	607a      	str	r2, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1f5      	bne.n	800dabc <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800dad0:	bf00      	nop
}
 800dad2:	371c      	adds	r7, #28
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	021b      	lsls	r3, r3, #8
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	89fb      	ldrh	r3, [r7, #14]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800dafc:	89fb      	ldrh	r3, [r7, #14]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3714      	adds	r7, #20
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b082      	sub	sp, #8
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
 800db12:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2280      	movs	r2, #128	@ 0x80
 800db18:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800db20:	6838      	ldr	r0, [r7, #0]
 800db22:	f7fe fd0d 	bl	800c540 <_ux_device_stack_control_request_process>
}
 800db26:	bf00      	nop
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2200      	movs	r2, #0
 800db3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2280      	movs	r2, #128	@ 0x80
 800db44:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800db46:	68b8      	ldr	r0, [r7, #8]
 800db48:	f7fe fcfa 	bl	800c540 <_ux_device_stack_control_request_process>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d108      	bne.n	800db64 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2203      	movs	r2, #3
 800db56:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800db58:	2300      	movs	r3, #0
 800db5a:	2200      	movs	r2, #0
 800db5c:	2100      	movs	r1, #0
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7f7 f8e1 	bl	8004d26 <HAL_PCD_EP_Transmit>
    }
}
 800db64:	bf00      	nop
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2280      	movs	r2, #128	@ 0x80
 800db7c:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800db7e:	68b8      	ldr	r0, [r7, #8]
 800db80:	f7fe fcde 	bl	800c540 <_ux_device_stack_control_request_process>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d108      	bne.n	800db9c <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2204      	movs	r2, #4
 800db8e:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800db90:	2300      	movs	r3, #0
 800db92:	2200      	movs	r2, #0
 800db94:	2100      	movs	r1, #0
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7f7 f8c5 	bl	8004d26 <HAL_PCD_EP_Transmit>
    }
}
 800db9c:	bf00      	nop
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
UX_DCD_STM32_ED         *ed;
UX_SLAVE_TRANSFER       *transfer_request;
ULONG                   ed_status;

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3320      	adds	r3, #32
 800dbb8:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 800dbba:	f000 fe67 	bl	800e88c <_ux_utility_interrupt_disable>
 800dbbe:	60f8      	str	r0, [r7, #12]

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	60bb      	str	r3, [r7, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d003      	beq.n	800dbd8 <_ux_dcd_stm32_setup_isr_pending+0x34>
    {
        UX_RESTORE
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 fe6c 	bl	800e8ae <_ux_utility_interrupt_restore>
        return;
 800dbd6:	e03f      	b.n	800dc58 <_ux_dcd_stm32_setup_isr_pending+0xb4>
    }

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dbde:	60bb      	str	r3, [r7, #8]
    if (ed_status == 0)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d103      	bne.n	800dbee <_ux_dcd_stm32_setup_isr_pending+0x4a>
    {
        UX_RESTORE
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 fe61 	bl	800e8ae <_ux_utility_interrupt_restore>
        return;
 800dbec:	e034      	b.n	800dc58 <_ux_dcd_stm32_setup_isr_pending+0xb4>
    }
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	605a      	str	r2, [r3, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	605a      	str	r2, [r3, #4]
    UX_RESTORE
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fe51 	bl	800e8ae <_ux_utility_interrupt_restore>

    /* Handle different SETUP cases.  */
    switch(ed_status)
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc12:	d004      	beq.n	800dc1e <_ux_dcd_stm32_setup_isr_pending+0x7a>
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc1a:	d005      	beq.n	800dc28 <_ux_dcd_stm32_setup_isr_pending+0x84>
 800dc1c:	e00d      	b.n	800dc3a <_ux_dcd_stm32_setup_isr_pending+0x96>
    {
    case UX_DCD_STM32_ED_STATUS_SETUP_IN:
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800dc1e:	6939      	ldr	r1, [r7, #16]
 800dc20:	6978      	ldr	r0, [r7, #20]
 800dc22:	f7ff ff72 	bl	800db0a <_ux_dcd_stm32_setup_in>
        break;
 800dc26:	e011      	b.n	800dc4c <_ux_dcd_stm32_setup_isr_pending+0xa8>

    case UX_DCD_STM32_ED_STATUS_SETUP_OUT:
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dc2e:	461a      	mov	r2, r3
 800dc30:	6939      	ldr	r1, [r7, #16]
 800dc32:	6978      	ldr	r0, [r7, #20]
 800dc34:	f7ff ff7b 	bl	800db2e <_ux_dcd_stm32_setup_out>
        break;
 800dc38:	e008      	b.n	800dc4c <_ux_dcd_stm32_setup_isr_pending+0xa8>

    default: /* UX_DCD_STM32_ED_STATUS_SETUP_STATUS  */
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dc40:	461a      	mov	r2, r3
 800dc42:	6939      	ldr	r1, [r7, #16]
 800dc44:	6978      	ldr	r0, [r7, #20]
 800dc46:	f7ff ff91 	bl	800db6c <_ux_dcd_stm32_setup_status>
        break;
 800dc4a:	bf00      	nop
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	605a      	str	r2, [r3, #4]
}
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dc68:	4b3d      	ldr	r3, [pc, #244]	@ (800dd60 <HAL_PCD_SetupStageCallback+0x100>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	69db      	ldr	r3, [r3, #28]
 800dc72:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	3304      	adds	r3, #4
 800dc78:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3320      	adds	r3, #32
 800dc80:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dc8e:	2208      	movs	r2, #8
 800dc90:	4619      	mov	r1, r3
 800dc92:	f7ff feeb 	bl	800da6c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	2200      	movs	r2, #0
 800dca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	f023 020e 	bic.w	r2, r3, #14
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dcba:	b25b      	sxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da06      	bge.n	800dcce <HAL_PCD_SetupStageCallback+0x6e>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	605a      	str	r2, [r3, #4]
 800dccc:	e045      	b.n	800dd5a <HAL_PCD_SetupStageCallback+0xfa>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10b      	bne.n	800dcf6 <HAL_PCD_SetupStageCallback+0x96>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <HAL_PCD_SetupStageCallback+0x96>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	605a      	str	r2, [r3, #4]
 800dcf4:	e031      	b.n	800dd5a <HAL_PCD_SetupStageCallback+0xfa>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	333c      	adds	r3, #60	@ 0x3c
 800dd00:	3306      	adds	r3, #6
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff feea 	bl	800dadc <_ux_utility_short_get>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd16:	d90d      	bls.n	800dd34 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800dd18:	68f9      	ldr	r1, [r7, #12]
 800dd1a:	69b8      	ldr	r0, [r7, #24]
 800dd1c:	f000 fad4 	bl	800e2c8 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2200      	movs	r2, #0
 800dd24:	721a      	strb	r2, [r3, #8]

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	605a      	str	r2, [r3, #4]
#endif

                /* We are done.  */
                return;
 800dd32:	e012      	b.n	800dd5a <HAL_PCD_SetupStageCallback+0xfa>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2200      	movs	r2, #0
 800dd38:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	68da      	ldr	r2, [r3, #12]
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7f6 ff96 	bl	8004c80 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2202      	movs	r2, #2
 800dd58:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800dd5a:	3720      	adds	r7, #32
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	2000091c 	.word	0x2000091c

0800dd64 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dd70:	4b5a      	ldr	r3, [pc, #360]	@ (800dedc <HAL_PCD_DataInStageCallback+0x178>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800dd7c:	78fb      	ldrb	r3, [r7, #3]
 800dd7e:	f003 030f 	and.w	r3, r3, #15
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00b      	beq.n	800dd9e <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800dd86:	78fb      	ldrb	r3, [r7, #3]
 800dd88:	f003 020f 	and.w	r2, r3, #15
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	3370      	adds	r3, #112	@ 0x70
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	4413      	add	r3, r2
 800dd9a:	61fb      	str	r3, [r7, #28]
 800dd9c:	e00a      	b.n	800ddb4 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800dd9e:	78fb      	ldrb	r3, [r7, #3]
 800dda0:	f003 020f 	and.w	r2, r3, #15
 800dda4:	4613      	mov	r3, r2
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	4413      	add	r3, r2
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3320      	adds	r3, #32
 800ddba:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800ddbc:	78fb      	ldrb	r3, [r7, #3]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d163      	bne.n	800de8a <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	7a1b      	ldrb	r3, [r3, #8]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	f040 8081 	bne.w	800ded4 <HAL_PCD_DataInStageCallback+0x170>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7f6 ff51 	bl	8004c80 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d82a      	bhi.n	800de40 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d10a      	bne.n	800de08 <HAL_PCD_DataInStageCallback+0xa4>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	7b99      	ldrb	r1, [r3, #14]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7f6 ff93 	bl	8004d26 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800de06:	e065      	b.n	800ded4 <HAL_PCD_DataInStageCallback+0x170>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2202      	movs	r2, #2
 800de12:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	619a      	str	r2, [r3, #24]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	f043 0208 	orr.w	r2, r3, #8
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	605a      	str	r2, [r3, #4]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d003      	beq.n	800de38 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	2204      	movs	r2, #4
 800de3c:	721a      	strb	r2, [r3, #8]
}
 800de3e:	e049      	b.n	800ded4 <HAL_PCD_DataInStageCallback+0x170>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	69db      	ldr	r3, [r3, #28]
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	8a12      	ldrh	r2, [r2, #16]
 800de48:	1a9b      	subs	r3, r3, r2
 800de4a:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	8a1b      	ldrh	r3, [r3, #16]
 800de50:	461a      	mov	r2, r3
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	4293      	cmp	r3, r2
 800de56:	d902      	bls.n	800de5e <HAL_PCD_DataInStageCallback+0xfa>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	8a1b      	ldrh	r3, [r3, #16]
 800de5c:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	8a12      	ldrh	r2, [r2, #16]
 800de66:	441a      	add	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	69da      	ldr	r2, [r3, #28]
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	1ad2      	subs	r2, r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7f6 ff4f 	bl	8004d26 <HAL_PCD_EP_Transmit>
}
 800de88:	e024      	b.n	800ded4 <HAL_PCD_DataInStageCallback+0x170>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d010      	beq.n	800deb4 <HAL_PCD_DataInStageCallback+0x150>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00c      	beq.n	800deb4 <HAL_PCD_DataInStageCallback+0x150>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	639a      	str	r2, [r3, #56]	@ 0x38
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800dea6:	78f9      	ldrb	r1, [r7, #3]
 800dea8:	2300      	movs	r3, #0
 800deaa:	2200      	movs	r2, #0
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7f6 ff3a 	bl	8004d26 <HAL_PCD_EP_Transmit>
}
 800deb2:	e00f      	b.n	800ded4 <HAL_PCD_DataInStageCallback+0x170>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2200      	movs	r2, #0
 800deb8:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2202      	movs	r2, #2
 800debe:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	619a      	str	r2, [r3, #24]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	f043 0208 	orr.w	r2, r3, #8
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	605a      	str	r2, [r3, #4]
}
 800ded4:	bf00      	nop
 800ded6:	3720      	adds	r7, #32
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	2000091c 	.word	0x2000091c

0800dee0 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	460b      	mov	r3, r1
 800deea:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800deec:	4b3f      	ldr	r3, [pc, #252]	@ (800dfec <HAL_PCD_DataOutStageCallback+0x10c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	69db      	ldr	r3, [r3, #28]
 800def6:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800def8:	78fb      	ldrb	r3, [r7, #3]
 800defa:	f003 020f 	and.w	r2, r3, #15
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	69ba      	ldr	r2, [r7, #24]
 800df08:	4413      	add	r3, r2
 800df0a:	3304      	adds	r3, #4
 800df0c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3320      	adds	r3, #32
 800df14:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800df16:	78fb      	ldrb	r3, [r7, #3]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d14e      	bne.n	800dfba <HAL_PCD_DataOutStageCallback+0xda>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	7a1b      	ldrb	r3, [r3, #8]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d15e      	bne.n	800dfe2 <HAL_PCD_DataOutStageCallback+0x102>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800df2a:	78fb      	ldrb	r3, [r7, #3]
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7f6 fee1 	bl	8004cf6 <HAL_PCD_EP_GetRxCount>
 800df34:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	699a      	ldr	r2, [r3, #24]
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	441a      	add	r2, r3
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d823      	bhi.n	800df96 <HAL_PCD_DataOutStageCallback+0xb6>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800df56:	429a      	cmp	r2, r3
 800df58:	d005      	beq.n	800df66 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	8a1b      	ldrh	r3, [r3, #16]
 800df5e:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4293      	cmp	r3, r2
 800df64:	d006      	beq.n	800df74 <HAL_PCD_DataOutStageCallback+0x94>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800df72:	e036      	b.n	800dfe2 <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	8a12      	ldrh	r2, [r2, #16]
 800df7c:	441a      	add	r2, r3
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7f6 fe76 	bl	8004c80 <HAL_PCD_EP_Receive>
}
 800df94:	e025      	b.n	800dfe2 <HAL_PCD_DataOutStageCallback+0x102>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2227      	movs	r2, #39	@ 0x27
 800df9a:	625a      	str	r2, [r3, #36]	@ 0x24
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	f043 0208 	orr.w	r2, r3, #8
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	605a      	str	r2, [r3, #4]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d018      	beq.n	800dfe2 <HAL_PCD_DataOutStageCallback+0x102>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb4:	6938      	ldr	r0, [r7, #16]
 800dfb6:	4798      	blx	r3
}
 800dfb8:	e013      	b.n	800dfe2 <HAL_PCD_DataOutStageCallback+0x102>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800dfba:	78fb      	ldrb	r3, [r7, #3]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7f6 fe99 	bl	8004cf6 <HAL_PCD_EP_GetRxCount>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f043 0208 	orr.w	r2, r3, #8
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	605a      	str	r2, [r3, #4]
}
 800dfe2:	bf00      	nop
 800dfe4:	3720      	adds	r7, #32
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	2000091c 	.word	0x2000091c

0800dff0 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800dff8:	4b14      	ldr	r3, [pc, #80]	@ (800e04c <HAL_PCD_ResetCallback+0x5c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800e002:	f7fe fe09 	bl	800cc18 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	79db      	ldrb	r3, [r3, #7]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <HAL_PCD_ResetCallback+0x24>
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d006      	beq.n	800e020 <HAL_PCD_ResetCallback+0x30>
 800e012:	e00b      	b.n	800e02c <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800e014:	4b0d      	ldr	r3, [pc, #52]	@ (800e04c <HAL_PCD_ResetCallback+0x5c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2202      	movs	r2, #2
 800e01a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 800e01e:	e00b      	b.n	800e038 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800e020:	4b0a      	ldr	r3, [pc, #40]	@ (800e04c <HAL_PCD_ResetCallback+0x5c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2201      	movs	r2, #1
 800e026:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 800e02a:	e005      	b.n	800e038 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800e02c:	4b07      	ldr	r3, [pc, #28]	@ (800e04c <HAL_PCD_ResetCallback+0x5c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2201      	movs	r2, #1
 800e032:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        break;
 800e036:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800e038:	f000 fa88 	bl	800e54c <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800e03c:	4b03      	ldr	r3, [pc, #12]	@ (800e04c <HAL_PCD_ResetCallback+0x5c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2201      	movs	r2, #1
 800e042:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800e044:	bf00      	nop
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	2000091c 	.word	0x2000091c

0800e050 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e058:	4b07      	ldr	r3, [pc, #28]	@ (800e078 <HAL_PCD_ConnectCallback+0x28>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e060:	2b00      	cmp	r3, #0
 800e062:	d005      	beq.n	800e070 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800e064:	4b04      	ldr	r3, [pc, #16]	@ (800e078 <HAL_PCD_ConnectCallback+0x28>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e06c:	20f1      	movs	r0, #241	@ 0xf1
 800e06e:	4798      	blx	r3
    }
}
 800e070:	bf00      	nop
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	2000091c 	.word	0x2000091c

0800e07c <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e084:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <HAL_PCD_DisconnectCallback+0x38>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d005      	beq.n	800e09c <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800e090:	4b08      	ldr	r3, [pc, #32]	@ (800e0b4 <HAL_PCD_DisconnectCallback+0x38>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e098:	20f2      	movs	r0, #242	@ 0xf2
 800e09a:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800e09c:	4b05      	ldr	r3, [pc, #20]	@ (800e0b4 <HAL_PCD_DisconnectCallback+0x38>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800e0a6:	f7fe fdb7 	bl	800cc18 <_ux_device_stack_disconnect>
    }
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	2000091c 	.word	0x2000091c

0800e0b8 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e0c0:	4b07      	ldr	r3, [pc, #28]	@ (800e0e0 <HAL_PCD_SuspendCallback+0x28>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d005      	beq.n	800e0d8 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800e0cc:	4b04      	ldr	r3, [pc, #16]	@ (800e0e0 <HAL_PCD_SuspendCallback+0x28>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e0d4:	20f4      	movs	r0, #244	@ 0xf4
 800e0d6:	4798      	blx	r3
    }
}
 800e0d8:	bf00      	nop
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2000091c 	.word	0x2000091c

0800e0e4 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e0ec:	4b07      	ldr	r3, [pc, #28]	@ (800e10c <HAL_PCD_ResumeCallback+0x28>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d005      	beq.n	800e104 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800e0f8:	4b04      	ldr	r3, [pc, #16]	@ (800e10c <HAL_PCD_ResumeCallback+0x28>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e100:	20f3      	movs	r0, #243	@ 0xf3
 800e102:	4798      	blx	r3
    }
}
 800e104:	bf00      	nop
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	2000091c 	.word	0x2000091c

0800e110 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e118:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <HAL_PCD_SOFCallback+0x28>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e120:	2b00      	cmp	r3, #0
 800e122:	d005      	beq.n	800e130 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800e124:	4b04      	ldr	r3, [pc, #16]	@ (800e138 <HAL_PCD_SOFCallback+0x28>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e12c:	20f0      	movs	r0, #240	@ 0xf0
 800e12e:	4798      	blx	r3
    }
}
 800e130:	bf00      	nop
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	2000091c 	.word	0x2000091c

0800e13c <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e14c:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e154:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d807      	bhi.n	800e16c <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e162:	791b      	ldrb	r3, [r3, #4]
 800e164:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	4293      	cmp	r3, r2
 800e16a:	d301      	bcc.n	800e170 <_stm32_ed_get+0x34>
        return(UX_NULL);
 800e16c:	2300      	movs	r3, #0
 800e16e:	e013      	b.n	800e198 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d008      	beq.n	800e188 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	3370      	adds	r3, #112	@ 0x70
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	4413      	add	r3, r2
 800e186:	e007      	b.n	800e198 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	4613      	mov	r3, r2
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	4413      	add	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4413      	add	r3, r2
 800e196:	3304      	adds	r3, #4
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	7b9b      	ldrb	r3, [r3, #14]
 800e1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1b6:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	7b9b      	ldrb	r3, [r3, #14]
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ffbc 	bl	800e13c <_stm32_ed_get>
 800e1c4:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 800e1cc:	2314      	movs	r3, #20
 800e1ce:	e030      	b.n	800e232 <_ux_dcd_stm32_endpoint_create+0x8e>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d129      	bne.n	800e230 <_ux_dcd_stm32_endpoint_create+0x8c>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	f043 0201 	orr.w	r2, r3, #1
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	683a      	ldr	r2, [r7, #0]
 800e1f2:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	7b9b      	ldrb	r3, [r3, #14]
 800e200:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e204:	b2da      	uxtb	r2, r3
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00d      	beq.n	800e22c <_ux_dcd_stm32_endpoint_create+0x88>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	7b99      	ldrb	r1, [r3, #14]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	8a1a      	ldrh	r2, [r3, #16]
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	7bdb      	ldrb	r3, [r3, #15]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e222:	f003 0303 	and.w	r3, r3, #3
 800e226:	b2db      	uxtb	r3, r3
 800e228:	f7f6 fc76 	bl	8004b18 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800e22c:	2300      	movs	r3, #0
 800e22e:	e000      	b.n	800e232 <_ux_dcd_stm32_endpoint_create+0x8e>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 800e230:	2314      	movs	r3, #20
}
 800e232:	4618      	mov	r0, r3
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b084      	sub	sp, #16
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	7b9b      	ldrb	r3, [r3, #14]
 800e25a:	4619      	mov	r1, r3
 800e25c:	4610      	mov	r0, r2
 800e25e:	f7f6 fcc5 	bl	8004bec <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	60fb      	str	r3, [r7, #12]

    UX_DISABLE
 800e27c:	f000 fb06 	bl	800e88c <_ux_utility_interrupt_disable>
 800e280:	60b8      	str	r0, [r7, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	f423 7243 	bic.w	r2, r3, #780	@ 0x30c
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	7b9b      	ldrb	r3, [r3, #14]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f7f6 fddd 	bl	8004e60 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	7b9b      	ldrb	r3, [r3, #14]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f7f6 fe5b 	bl	8004f6e <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 800e2b8:	68b8      	ldr	r0, [r7, #8]
 800e2ba:	f000 faf8 	bl	800e8ae <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	f043 0204 	orr.w	r2, r3, #4
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	7b9a      	ldrb	r2, [r3, #14]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	7a9b      	ldrb	r3, [r3, #10]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f7f6 fd4f 	bl	8004d9a <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <_stm32_ed_get>:
{
 800e306:	b480      	push	{r7}
 800e308:	b085      	sub	sp, #20
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e316:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e31e:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2b08      	cmp	r3, #8
 800e324:	d807      	bhi.n	800e336 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e32c:	791b      	ldrb	r3, [r3, #4]
 800e32e:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	4293      	cmp	r3, r2
 800e334:	d301      	bcc.n	800e33a <_stm32_ed_get+0x34>
        return(UX_NULL);
 800e336:	2300      	movs	r3, #0
 800e338:	e013      	b.n	800e362 <_stm32_ed_get+0x5c>
    if (ep_dir)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d008      	beq.n	800e352 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	4613      	mov	r3, r2
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	4413      	add	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	3370      	adds	r3, #112	@ 0x70
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	4413      	add	r3, r2
 800e350:	e007      	b.n	800e362 <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	4613      	mov	r3, r2
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	4413      	add	r3, r2
 800e360:	3304      	adds	r3, #4
}
 800e362:	4618      	mov	r0, r3
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b084      	sub	sp, #16
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff ffc3 	bl	800e306 <_stm32_ed_get>
 800e380:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	f003 0301 	and.w	r3, r3, #1
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 800e38e:	23ff      	movs	r3, #255	@ 0xff
 800e390:	e008      	b.n	800e3a4 <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f003 0304 	and.w	r3, r3, #4
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e000      	b.n	800e3a4 <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 800e3a2:	2301      	movs	r3, #1
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d106      	bne.n	800e3e6 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800e3d8:	2255      	movs	r2, #85	@ 0x55
 800e3da:	2102      	movs	r1, #2
 800e3dc:	2002      	movs	r0, #2
 800e3de:	f7ff f82b 	bl	800d438 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 800e3e2:	2355      	movs	r3, #85	@ 0x55
 800e3e4:	e07d      	b.n	800e4e2 <_ux_dcd_stm32_function+0x11e>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	69db      	ldr	r3, [r3, #28]
 800e3ea:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	3b0a      	subs	r3, #10
 800e3f0:	2b0b      	cmp	r3, #11
 800e3f2:	d86d      	bhi.n	800e4d0 <_ux_dcd_stm32_function+0x10c>
 800e3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3fc <_ux_dcd_stm32_function+0x38>)
 800e3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fa:	bf00      	nop
 800e3fc:	0800e42d 	.word	0x0800e42d
 800e400:	0800e4d1 	.word	0x0800e4d1
 800e404:	0800e439 	.word	0x0800e439
 800e408:	0800e445 	.word	0x0800e445
 800e40c:	0800e451 	.word	0x0800e451
 800e410:	0800e45d 	.word	0x0800e45d
 800e414:	0800e469 	.word	0x0800e469
 800e418:	0800e481 	.word	0x0800e481
 800e41c:	0800e4c5 	.word	0x0800e4c5
 800e420:	0800e499 	.word	0x0800e499
 800e424:	0800e475 	.word	0x0800e475
 800e428:	0800e4b7 	.word	0x0800e4b7
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	6938      	ldr	r0, [r7, #16]
 800e430:	f7ff ffbc 	bl	800e3ac <_ux_dcd_stm32_frame_number_get>
 800e434:	6178      	str	r0, [r7, #20]
        break;
 800e436:	e053      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800e438:	6879      	ldr	r1, [r7, #4]
 800e43a:	6938      	ldr	r0, [r7, #16]
 800e43c:	f000 f972 	bl	800e724 <_ux_dcd_stm32_transfer_run>
 800e440:	6178      	str	r0, [r7, #20]
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 800e442:	e04d      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	6938      	ldr	r0, [r7, #16]
 800e448:	f000 f94c 	bl	800e6e4 <_ux_dcd_stm32_transfer_abort>
 800e44c:	6178      	str	r0, [r7, #20]
        break;
 800e44e:	e047      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800e450:	6879      	ldr	r1, [r7, #4]
 800e452:	6938      	ldr	r0, [r7, #16]
 800e454:	f7ff fea6 	bl	800e1a4 <_ux_dcd_stm32_endpoint_create>
 800e458:	6178      	str	r0, [r7, #20]
        break;
 800e45a:	e041      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	6938      	ldr	r0, [r7, #16]
 800e460:	f7ff feeb 	bl	800e23a <_ux_dcd_stm32_endpoint_destroy>
 800e464:	6178      	str	r0, [r7, #20]
        break;
 800e466:	e03b      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800e468:	6879      	ldr	r1, [r7, #4]
 800e46a:	6938      	ldr	r0, [r7, #16]
 800e46c:	f7ff fefe 	bl	800e26c <_ux_dcd_stm32_endpoint_reset>
 800e470:	6178      	str	r0, [r7, #20]
        break;
 800e472:	e035      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800e474:	6879      	ldr	r1, [r7, #4]
 800e476:	6938      	ldr	r0, [r7, #16]
 800e478:	f7ff ff26 	bl	800e2c8 <_ux_dcd_stm32_endpoint_stall>
 800e47c:	6178      	str	r0, [r7, #20]
        break;
 800e47e:	e02f      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	b2d2      	uxtb	r2, r2
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f6 fb1f 	bl	8004ad0 <HAL_PCD_SetAddress>
 800e492:	4603      	mov	r3, r0
 800e494:	617b      	str	r3, [r7, #20]
        break;
 800e496:	e023      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b0b      	cmp	r3, #11
 800e49c:	d108      	bne.n	800e4b0 <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7f5 fe05 	bl	80040b4 <HAL_PCD_Stop>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 800e4ae:	e017      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>
          status = UX_SUCCESS;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	617b      	str	r3, [r7, #20]
        break;
 800e4b4:	e014      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6938      	ldr	r0, [r7, #16]
 800e4bc:	f7ff ff57 	bl	800e36e <_ux_dcd_stm32_endpoint_status>
 800e4c0:	6178      	str	r0, [r7, #20]
        break;
 800e4c2:	e00d      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>

#if defined(UX_DEVICE_STANDALONE)
    case UX_DCD_ISR_PENDING:

        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 800e4c4:	6938      	ldr	r0, [r7, #16]
 800e4c6:	f7ff fb6d 	bl	800dba4 <_ux_dcd_stm32_setup_isr_pending>
        status = UX_SUCCESS;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	617b      	str	r3, [r7, #20]
        break;
 800e4ce:	e007      	b.n	800e4e0 <_ux_dcd_stm32_function+0x11c>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800e4d0:	2254      	movs	r2, #84	@ 0x54
 800e4d2:	2102      	movs	r1, #2
 800e4d4:	2002      	movs	r0, #2
 800e4d6:	f7fe ffaf 	bl	800d438 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 800e4da:	2354      	movs	r3, #84	@ 0x54
 800e4dc:	617b      	str	r3, [r7, #20]
        break;
 800e4de:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 800e4e0:	697b      	ldr	r3, [r7, #20]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3718      	adds	r7, #24
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop

0800e4ec <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e4f6:	4b13      	ldr	r3, [pc, #76]	@ (800e544 <_ux_dcd_stm32_initialize+0x58>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800e502:	22e0      	movs	r2, #224	@ 0xe0
 800e504:	2100      	movs	r1, #0
 800e506:	2000      	movs	r0, #0
 800e508:	f7ff f8e2 	bl	800d6d0 <_ux_utility_memory_allocate>
 800e50c:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 800e514:	2312      	movs	r3, #18
 800e516:	e010      	b.n	800e53a <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4a08      	ldr	r2, [pc, #32]	@ (800e548 <_ux_dcd_stm32_initialize+0x5c>)
 800e528:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2201      	movs	r2, #1
 800e536:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800e538:	2300      	movs	r3, #0
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	2000091c 	.word	0x2000091c
 800e548:	0800e3c5 	.word	0x0800e3c5

0800e54c <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e552:	4b62      	ldr	r3, [pc, #392]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e55e:	4b5f      	ldr	r3, [pc, #380]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3324      	adds	r3, #36	@ 0x24
 800e564:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800e566:	4b5d      	ldr	r3, [pc, #372]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d110      	bne.n	800e594 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800e572:	4b5a      	ldr	r3, [pc, #360]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b59      	ldr	r3, [pc, #356]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 800e57e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800e582:	4b56      	ldr	r3, [pc, #344]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	4b55      	ldr	r3, [pc, #340]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800e58e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800e592:	e02b      	b.n	800e5ec <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800e594:	4b51      	ldr	r3, [pc, #324]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2200      	movs	r2, #0
 800e59a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800e59e:	4b4f      	ldr	r3, [pc, #316]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d110      	bne.n	800e5cc <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800e5aa:	4b4c      	ldr	r3, [pc, #304]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	4b4b      	ldr	r3, [pc, #300]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 800e5b6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800e5ba:	4b48      	ldr	r3, [pc, #288]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	4b47      	ldr	r3, [pc, #284]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f8d2 20d8 	ldr.w	r2, [r2, #216]	@ 0xd8
 800e5c6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800e5ca:	e00f      	b.n	800e5ec <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800e5cc:	4b43      	ldr	r3, [pc, #268]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	4b42      	ldr	r3, [pc, #264]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f8d2 20dc 	ldr.w	r2, [r2, #220]	@ 0xdc
 800e5d8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800e5dc:	4b3f      	ldr	r3, [pc, #252]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	4b3e      	ldr	r3, [pc, #248]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 800e5e8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800e5ec:	4b3b      	ldr	r3, [pc, #236]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e5f4:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800e5fa:	220e      	movs	r2, #14
 800e5fc:	4938      	ldr	r1, [pc, #224]	@ (800e6e0 <_ux_dcd_stm32_initialize_complete+0x194>)
 800e5fe:	68b8      	ldr	r0, [r7, #8]
 800e600:	f7fe ffec 	bl	800d5dc <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3338      	adds	r3, #56	@ 0x38
 800e608:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e610:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f103 0218 	add.w	r2, r3, #24
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	689b      	ldr	r3, [r3, #8]
 800e62c:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	7adb      	ldrb	r3, [r3, #11]
 800e632:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f103 0218 	add.w	r2, r3, #24
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800e64a:	210e      	movs	r1, #14
 800e64c:	6978      	ldr	r0, [r7, #20]
 800e64e:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e656:	2100      	movs	r1, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f7f6 fc88 	bl	8004f6e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	7adb      	ldrb	r3, [r3, #11]
 800e668:	461a      	mov	r2, r3
 800e66a:	2300      	movs	r3, #0
 800e66c:	2100      	movs	r1, #0
 800e66e:	f7f6 fa53 	bl	8004b18 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e678:	2180      	movs	r1, #128	@ 0x80
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f6 fc77 	bl	8004f6e <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	7adb      	ldrb	r3, [r3, #11]
 800e68a:	461a      	mov	r2, r3
 800e68c:	2300      	movs	r3, #0
 800e68e:	2180      	movs	r1, #128	@ 0x80
 800e690:	f7f6 fa42 	bl	8004b18 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2201      	movs	r2, #1
 800e69e:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2208      	movs	r2, #8
 800e6aa:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e6b8:	4b08      	ldr	r3, [pc, #32]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d005      	beq.n	800e6d0 <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800e6c4:	4b05      	ldr	r3, [pc, #20]	@ (800e6dc <_ux_dcd_stm32_initialize_complete+0x190>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800e6cc:	2001      	movs	r0, #1
 800e6ce:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2000091c 	.word	0x2000091c
 800e6e0:	20000014 	.word	0x20000014

0800e6e4 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	7b9b      	ldrb	r3, [r3, #14]
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7f6 fc03 	bl	8004f0c <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	7b9b      	ldrb	r3, [r3, #14]
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7f6 fc2b 	bl	8004f6e <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	617b      	str	r3, [r7, #20]

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 800e73a:	f000 f8a7 	bl	800e88c <_ux_utility_interrupt_disable>
 800e73e:	60f8      	str	r0, [r7, #12]

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	60bb      	str	r3, [r7, #8]

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 800e746:	4b2f      	ldr	r3, [pc, #188]	@ (800e804 <_ux_dcd_stm32_transfer_run+0xe0>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d107      	bne.n	800e760 <_ux_dcd_stm32_transfer_run+0x3c>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2226      	movs	r2, #38	@ 0x26
 800e754:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 f8a9 	bl	800e8ae <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 800e75c:	2301      	movs	r3, #1
 800e75e:	e04c      	b.n	800e7fa <_ux_dcd_stm32_transfer_run+0xd6>
    }

    /* ED stalled.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	f003 0304 	and.w	r3, r3, #4
 800e766:	2b00      	cmp	r3, #0
 800e768:	d007      	beq.n	800e77a <_ux_dcd_stm32_transfer_run+0x56>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	2221      	movs	r2, #33	@ 0x21
 800e76e:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f000 f89c 	bl	800e8ae <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 800e776:	2304      	movs	r3, #4
 800e778:	e03f      	b.n	800e7fa <_ux_dcd_stm32_transfer_run+0xd6>
    }

    /* ED transfer in progress.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	f003 0302 	and.w	r3, r3, #2
 800e780:	2b00      	cmp	r3, #0
 800e782:	d015      	beq.n	800e7b0 <_ux_dcd_stm32_transfer_run+0x8c>
    {
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f003 0308 	and.w	r3, r3, #8
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <_ux_dcd_stm32_transfer_run+0x82>
        {

            /* Keep used, stall and task pending bits.  */
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	f240 4305 	movw	r3, #1029	@ 0x405
 800e796:	4013      	ands	r3, r2
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	6053      	str	r3, [r2, #4]
                                        UX_DCD_STM32_ED_STATUS_STALLED |
                                        UX_DCD_STM32_ED_STATUS_TASK_PENDING);
            UX_RESTORE
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f000 f886 	bl	800e8ae <_ux_utility_interrupt_restore>
            return(UX_STATE_NEXT);
 800e7a2:	2304      	movs	r3, #4
 800e7a4:	e029      	b.n	800e7fa <_ux_dcd_stm32_transfer_run+0xd6>
        }
        UX_RESTORE
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f000 f881 	bl	800e8ae <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 800e7ac:	2305      	movs	r3, #5
 800e7ae:	e024      	b.n	800e7fa <_ux_dcd_stm32_transfer_run+0xd6>
    }


    /* Start transfer.  */
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	f043 0202 	orr.w	r2, r3, #2
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	605a      	str	r2, [r3, #4]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d10b      	bne.n	800e7dc <_ux_dcd_stm32_transfer_run+0xb8>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	f7f6 faa6 	bl	8004d26 <HAL_PCD_EP_Transmit>
 800e7da:	e00a      	b.n	800e7f2 <_ux_dcd_stm32_transfer_run+0xce>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	695b      	ldr	r3, [r3, #20]
 800e7ee:	f7f6 fa47 	bl	8004c80 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f000 f85b 	bl	800e8ae <_ux_utility_interrupt_restore>
    return(UX_STATE_WAIT);
 800e7f8:	2305      	movs	r3, #5
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3718      	adds	r7, #24
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	2000091c 	.word	0x2000091c

0800e808 <MX_USBX_Device_Init>:
  * @param  none
  * @retval status
  */

UINT MX_USBX_Device_Init(VOID)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
   UINT ret = UX_SUCCESS;
 800e80e:	2300      	movs	r3, #0
 800e810:	607b      	str	r3, [r7, #4]

   /* USER CODE BEGIN MX_USBX_Device_Init1 */
  /* Initialize USBX Memory */
  if (ux_system_initialize(ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800e812:	2300      	movs	r3, #0
 800e814:	2200      	movs	r2, #0
 800e816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e81a:	4818      	ldr	r0, [pc, #96]	@ (800e87c <MX_USBX_Device_Init+0x74>)
 800e81c:	f7fe fec4 	bl	800d5a8 <_uxe_system_initialize>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <MX_USBX_Device_Init+0x22>
  {
    Error_Handler();
 800e826:	f7f2 f88b 	bl	8000940 <Error_Handler>
  }
   /* Initialize the USB Peripheral */
   MX_USB_OTG_HS_PCD_Init();
 800e82a:	f7f1 ff33 	bl	8000694 <MX_USB_OTG_HS_PCD_Init>
   /* Set the RX Fifo */
   HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e82e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e832:	4813      	ldr	r0, [pc, #76]	@ (800e880 <MX_USBX_Device_Init+0x78>)
 800e834:	f7f6 fdc9 	bl	80053ca <HAL_PCDEx_SetRxFiFo>
   /* Set the TX Fifo for the Control EP 0 */
   HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 800e838:	2240      	movs	r2, #64	@ 0x40
 800e83a:	2100      	movs	r1, #0
 800e83c:	4810      	ldr	r0, [pc, #64]	@ (800e880 <MX_USBX_Device_Init+0x78>)
 800e83e:	f7f6 fd7d 	bl	800533c <HAL_PCDEx_SetTxFiFo>
   /* Set the TX Fifo for the HID Mouse EP 1 */
   HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 800e842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e846:	2101      	movs	r1, #1
 800e848:	480d      	ldr	r0, [pc, #52]	@ (800e880 <MX_USBX_Device_Init+0x78>)
 800e84a:	f7f6 fd77 	bl	800533c <HAL_PCDEx_SetTxFiFo>
   /* Link the USB drivers with the USBX DCD and check if it return error */
   if(ux_dcd_stm32_initialize((ULONG)USB_OTG_HS, (ULONG)&hpcd_USB_OTG_HS) != UX_SUCCESS)
 800e84e:	4b0c      	ldr	r3, [pc, #48]	@ (800e880 <MX_USBX_Device_Init+0x78>)
 800e850:	4619      	mov	r1, r3
 800e852:	480c      	ldr	r0, [pc, #48]	@ (800e884 <MX_USBX_Device_Init+0x7c>)
 800e854:	f7ff fe4a 	bl	800e4ec <_ux_dcd_stm32_initialize>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d006      	beq.n	800e86c <MX_USBX_Device_Init+0x64>
   {
             HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800e85e:	2201      	movs	r2, #1
 800e860:	2102      	movs	r1, #2
 800e862:	4809      	ldr	r0, [pc, #36]	@ (800e888 <MX_USBX_Device_Init+0x80>)
 800e864:	f7f3 fab2 	bl	8001dcc <HAL_GPIO_WritePin>
             Error_Handler();
 800e868:	f7f2 f86a 	bl	8000940 <Error_Handler>
   }
   /* Start the PCD Peripheral */
   HAL_PCD_Start(&hpcd_USB_OTG_HS);
 800e86c:	4804      	ldr	r0, [pc, #16]	@ (800e880 <MX_USBX_Device_Init+0x78>)
 800e86e:	f7f5 fbff 	bl	8004070 <HAL_PCD_Start>
   /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800e872:	687b      	ldr	r3, [r7, #4]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20000924 	.word	0x20000924
 800e880:	20000434 	.word	0x20000434
 800e884:	42040000 	.word	0x42040000
 800e888:	42021000 	.word	0x42021000

0800e88c <_ux_utility_interrupt_disable>:
  *         USB utility interrupt disable.
  * @param  none
  * @retval none
  */
ALIGN_TYPE _ux_utility_interrupt_disable(VOID)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e892:	f3ef 8310 	mrs	r3, PRIMASK
 800e896:	603b      	str	r3, [r7, #0]
  return(result);
 800e898:	683b      	ldr	r3, [r7, #0]
  UINT interrupt_save;
  /* USER CODE BEGIN _ux_utility_interrupt_disable */
  interrupt_save = __get_PRIMASK();
 800e89a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800e89c:	b672      	cpsid	i
}
 800e89e:	bf00      	nop
  __disable_irq();
  /* USER CODE END _ux_utility_interrupt_disable */

  return interrupt_save;
 800e8a0:	687b      	ldr	r3, [r7, #4]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <_ux_utility_interrupt_restore>:
  *         USB utility interrupt restore.
  * @param  flags
  * @retval none
  */
VOID _ux_utility_interrupt_restore(ALIGN_TYPE flags)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b085      	sub	sp, #20
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f383 8810 	msr	PRIMASK, r3
}
 800e8c0:	bf00      	nop

  /* USER CODE BEGIN _ux_utility_interrupt_restore */
  __set_PRIMASK(flags);
  /* USER CODE END _ux_utility_interrupt_restore */
}
 800e8c2:	bf00      	nop
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <memset>:
 800e8ce:	4402      	add	r2, r0
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d100      	bne.n	800e8d8 <memset+0xa>
 800e8d6:	4770      	bx	lr
 800e8d8:	f803 1b01 	strb.w	r1, [r3], #1
 800e8dc:	e7f9      	b.n	800e8d2 <memset+0x4>
	...

0800e8e0 <__libc_init_array>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	4d0d      	ldr	r5, [pc, #52]	@ (800e918 <__libc_init_array+0x38>)
 800e8e4:	2600      	movs	r6, #0
 800e8e6:	4c0d      	ldr	r4, [pc, #52]	@ (800e91c <__libc_init_array+0x3c>)
 800e8e8:	1b64      	subs	r4, r4, r5
 800e8ea:	10a4      	asrs	r4, r4, #2
 800e8ec:	42a6      	cmp	r6, r4
 800e8ee:	d109      	bne.n	800e904 <__libc_init_array+0x24>
 800e8f0:	4d0b      	ldr	r5, [pc, #44]	@ (800e920 <__libc_init_array+0x40>)
 800e8f2:	2600      	movs	r6, #0
 800e8f4:	4c0b      	ldr	r4, [pc, #44]	@ (800e924 <__libc_init_array+0x44>)
 800e8f6:	f000 f817 	bl	800e928 <_init>
 800e8fa:	1b64      	subs	r4, r4, r5
 800e8fc:	10a4      	asrs	r4, r4, #2
 800e8fe:	42a6      	cmp	r6, r4
 800e900:	d105      	bne.n	800e90e <__libc_init_array+0x2e>
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	f855 3b04 	ldr.w	r3, [r5], #4
 800e908:	3601      	adds	r6, #1
 800e90a:	4798      	blx	r3
 800e90c:	e7ee      	b.n	800e8ec <__libc_init_array+0xc>
 800e90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e912:	3601      	adds	r6, #1
 800e914:	4798      	blx	r3
 800e916:	e7f2      	b.n	800e8fe <__libc_init_array+0x1e>
 800e918:	0800ea18 	.word	0x0800ea18
 800e91c:	0800ea18 	.word	0x0800ea18
 800e920:	0800ea18 	.word	0x0800ea18
 800e924:	0800ea1c 	.word	0x0800ea1c

0800e928 <_init>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	bf00      	nop
 800e92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e92e:	bc08      	pop	{r3}
 800e930:	469e      	mov	lr, r3
 800e932:	4770      	bx	lr

0800e934 <_fini>:
 800e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e936:	bf00      	nop
 800e938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e93a:	bc08      	pop	{r3}
 800e93c:	469e      	mov	lr, r3
 800e93e:	4770      	bx	lr
